module.exports={};const atob=require("atob"),btoa=require("btoa"),JDB=require("jungle-db"),fs=require("fs"),https=require("https"),WebSocket=require("ws");global.Class={register:e=>{module.exports[e.prototype.constructor.name]=e}};class LogNative{constructor(){this._global_level=Log.INFO;this._tag_levels={};this._chalk=require("chalk")}isLoggable(e,t){return e&&this._tag_levels[e]?this._tag_levels[e]<=t:this._global_level<=t}setLoggable(e,t){this._tag_levels[e]=t}msg(e,t,s){if(!this.isLoggable(t,e))return;t&&t.name&&(t=t.name);t&&s.unshift(t+":");let r=`[${Log.Level.toStringTag(e)} ${(new Date).toTimeString().substr(0,8)}] `;const i=this._chalk;e>=Log.ERROR?console.log(r+i.red(s.join(" "))):e>=Log.WARNING?console.log(r+i.yellow(s.join(" "))):e>=Log.INFO?console.log(r+i.cyan(s.join(" "))):e>=Log.DEBUG?console.log(r+i.magenta(s.join(" "))):e<=Log.TRACE?console.trace(r+s.join(" ")):console.log(r+s.join(" "))}}Class.register(LogNative);class Log{static get instance(){Log._instance||(Log._instance=new Log(new LogNative));return Log._instance}constructor(e){this._native=e}setLoggable(e,t){this._native.setLoggable(e,t)}get level(){return this._native._global_level}set level(e){this._native._global_level=e}msg(e,t,s){if(this._native.isLoggable(t,e)){for(let e=0;e<s.length;++e){"function"==typeof s[e]&&(s[e]=s[e]());"object"==typeof s[e]&&("function"==typeof s[e].toString?s[e]=s[e].toString():s[e].constructor&&s[e].constructor.name?s[e]=`{Object: ${s[e].constructor.name}}`:s[e]="{Object}")}this._native.msg(e,t,s)}}static d(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.DEBUG,e,s)}static e(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.ERROR,e,s)}static i(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.INFO,e,s)}static v(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.VERBOSE,e,s)}static w(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.WARNING,e,s)}static t(e,t,...s){if(arguments.length>=2){e=arguments[0];s=Array.prototype.slice.call(arguments,1)}else{e=undefined;s=Array.prototype.slice.call(arguments,0)}Log.instance.msg(Log.TRACE,e,s)}}Log.Level={TRACE:1,VERBOSE:2,DEBUG:3,INFO:4,WARNING:5,ERROR:6,ASSERT:7,toStringTag:function(e){switch(e){case Log.TRACE:return"T";case Log.VERBOSE:return"V";case Log.DEBUG:return"D";case Log.INFO:return"I";case Log.WARNING:return"W";case Log.ERROR:return"E";case Log.ASSERT:return"A";default:return"*"}}};Log.TRACE=Log.Level.TRACE;Log.VERBOSE=Log.Level.VERBOSE;Log.DEBUG=Log.Level.DEBUG;Log.INFO=Log.Level.INFO;Log.WARNING=Log.Level.WARNING;Log.ERROR=Log.Level.ERROR;Log.ASSERT=Log.Level.ASSERT;Log._instance=null;Log.d.tag=(e=>Log.d.bind(null,e));Log.e.tag=(e=>Log.e.bind(null,e));Log.i.tag=(e=>Log.i.bind(null,e));Log.v.tag=(e=>Log.v.bind(null,e));Log.w.tag=(e=>Log.w.bind(null,e));Log.t.tag=(e=>Log.t.bind(null,e));Class.register(Log);class Observable{static get WILDCARD(){return"*"}constructor(){this._listeners=new Map}on(e,t){if(this._listeners.has(e))return this._listeners.get(e).push(t)-1;this._listeners.set(e,[t]);return 0}off(e,t){this._listeners.has(e)&&this._listeners.get(e)[t]&&delete this._listeners.get(e)[t]}fire(e,...t){if(this._listeners.has(e))for(const s in this._listeners.get(e)){this._listeners.get(e)[s].apply(null,t)}if(this._listeners.has(Observable.WILDCARD))for(const s in this._listeners.get(Observable.WILDCARD)){this._listeners.get(Observable.WILDCARD)[s].apply(null,arguments)}}bubble(e,...t){for(const s of t){let t;t=s==Observable.WILDCARD?function(){this.fire.apply(this,arguments)}:function(){this.fire.apply(this,[s,...arguments])};e.on(s,t.bind(this))}}}Class.register(Observable);class DataChannel extends Observable{constructor(){super();this._buffer=null;this._msgType=0;this._receivingTag=-1;this._sendingTag=0;this._expectedMessagesByType=new Map;this._timers=new Timers}isExpectingMessage(e){return this._expectedMessagesByType.has(e)}expectMessage(e,t,s=DataChannel.MESSAGE_TIMEOUT,r=DataChannel.CHUNK_TIMEOUT){Array.isArray(e)||(e=[e]);if(0===e.length)return;const i=new ExpectedMessage(e,t,s,r);for(const n of e)this._expectedMessagesByType.set(n,i);this._timers.resetTimeout(`chunk-${i.id}`,this._onTimeout.bind(this,i),r);this._timers.resetTimeout(`msg-${i.id}`,this._onTimeout.bind(this,i),s)}close(){throw new Error("Not implemented")}_onClose(){this._timers.clearAll();this.fire("close",this)}_error(e){this.fire("error",e,this);Log.e(DataChannel,e);this.close()}_onMessage(e){try{if(this.readyState!==DataChannel.ReadyState.OPEN)return;const s=new SerialBuffer(e);if(0===s.byteLength)return;if(s.byteLength>DataChannel.CHUNK_SIZE_MAX){this._error("Received chunk larger than maximum chunk size, discarding");return}const r=s.readUint8(),i=s.byteLength-s.readPos,n=s.read(i);if(null===this._buffer&&r===(this._receivingTag+1)%NumberUtils.UINT8_MAX){const e=new SerialBuffer(n),t=Message.peekLength(e);if(t>DataChannel.MESSAGE_SIZE_MAX){this._error(`Received message with excessive message size ${t} > ${DataChannel.MESSAGE_SIZE_MAX}`);return}this._buffer=new SerialBuffer(t);this._receivingTag=r;this._msgType=Message.peekType(e)}if(null===this._buffer){Log.e(DataChannel,`Message does not start next tag ${this._receivingTag+1} (but ${r}), but buffer is null`);return}if(r!==this._receivingTag){this._error(`Received message with wrong message tag ${r}, expected ${this._receivingTag}`);return}let o=this._buffer.byteLength-this._buffer.writePos;if(i>o){this._error("Received chunk larger than remaining bytes to read, discarding");return}this._buffer.write(n);o-=i;const a=this._expectedMessagesByType.get(this._msgType);if(0===o){if(a){this._timers.clearTimeout(`chunk-${a.id}`);this._timers.clearTimeout(`msg-${a.id}`);for(const e of a.types)this._expectedMessagesByType["delete"](e)}const e=this._buffer.buffer;this._buffer=null;this.fire("message",e,this)}else{a&&this._timers.resetTimeout(`chunk-${a.id}`,this._onTimeout.bind(this,a),a.chunkTimeout);this.fire("chunk",this._buffer)}}catch(t){this._error(`Error occurred while parsing incoming message, ${t.message}`)}}_onTimeout(e){if(e){this._timers.clearTimeout(`chunk-${e.id}`);this._timers.clearTimeout(`msg-${e.id}`);for(const t of e.types)this._expectedMessagesByType["delete"](t);e.timeoutCallback()}Log.e(DataChannel,"Timeout while receiving chunked message");this._buffer=null}send(e){Assert.that(e.byteLength<=DataChannel.MESSAGE_SIZE_MAX,"DataChannel.send() max message size exceeded");const t=this._sendingTag;this._sendingTag=(this._sendingTag+1)%NumberUtils.UINT8_MAX;this._sendChunked(e,t)}_sendChunked(e,t){let s=e.byteLength,r=null;for(;s>0;){let i=null;if(s+1>=DataChannel.CHUNK_SIZE_MAX){(i=new SerialBuffer(DataChannel.CHUNK_SIZE_MAX)).writeUint8(t);r=new Uint8Array(e.buffer,e.byteLength-s,DataChannel.CHUNK_SIZE_MAX-1)}else{(i=new SerialBuffer(s+1)).writeUint8(t);r=new Uint8Array(e.buffer,e.byteLength-s,s)}i.write(r);this.sendChunk(i);s-=r.byteLength}}sendChunk(e){throw new Error("Not implemented")}get readyState(){throw new Error("Not implemented")}}DataChannel.CHUNK_SIZE_MAX=16384;DataChannel.MESSAGE_SIZE_MAX=10485760;DataChannel.CHUNK_TIMEOUT=5e3;DataChannel.MESSAGE_TIMEOUT=DataChannel.MESSAGE_SIZE_MAX/DataChannel.CHUNK_SIZE_MAX*DataChannel.CHUNK_TIMEOUT;class ExpectedMessage{constructor(e,t,s=DataChannel.MESSAGE_TIMEOUT,r=DataChannel.CHUNK_TIMEOUT){this.id=e.join(":");this.types=e;this.timeoutCallback=t;this.msgTimeout=s;this.chunkTimeout=r}}DataChannel.ReadyState={CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3};DataChannel.ReadyState.fromString=function(e){switch(e){case"connecting":return DataChannel.ReadyState.CONNECTING;case"open":return DataChannel.ReadyState.OPEN;case"closing":return DataChannel.ReadyState.CLOSING;case"closed":return DataChannel.ReadyState.CLOSED;default:throw new Error("Invalid string")}};Class.register(DataChannel);class CryptoLib{static get instance(){if(!CryptoLib._instance){const e={},t=require("crypto");e.getRandomValues=(e=>{if(!(e instanceof Uint8Array))throw new TypeError("expected Uint8Array");if(e.length>65536){const t=new Error;t.code=22;t.message=`Failed to execute 'getRandomValues' on 'Crypto': The ArrayBufferView's byte length ${e.length} exceeds the number of bytes of entropy available via this API (65536).`;t.name="QuotaExceededError";throw t}const s=t.randomBytes(e.length);e.set(s);return e});CryptoLib._instance=e}return CryptoLib._instance}}CryptoLib._instance=null;Class.register(CryptoLib);class WebRtcFactory{static newPeerConnection(e){return null}static newSessionDescription(e){return null}static newIceCandidate(e){return null}}Class.register(WebRtcFactory);class WebSocketFactory{static newWebSocketServer(e){const t=e.peerAddress.port,s=e.sslConfig,r={key:fs.readFileSync(s.key),cert:fs.readFileSync(s.cert)},i=https.createServer(r,(e,t)=>{t.writeHead(200);t.end("Nimiq NodeJS Client\n")}).listen(t);return new WebSocket.Server({server:i})}static newWebSocket(e,t){return new WebSocket(e,t)}}Class.register(WebSocketFactory);class Services{constructor(e=Services.NONE,t=Services.NONE){this._provided=e;this._accepted=t}get provided(){return this._provided}get accepted(){return this._accepted}set provided(e){this._provided=e}set accepted(e){this._accepted=e}static isFullNode(e){return 0!=(e&Services.FULL)}static isLightNode(e){return 0!=(e&Services.LIGHT)}static isNanoNode(e){return e===Services.NANO}}Services.NONE=0;Services.NANO=1;Services.LIGHT=2;Services.FULL=4;Class.register(Services);class Synchronizer extends Observable{constructor(){super();this._queue=[];this._working=!1}push(e){return new Promise((t,s)=>{this._queue.push({fn:e,resolve:t,reject:s});this._working||this._doWork()["catch"](Log.w.tag(Synchronizer))})}clear(){for(const e of this._queue)e.reject&&e.reject();this._queue=[]}async _doWork(){this._working=!0;this.fire("work-start",this);for(;this._queue.length;){const t=this._queue.shift();try{const s=await t.fn();t.resolve(s)}catch(e){t.reject&&t.reject(e)}}this._working=!1;this.fire("work-end",this)}get working(){return this._working}}Class.register(Synchronizer);class Timers{constructor(){this._timeouts={};this._intervals={}}setTimeout(e,t,s){if(this._timeouts[e])throw"Duplicate timeout for key "+e;this._timeouts[e]=setTimeout(t,s)}clearTimeout(e){clearTimeout(this._timeouts[e]);delete this._timeouts[e]}resetTimeout(e,t,s){clearTimeout(this._timeouts[e]);this._timeouts[e]=setTimeout(t,s)}timeoutExists(e){return this._timeouts[e]!==undefined}setInterval(e,t,s){if(this._intervals[e])throw"Duplicate interval for key "+e;this._intervals[e]=setInterval(t,s)}clearInterval(e){clearInterval(this._intervals[e]);delete this._intervals[e]}resetInterval(e,t,s){clearInterval(this._intervals[e]);this._intervals[e]=setInterval(t,s)}intervalExists(e){return this._intervals[e]!==undefined}clearAll(){for(const e in this._timeouts)this.clearTimeout(e);for(const e in this._intervals)this.clearInterval(e)}}Class.register(Timers);class Version{static isCompatible(e){return e>=Version.CODE}}Version.CODE=1;Class.register(Version);class Time{constructor(e=0){this._offset=e}set offset(e){this._offset=e}now(){return Date.now()+this._offset}}Class.register(Time);class ArrayUtils{static randomElement(e){return e[Math.floor(Math.random()*e.length)]}static subarray(e,t,s){function clamp(e,t,s){return e<t?t:e>s?s:e}t===undefined&&(t=0);s===undefined&&(s=e.byteLength);t=clamp(t,0,e.byteLength);let r=(s=clamp(s,0,e.byteLength))-t;r<0&&(r=0);return new Uint8Array(e.buffer,e.byteOffset+t,r)}static*k_combinations(e,t){const s=e.length;if(t>s)return;const r=Array.from(new Array(t),(e,t)=>t);yield r.map(t=>e[t]);const i=Array.from(new Array(t),(e,s)=>t-s-1);for(;;){let n=t-1,o=!1;for(n of i)if(r[n]!==n+s-t){o=!0;break}if(!o)return;r[n]+=1;for(const e of Array.from(new Array(t-n-1),(e,t)=>n+t+1))r[e]=r[e-1]+1;yield r.map(t=>e[t])}}}Class.register(ArrayUtils);class HashMap{constructor(e=HashMap._hash){this._map=new Map;this._fnHash=e}static _hash(e){return e.hashCode?e.hashCode():e.toString()}get(e){return this._map.get(this._fnHash(e))}put(e,t){this._map.set(this._fnHash(e),t)}remove(e){this._map["delete"](this._fnHash(e))}clear(){this._map.clear()}contains(e){return this._map.has(this._fnHash(e))}keys(){return Array.from(this._map.keys())}keyIterator(){return this._map.keys()}values(){return Array.from(this._map.values())}valueIterator(){return this._map.values()}get length(){return this._map.size}isEmpty(){return 0===this._map.size}}Class.register(HashMap);class HashSet{constructor(e=HashSet._hash){this._map=new Map;this._fnHash=e}static _hash(e){return e.hashCode?e.hashCode():e.toString()}add(e){this._map.set(this._fnHash(e),e)}addAll(e){for(const t of e)this.add(t)}get(e){return this._map.get(this._fnHash(e))}remove(e){this._map["delete"](this._fnHash(e))}removeAll(e){for(const t of e)this.remove(t)}clear(){this._map.clear()}contains(e){return this._map.has(this._fnHash(e))}values(){return Array.from(this._map.values())}valueIterator(){return this._map.values()}[Symbol.iterator](){return this.valueIterator()}get length(){return this._map.size}isEmpty(){return 0===this._map.size}}Class.register(HashSet);class LimitIterable{constructor(e,t){this._iterator=e[Symbol.iterator]?e[Symbol.iterator]():e;this._limit=t}[Symbol.iterator](){return LimitIterable.iterator(this._iterator,this._limit)}static iterator(e,t){let s=0;return{next:()=>{const r=s++>=t,i=e.next();return{value:r?undefined:i.value,done:r||i.done}}}}}Class.register(LimitIterable);class Queue{constructor(e){this._queue=[];this._fnHash=e||Queue._hash}static _hash(e){return e.hashCode?e.hashCode():e.toString()}enqueue(e){this._queue.push(e)}dequeue(){return this._queue.shift()}peek(){return this._queue[0]}indexOf(e){const t=this._fnHash(e);for(let s=0;s<this._queue.length;++s)if(t===this._fnHash(this._queue[s]))return s;return-1}remove(e){const t=this.indexOf(e);t>-1&&this._queue.splice(t,1)}dequeueMulti(e){return this._queue.splice(0,e)}dequeueUntil(e){const t=this.indexOf(e);return t>-1?this._queue.splice(0,t+1):[]}clear(){this._queue=[]}values(){return this._queue}get length(){return this._queue.length}}Class.register(Queue);class SortedList{constructor(e=[],t){this._list=e;this._compare=t||SortedList._compare}static _compare(e,t){return e.compare?e.compare(t):e>t?1:e<t?-1:0}indexOf(e){let t=0,s=this._list.length-1,r=null,i=null;for(;t<=s;){r=Math.round((t+s)/2);i=this._list[r];if(this._compare(i,e)<0)t=r+1;else{if(!(this._compare(i,e)>0))return r;s=r-1}}return-1}_insertionIndex(e){let t=0,s=this._list.length-1,r=null,i=null;for(;t<=s;){r=Math.round((t+s)/2);i=this._list[r];if(this._compare(i,e)<0)t=r+1;else{if(!(this._compare(i,e)>0))break;s=r-1}}return t}add(e){this._list.splice(this._insertionIndex(e),0,e)}shift(){return this._list.shift()}pop(){return this._list.pop()}remove(e){const t=this.indexOf(e);t>-1&&this._list.splice(t,1)}clear(){this._list=[]}values(){return this._list}copy(){return new SortedList(this._list.slice(),this._compare)}get length(){return this._list.length}}Class.register(SortedList);class Assert{static that(e,t="Assertion failed"){if(!e)throw new Error(t)}}Class.register(Assert);class BufferUtils{static toAscii(e){return String.fromCharCode.apply(null,new Uint8Array(e))}static fromAscii(e){const t=new Uint8Array(e.length);for(let s=0;s<e.length;++s)t[s]=e.charCodeAt(s);return t}static _codePointTextDecoder(e){if("undefined"==typeof TextDecoder)throw new Error("TextDecoder not supported");if(null===BufferUtils._ISO_8859_15_DECODER)throw new Error("TextDecoder does not supprot iso-8859-15");if(BufferUtils._ISO_8859_15_DECODER===undefined)try{BufferUtils._ISO_8859_15_DECODER=new TextDecoder("iso-8859-15")}finally{BufferUtils._ISO_8859_15_DECODER=null}return BufferUtils._ISO_8859_15_DECODER.decode(e).replace("€","¤").replace("Š","¦").replace("š","¨").replace("Ž","´").replace("ž","¸").replace("Œ","¼").replace("œ","½").replace("Ÿ","¾")}static _tripletToBase64(e){return BufferUtils._BASE64_LOOKUP[e>>18&63]+BufferUtils._BASE64_LOOKUP[e>>12&63]+BufferUtils._BASE64_LOOKUP[e>>6&63]+BufferUtils._BASE64_LOOKUP[63&e]}static _base64encodeChunk(e,t,s){let r;const i=[];for(let n=t;n<s;n+=3){r=(e[n]<<16&16711680)+(e[n+1]<<8&65280)+(255&e[n+2]);i.push(BufferUtils._tripletToBase64(r))}return i.join("")}static _base64fromByteArray(e){let t;const s=e.length,r=s%3;let i="";const n=[];for(let o=0,a=s-r;o<a;o+=16383)n.push(BufferUtils._base64encodeChunk(e,o,o+16383>a?a:o+16383));if(1===r){t=e[s-1];i+=BufferUtils._BASE64_LOOKUP[t>>2];i+=BufferUtils._BASE64_LOOKUP[t<<4&63];i+="=="}else if(2===r){t=(e[s-2]<<8)+e[s-1];i+=BufferUtils._BASE64_LOOKUP[t>>10];i+=BufferUtils._BASE64_LOOKUP[t>>4&63];i+=BufferUtils._BASE64_LOOKUP[t<<2&63];i+="="}n.push(i);return n.join("")}static toBase64(e){if(PlatformUtils.isNodeJs())return new Buffer(e).toString("base64");if("undefined"!=typeof TextDecoder&&null!==BufferUtils._ISO_8859_15_DECODER)try{return btoa(BufferUtils._codePointTextDecoder(new Uint8Array(e)))}catch(t){}return BufferUtils._base64fromByteArray(new Uint8Array(e))}static fromBase64(e){return new SerialBuffer(Uint8Array.from(atob(e),e=>e.charCodeAt(0)))}static toBase64Url(e){return BufferUtils.toBase64(e).replace(/\//g,"_").replace(/\+/g,"-").replace(/=/g,".")}static fromBase64Url(e){return new SerialBuffer(Uint8Array.from(atob(e.replace(/_/g,"/").replace(/-/g,"+").replace(/\./g,"=")),e=>e.charCodeAt(0)))}static toBase32(e,t=BufferUtils.BASE32_ALPHABET.NIMIQ){let s,r,i,n=3,o=0,a="";for(i=0;i<e.length;i++){a+=t[31&(r=o|(s=e[i])>>n)];n>5&&(a+=t[31&(r=s>>(n-=5))]);o=s<<(n=5-n);n=8-n}3!==n&&(a+=t[31&o]);for(;a.length%8!=0&&33===t.length;)a+=t[32];return a}static fromBase32(e,t=BufferUtils.BASE32_ALPHABET.NIMIQ){const s=[];t.toUpperCase().split("").forEach((e,t)=>{e in s||(s[e]=t)});let r,i=8,n=0,o=[];e.toUpperCase().split("").forEach(e=>{if(33!==t.length||e!==t[32]){r=255&s[e];if((i-=5)>0)n|=r<<i;else if(i<0){o.push(n|r>>-i);n=r<<(i+=8)&255}else{o.push(n|r);i=8;n=0}}});8!==i&&0!==n&&o.push(n);return new Uint8Array(o)}static toHex(e){let t="";for(let s=0;s<e.length;s++){const r=e[s];t+=BufferUtils.HEX_ALPHABET[r>>>4];t+=BufferUtils.HEX_ALPHABET[15&r]}return t}static fromHex(e){e=e.trim();return StringUtils.isHexBytes(e)?new SerialBuffer(Uint8Array.from(e.match(/.{2}/g)||[],e=>parseInt(e,16))):null}static concatTypedArrays(e,t){const s=new e.constructor(e.length+t.length);s.set(e,0);s.set(t,e.length);return s}static equals(e,t){if(e.length!==t.length)return!1;const s=new Uint8Array(e),r=new Uint8Array(t);for(let i=0;i<e.length;i++)if(s[i]!==r[i])return!1;return!0}static compare(e,t){if(e.length<t.length)return-1;if(e.length>t.length)return 1;for(let s=0;s<e.length;s++){if(e[s]<t[s])return-1;if(e[s]>t[s])return 1}return 0}static xor(e,t){const s=new Uint8Array(e.byteLength);for(let r=0;r<e.byteLength;++r)s[r]=e[r]^t[r];return s}}BufferUtils.BASE64_ALPHABET="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";BufferUtils.BASE32_ALPHABET={RFC4648:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",RFC4648_HEX:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",NIMIQ:"0123456789ABCDEFGHJKLMNPQRSTUVXY"};BufferUtils.HEX_ALPHABET="0123456789abcdef";BufferUtils._BASE64_LOOKUP=[];for(let e=0,t=BufferUtils.BASE64_ALPHABET.length;e<t;++e)BufferUtils._BASE64_LOOKUP[e]=BufferUtils.BASE64_ALPHABET[e];Class.register(BufferUtils);class SerialBuffer extends Uint8Array{constructor(e){super(e);this._view=new DataView(this.buffer);this._readPos=0;this._writePos=0}subarray(e,t){return ArrayUtils.subarray(this,e,t)}get readPos(){return this._readPos}set readPos(e){if(e<0||e>this.byteLength)throw`Invalid readPos ${e}`;this._readPos=e}get writePos(){return this._writePos}set writePos(e){if(e<0||e>this.byteLength)throw`Invalid writePos ${e}`;this._writePos=e}reset(){this._readPos=0;this._writePos=0}read(e){const t=this.subarray(this._readPos,this._readPos+e);this._readPos+=e;return t}write(e){this.set(e,this._writePos);this._writePos+=e.byteLength}readUint8(){return this._view.getUint8(this._readPos++)}writeUint8(e){this._view.setUint8(this._writePos++,e)}readUint16(){const e=this._view.getUint16(this._readPos);this._readPos+=2;return e}writeUint16(e){this._view.setUint16(this._writePos,e);this._writePos+=2}readUint32(){const e=this._view.getUint32(this._readPos);this._readPos+=4;return e}writeUint32(e){this._view.setUint32(this._writePos,e);this._writePos+=4}readUint64(){const e=this._view.getUint32(this._readPos)*Math.pow(2,32)+this._view.getUint32(this._readPos+4);if(!NumberUtils.isUint64(e))throw new Error("Malformed value");this._readPos+=8;return e}writeUint64(e){if(!NumberUtils.isUint64(e))throw new Error("Malformed value");this._view.setUint32(this._writePos,Math.floor(e/Math.pow(2,32)));this._view.setUint32(this._writePos+4,e);this._writePos+=8}readVarUint(){const e=this.readUint8();return e<253?e:253===e?this.readUint16():254===e?this.readUint32():this.readUint64()}writeVarUint(e){if(!NumberUtils.isUint64(e))throw new Error("Malformed value");if(e<253)this.writeUint8(e);else if(e<=65535){this.writeUint8(253);this.writeUint16(e)}else if(e<=4294967295){this.writeUint8(254);this.writeUint32(e)}else{this.writeUint8(255);this.writeUint64(e)}}static varUintSize(e){if(!NumberUtils.isUint64(e))throw new Error("Malformed value");return e<253?1:e<=65535?3:e<=4294967295?5:9}readFloat64(){const e=this._view.getFloat64(this._readPos);this._readPos+=8;return e}writeFloat64(e){this._view.setFloat64(this._writePos,e);this._writePos+=8}readString(e){const t=this.read(e);return BufferUtils.toAscii(t)}writeString(e,t){if(StringUtils.isMultibyte(e)||e.length!==t)throw"Malformed value/length";const s=BufferUtils.fromAscii(e);this.write(s)}readPaddedString(e){const t=this.read(e);let s=0;for(;s<e&&0!==t[s];)s++;const r=new Uint8Array(t.buffer,t.byteOffset,s);return BufferUtils.toAscii(r)}writePaddedString(e,t){if(StringUtils.isMultibyte(e)||e.length>t)throw"Malformed value/length";const s=BufferUtils.fromAscii(e);this.write(s);const r=t-s.byteLength;this.write(new Uint8Array(r))}readVarLengthString(){const e=this.readUint8();if(this._readPos+e>this.length)throw"Malformed length";const t=this.read(e);return BufferUtils.toAscii(t)}writeVarLengthString(e){if(StringUtils.isMultibyte(e)||!NumberUtils.isUint8(e.length))throw new Error("Malformed value");const t=BufferUtils.fromAscii(e);this.writeUint8(t.byteLength);this.write(t)}static varLengthStringSize(e){if(StringUtils.isMultibyte(e)||!NumberUtils.isUint8(e.length))throw new Error("Malformed value");return 1+e.length}}Class.register(SerialBuffer);class Crypto{static get lib(){return CryptoLib.instance}static async prepareSyncCryptoWorker(){const e=IWorker._workerImplementation[CryptoWorker.name];await e.init("crypto");Crypto._workerSync=e;return e}static _cryptoWorkerSync(){if(null===Crypto._workerSync)throw new Error("Synchronous crypto worker not yet prepared");return Crypto._workerSync}static async _cryptoWorkerAsync(){Crypto._workerAsync||(Crypto._workerAsync=await IWorker.startWorkerPoolForProxy(CryptoWorker,"crypto",4));return Crypto._workerAsync}static get publicKeyType(){return Uint8Array}static get publicKeySize(){return 32}static publicKeySerialize(e){return e}static publicKeyUnserialize(e){return e}static publicKeyDerive(e){return Crypto._cryptoWorkerSync().publicKeyDerive(e)}static get privateKeyType(){return Uint8Array}static get privateKeySize(){return 32}static privateKeySerialize(e){return e}static privateKeyUnserialize(e){return e}static privateKeyGenerate(){const e=new Uint8Array(Crypto.privateKeySize);Crypto.lib.getRandomValues(e);return e}static get keyPairType(){return Object}static keyPairGenerate(){return Crypto.keyPairDerive(Crypto.privateKeyGenerate())}static keyPairDerive(e){return{privateKey:e,publicKey:Crypto.publicKeyDerive(e)}}static keyPairPrivate(e){return e.privateKey}static keyPairPublic(e){return e.publicKey}static keyPairFromKeys(e,t){return{privateKey:e,publicKey:t}}static get signatureType(){return Uint8Array}static get signatureSize(){return 64}static signatureSerialize(e){return e}static signatureUnserialize(e){return e}static signatureCreate(e,t,s){return Crypto._cryptoWorkerSync().signatureCreate(e,t,s)}static signatureVerify(e,t,s){return Crypto._cryptoWorkerSync().signatureVerify(e,t,s)}static async blockVerify(e,t,s){return(await Crypto._cryptoWorkerAsync()).blockVerify(e,t,s,Block.GENESIS.HASH.serialize())}static get hashType(){return Uint8Array}static get hashSize(){return 32}static get blake2bSize(){return 32}static blake2bSync(e){return Crypto._cryptoWorkerSync().computeBlake2b(e)}static async blake2bAsync(e){return(await Crypto._cryptoWorkerAsync()).computeBlake2b(e)}static get argon2dSize(){return 32}static async argon2d(e){return(await Crypto._cryptoWorkerAsync()).computeArgon2d(e)}static get sha256Size(){return 32}static sha256(e){return Crypto._cryptoWorkerSync().computeSha256(e)}static get randomnessSize(){return 32}static get commitmentPairType(){return Object}static commitmentPairGenerate(){const e=new Uint8Array(Crypto.randomnessSize);Crypto.lib.getRandomValues(e);return Crypto._cryptoWorkerSync().commitmentCreate(e)}static commitmentPairFromValues(e,t){return{secret:e,commitment:t}}static commitmentPairRandomSecret(e){return e.secret}static commitmentPairCommitment(e){return e.commitment}static get randomSecretType(){return Uint8Array}static get randomSecretSize(){return 32}static randomSecretSerialize(e){return e}static randomSecretUnserialize(e){return e}static get commitmentType(){return Uint8Array}static get commitmentSize(){return 32}static commitmentSerialize(e){return e}static commitmentUnserialize(e){return e}static get partialSignatureType(){return Uint8Array}static get partialSignatureSize(){return 32}static partialSignatureSerialize(e){return e}static partialSignatureUnserialize(e){return e}static hashPublicKeys(e){return Crypto._cryptoWorkerSync().publicKeysHash(e)}static delinearizePublicKey(e,t){const s=Crypto._cryptoWorkerSync(),r=s.publicKeysHash(e);return s.publicKeyDelinearize(t,r)}static delinearizePrivateKey(e,t,s){const r=Crypto._cryptoWorkerSync(),i=r.publicKeysHash(e);return r.privateKeyDelinearize(s,t,i)}static delinearizeAndAggregatePublicKeys(e){const t=Crypto._cryptoWorkerSync(),s=t.publicKeysHash(e);return t.publicKeysDelinearizeAndAggregate(e,s)}static delinearizedPartialSignatureCreate(e,t,s,r,i,n){return Crypto._cryptoWorkerSync().delinearizedPartialSignatureCreate(s,e,t,r,i,n)}static aggregateCommitments(e){return Crypto._cryptoWorkerSync().commitmentsAggregate(e)}static aggregatePartialSignatures(e){const t=Crypto._cryptoWorkerSync();return e.reduce((e,s)=>t.scalarsAdd(e,s))}static combinePartialSignatures(e,t){const s=Crypto.aggregatePartialSignatures(t);return BufferUtils.concatTypedArrays(e,s)}static async kdf(e,t,s=256){return(await Crypto._cryptoWorkerAsync()).kdf(e,t,s)}static async manyPow(e){const t=await Crypto._cryptoWorkerAsync(),s=t.poolSize||1,r=[];let i=0;for(let a=0;a<s;++a){r.push([]);for(;i<(a+1)/s*e.length;++i)r[a].push(e[i].serialize())}const n=[];for(const a of r)n.push(t.computeArgon2dBatch(a));const o=(await Promise.all(n)).reduce((e,t)=>[...e,...t],[]);for(let a=0;a<e.length;++a)e[a]._pow=new Hash(o[a])}}Crypto._workerSync=null;Crypto._workerAsync=null;Class.register(Crypto);class CRC32{static _createTable(){let e;const t=[];for(let s=0;s<256;++s){e=s;for(let t=0;t<8;++t)e=1&e?CRC32._POLYNOMIAL^e>>>1:e>>>1;t[s]=e>>>0}return t}static compute(e){CRC32._table||(CRC32._table=CRC32._createTable());CRC32._hex_chars||(CRC32._hex_chars="0123456789abcdef".split(""));const t=new Uint8Array(e);let s=-1,r="";for(let i=0;i<t.length;++i)s=CRC32._table[255&(s^t[i])]^s>>>8;s^=-1;r+=CRC32._hex_chars[s>>28&15]+CRC32._hex_chars[s>>24&15]+CRC32._hex_chars[s>>20&15]+CRC32._hex_chars[s>>16&15]+CRC32._hex_chars[s>>12&15]+CRC32._hex_chars[s>>8&15]+CRC32._hex_chars[s>>4&15]+CRC32._hex_chars[15&s];return parseInt(r,16)}}CRC32._table=null;CRC32._hex_chars=null;CRC32._POLYNOMIAL=3988292384;Class.register(CRC32);class NumberUtils{static isUint8(e){return Number.isInteger(e)&&e>=0&&e<=NumberUtils.UINT8_MAX}static isUint16(e){return Number.isInteger(e)&&e>=0&&e<=NumberUtils.UINT16_MAX}static isUint32(e){return Number.isInteger(e)&&e>=0&&e<=NumberUtils.UINT32_MAX}static isUint64(e){return Number.isInteger(e)&&e>=0&&e<=NumberUtils.UINT64_MAX}static randomUint32(){return Math.floor(Math.random()*(NumberUtils.UINT32_MAX+1))}static randomUint64(){return Math.floor(Math.random()*(NumberUtils.UINT64_MAX+1))}}NumberUtils.UINT8_MAX=255;NumberUtils.UINT16_MAX=65535;NumberUtils.UINT32_MAX=4294967295;NumberUtils.UINT64_MAX=Number.MAX_SAFE_INTEGER;Class.register(NumberUtils);class MerkleTree{static computeRoot(e,t=MerkleTree._hash){return MerkleTree._computeRoot(e,t)}static _computeRoot(e,t){const s=e.length;if(0===s)return Hash.light(new Uint8Array(0));if(1===s)return t(e[0]);const r=Math.round(s/2),i=e.slice(0,r),n=e.slice(r),o=MerkleTree._computeRoot(i,t),a=MerkleTree._computeRoot(n,t);return Hash.light(BufferUtils.concatTypedArrays(o.serialize(),a.serialize()))}static _hash(e){if(e instanceof Hash)return e;if("function"==typeof e.hash)return e.hash();if("function"==typeof e.serialize)return Hash.light(e.serialize());if(e instanceof Uint8Array)return Hash.light(e);throw new Error("MerkleTree objects must be Uint8Array or have a .hash()/.serialize() method")}}Class.register(MerkleTree);class MerklePath{constructor(e){if(!Array.isArray(e)||!NumberUtils.isUint8(e.length)||e.some(e=>!(e instanceof MerklePathNode)))throw new Error("Malformed nodes");this._nodes=e}static compute(e,t,s=MerkleTree._hash){const r=s(t),i=[];MerklePath._compute(e,r,i,s);return new MerklePath(i)}static _compute(e,t,s,r){const i=e.length;let n;if(0===i)return{containsLeaf:!1,inner:n=Hash.light(new Uint8Array(0))};if(1===i)return{containsLeaf:(n=r(e[0])).equals(t),inner:n};const o=Math.round(i/2),a=e.slice(0,o),c=e.slice(o),{containsLeaf:h,inner:l}=MerklePath._compute(a,t,s,r),{containsLeaf:u,inner:d}=MerklePath._compute(c,t,s,r);n=Hash.light(BufferUtils.concatTypedArrays(l.serialize(),d.serialize()));if(h){s.push(new MerklePathNode(d,!1));return{containsLeaf:!0,inner:n}}if(u){s.push(new MerklePathNode(l,!0));return{containsLeaf:!0,inner:n}}return{containsLeaf:!1,inner:n}}computeRoot(e,t=MerkleTree._hash){let s=t(e);for(const r of this._nodes){const e=r.left,t=r.hash,i=new SerialBuffer(2*t.serializedSize);e&&t.serialize(i);s.serialize(i);e||t.serialize(i);s=Hash.light(i)}return s}static _compress(e){const t=e.length,s=Math.ceil(t/8),r=new Uint8Array(s);for(let i=0;i<t;i++)e[i].left&&(r[Math.floor(i/8)]|=128>>>i%8);return r}static unserialize(e){const t=e.readUint8(),s=Math.ceil(t/8),r=e.read(s),i=[];for(let n=0;n<t;n++){const t=0!=(r[Math.floor(n/8)]&128>>>n%8),s=Hash.unserialize(e);i.push(new MerklePathNode(s,t))}return new MerklePath(i)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._nodes.length);e.write(MerklePath._compress(this._nodes));for(const t of this._nodes)t.hash.serialize(e);return e}get serializedSize(){return 1+Math.ceil(this._nodes.length/8)+this._nodes.reduce((e,t)=>e+t.hash.serializedSize,0)}equals(e){return e instanceof MerklePath&&this._nodes.length===e._nodes.length&&this._nodes.every((t,s)=>t.equals(e._nodes[s]))}get nodes(){return this._nodes}}Class.register(MerklePath);class MerklePathNode{constructor(e,t){this._hash=e;this._left=t}get hash(){return this._hash}get left(){return this._left}equals(e){return e instanceof MerklePathNode&&this._hash.equals(e.hash)&&this._left===e.left}}Class.register(MerklePathNode);class MerkleProof{constructor(e,t){if(!Array.isArray(e)||!NumberUtils.isUint16(e.length))throw new Error("Malformed nodes");if(!Array.isArray(t)||!NumberUtils.isUint16(t.length))throw new Error("Malformed operations");this._nodes=e;this._operations=t}static compute(e,t,s=MerkleTree._hash){const r=t.map(s),{containsLeaf:i,operations:n,path:o,inner:a}=MerkleProof._compute(e,r,s);return new MerkleProof(o,n)}static computeWithAbsence(e,t,s,r=MerkleTree._hash){const i=new Set;(t=t.slice()).sort(s);let n=0,o=0;for(;o<e.length&&n<t.length;){const r=e[o],a=s(r,t[n]);if(0===a){i.add(t[n]);++n}else if(a>0){o>0&&i.add(e[o-1]);i.add(r);++n}else++o}n<t.length&&e.length>0&&i.add(e[e.length-1]);return MerkleProof.compute(e,Array.from(i),r)}static _compute(e,t,s){const r=e.length;let i;if(0===r){i=Hash.light(new Uint8Array(0));return{containsLeaf:!1,operations:[MerkleProof.Operation.CONSUME_PROOF],path:[i],inner:i}}if(1===r){i=s(e[0]);const r=t.some(e=>i.equals(e));return{containsLeaf:r,operations:[r?MerkleProof.Operation.CONSUME_INPUT:MerkleProof.Operation.CONSUME_PROOF],path:r?[]:[i],inner:i}}const n=Math.round(r/2),o=e.slice(0,n),a=e.slice(n),{containsLeaf:c,operations:h,path:l,inner:u}=MerkleProof._compute(o,t,s),{containsLeaf:d,operations:_,path:g,inner:f}=MerkleProof._compute(a,t,s);i=Hash.light(BufferUtils.concatTypedArrays(u.serialize(),f.serialize()));if(!c&&!d)return{containsLeaf:!1,operations:[MerkleProof.Operation.CONSUME_PROOF],path:[i],inner:i};let p=h;p=p.concat(_);let C=l;C=C.concat(g);p.push(MerkleProof.Operation.HASH);return{containsLeaf:!0,operations:p,path:C,inner:i}}computeRoot(e,t=MerkleTree._hash){const s=e.map(t),r=[],i=this._nodes.slice();for(const n of this._operations)switch(n){case MerkleProof.Operation.CONSUME_PROOF:if(0===i.length)throw new Error("Invalid operation.");r.push(i.shift());break;case MerkleProof.Operation.CONSUME_INPUT:if(0===s.length)throw new Error("Invalid operation.");r.push(s.shift());break;case MerkleProof.Operation.HASH:{if(r.length<2)throw new Error("Invalid operation.");const e=r.splice(-2,2),t=new SerialBuffer(e.reduce((e,t)=>e+t.serializedSize,0)),[s,i]=e;s.serialize(t);i.serialize(t);r.push(Hash.light(t));break}default:throw new Error("Invalid operation.")}if(1!==r.length||0!==i.length||0!==s.length)throw Error("Did not consume all nodes.");return r[0]}static _compress(e){const t=e.length,s=Math.ceil(t/4),r=new Uint8Array(s);for(let i=0;i<t;i++){const t=3&e[i];r[Math.floor(i/4)]|=t<<i%4*2}return r}static unserialize(e){const t=e.readUint16(),s=Math.ceil(t/4),r=e.read(s),i=[];for(let a=0;a<t;a++){const e=r[Math.floor(a/4)]>>>a%4*2&3;i.push(e)}const n=e.readUint16(),o=[];for(let a=0;a<n;a++)o.push(Hash.unserialize(e));return new MerkleProof(o,i)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._operations.length);e.write(MerkleProof._compress(this._operations));e.writeUint16(this._nodes.length);for(const t of this._nodes)t.serialize(e);return e}get serializedSize(){return 4+Math.ceil(this._operations.length/4)+this._nodes.reduce((e,t)=>e+t.serializedSize,0)}equals(e){return e instanceof MerkleProof&&this._nodes.length===e._nodes.length&&this._nodes.every((t,s)=>t.equals(e._nodes[s]))&&this._operations.length===e._operations.length&&this._operations.every((t,s)=>t===e._operations[s])}get nodes(){return this._nodes}}MerkleProof.Operation={CONSUME_PROOF:0,CONSUME_INPUT:1,HASH:2};Class.register(MerkleProof);class PlatformUtils{static isBrowser(){return"undefined"!=typeof window}static isNodeJs(){return!PlatformUtils.isBrowser()&&"object"==typeof process&&"function"==typeof require}static supportsWebRTC(){return!!(PlatformUtils.isBrowser()?window.RTCPeerConnection||window.webkitRTCPeerConnection:null)}static isOnline(){return!PlatformUtils.isBrowser()||!("onLine"in window.navigator)||window.navigator.onLine}}Class.register(PlatformUtils);class StringUtils{static isMultibyte(e){return/[\uD800-\uDFFF]/.test(e)}static isHex(e){return/[0-9A-Fa-f]*/.test(e)}static isHexBytes(e,t){return!!StringUtils.isHex(e)&&(e.length%2==0&&("number"!=typeof t||e.length/2===t))}static commonPrefix(e,t){let s=0;for(;s<e.length&&e[s]===t[s];++s);return e.substr(0,s)}}Class.register(StringUtils);class Policy{static coinsToSatoshis(e){return Math.round(e*Policy.SATOSHIS_PER_COIN)}static satoshisToCoins(e){return e/Policy.SATOSHIS_PER_COIN}static supplyAfter(e){let t=Math.floor(e/Policy._supplyCacheInterval)*Policy._supplyCacheInterval;const s=(t=Math.max(0,Math.min(t,Policy._supplyCacheMax)))/Policy._supplyCacheInterval,r=Math.floor(e/Policy._supplyCacheInterval);let i=0===t?Policy.INITIAL_SUPPLY:Policy._supplyCache.get(t);for(let n=s;n<r;++n){t=n*Policy._supplyCacheInterval;const e=(n+1)*Policy._supplyCacheInterval-1;i=Policy._supplyAfter(i,e,t);Policy._supplyCache.set(e+1,i);Policy._supplyCacheMax=e+1}return Policy._supplyAfter(i,e,r*Policy._supplyCacheInterval)}static _supplyAfter(e,t,s=0){let r=e;for(let i=s;i<=t;++i)r+=Policy._blockRewardAt(r,i);return r}static blockRewardAt(e){const t=Policy.supplyAfter(e-1);return Policy._blockRewardAt(t,e)}static _blockRewardAt(e,t){if(t<=0)return 0;const s=Policy.TOTAL_SUPPLY-e;return t>=Policy.EMISSION_TAIL_START&&s>=Policy.EMISSION_TAIL_REWARD?Policy.EMISSION_TAIL_REWARD:(s-s%Policy.EMISSION_SPEED)/Policy.EMISSION_SPEED}}Policy.BLOCK_TIME=60;Policy.BLOCK_SIZE_MAX=1e6;Policy.BLOCK_TARGET_MAX=Math.pow(2,240);Policy.DIFFICULTY_BLOCK_WINDOW=120;Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR=2;Policy.TRANSACTION_VALIDITY_WINDOW=120;Policy.SATOSHIS_PER_COIN=1e5;Policy.TOTAL_SUPPLY=21e14;Policy.INITIAL_SUPPLY=252e12;Policy.EMISSION_SPEED=Math.pow(2,22);Policy.EMISSION_TAIL_START=48692960;Policy.EMISSION_TAIL_REWARD=4e3;Policy.M=240;Policy.K=120;Policy.DELTA=.1;Policy.NUM_BLOCKS_VERIFICATION=250;Policy.NUM_SNAPSHOTS_MAX=20;Policy._supplyCache=new Map;Policy._supplyCacheMax=0;Policy._supplyCacheInterval=5e3;Class.register(Policy);class Primitive{constructor(e,t,s){if(t&&!(e instanceof t))throw new Error("Primitive: Invalid type");if(s!==undefined&&e.length!==undefined&&e.length!==s)throw new Error("Primitive: Invalid length");this._obj=e}equals(e){return e instanceof Primitive&&BufferUtils.equals(this.serialize(),e.serialize())}compare(e){if("function"==typeof this._obj.compare)return this._obj.compare(e._obj);if(this._obj.prototype===e._obj.prototype)return BufferUtils.compare(this.serialize(),e.serialize());throw new Error(`Incomparable types: ${this._obj.constructor.name} and ${e._obj.constructor.name}`)}hashCode(){return this.toBase64()}serialize(e){}toString(){return this.toBase64()}toBase64(){return BufferUtils.toBase64(this.serialize())}toHex(){return BufferUtils.toHex(this.serialize())}}Class.register(Primitive);class Hash extends Primitive{static copy(e){if(!e)return e;const t=new Uint8Array(e._obj);return new Hash(t)}constructor(e,t=Hash.Algorithm.BLAKE2B){null===e&&(e=new Uint8Array(Hash.getSize(t)));super(e,Crypto.hashType,Hash.getSize(t));this._algorithm=t}static light(e){return Hash.blake2b(e)}static blake2b(e){return new Hash(Crypto.blake2bSync(e),Hash.Algorithm.BLAKE2B)}static lightAsync(e){return Hash.blake2bAsync(e)}static async blake2bAsync(e){return new Hash(await Crypto.blake2bAsync(e),Hash.Algorithm.BLAKE2B)}static hard(e){return Hash.argon2d(e)}static async argon2d(e){return new Hash(await Crypto.argon2d(e),Hash.Algorithm.ARGON2D)}static sha256(e){return new Hash(Crypto.sha256(e),Hash.Algorithm.SHA256)}static compute(e,t){switch(t){case Hash.Algorithm.BLAKE2B:return Hash.blake2b(e);case Hash.Algorithm.SHA256:return Hash.sha256(e);default:throw new Error("Invalid hash algorithm")}}static unserialize(e,t=Hash.Algorithm.BLAKE2B){return new Hash(e.read(Hash.getSize(t)),t)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(this._obj);return e}subarray(e,t){return this._obj.subarray(e,t)}get serializedSize(){return Hash.SIZE.get(this._algorithm)}get array(){return this._obj}get algorithm(){return this._algorithm}equals(e){return e instanceof Hash&&e._algorithm===this._algorithm&&super.equals(e)}static fromBase64(e){return new Hash(BufferUtils.fromBase64(e))}static fromHex(e){return new Hash(BufferUtils.fromHex(e))}static fromString(e){try{return Hash.fromHex(e)}catch(t){}try{return Hash.fromBase64(e)}catch(t){}throw new Error("Invalid hash format")}static isHash(e){return e instanceof Hash}static getSize(e){const t=Hash.SIZE.get(e);if(!t)throw new Error("Invalid hash algorithm");return t}}Hash.Algorithm={BLAKE2B:1,ARGON2D:2,SHA256:3};Hash.SIZE=new Map;Hash.SIZE.set(Hash.Algorithm.BLAKE2B,Crypto.blake2bSize);Hash.SIZE.set(Hash.Algorithm.ARGON2D,Crypto.argon2dSize);Hash.SIZE.set(Hash.Algorithm.SHA256,Crypto.sha256Size);Hash.NULL=new Hash(new Uint8Array(Crypto.hashSize));Class.register(Hash);class PrivateKey extends Primitive{constructor(e){super(e,Crypto.privateKeyType,Crypto.privateKeySize)}static generate(){return new PrivateKey(Crypto.privateKeyGenerate())}static unserialize(e){return new PrivateKey(Crypto.privateKeyUnserialize(e.read(Crypto.privateKeySize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.privateKeySerialize(this._obj));return e}get serializedSize(){return Crypto.privateKeySize}overwrite(e){this._obj.set(e._obj)}equals(e){return e instanceof PrivateKey&&super.equals(e)}}Class.register(PrivateKey);class PublicKey extends Primitive{static copy(e){return e?new PublicKey(new Uint8Array(e._obj)):e}constructor(e){super(e,Crypto.publicKeyType,Crypto.publicKeySize)}static derive(e){return new PublicKey(Crypto.publicKeyDerive(e._obj))}static sum(e){(e=e.slice()).sort((e,t)=>e.compare(t));return new PublicKey(Crypto.delinearizeAndAggregatePublicKeys(e.map(e=>e._obj)))}static unserialize(e){return new PublicKey(Crypto.publicKeyUnserialize(e.read(Crypto.publicKeySize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.publicKeySerialize(this._obj));return e}get serializedSize(){return Crypto.publicKeySize}equals(e){return e instanceof PublicKey&&super.equals(e)}hash(){return Hash.light(this.serialize())}hashAsync(){return Hash.lightAsync(this.serialize())}compare(e){return BufferUtils.compare(this._obj,e._obj)}toAddress(){return Address.fromHash(this.hash())}toPeerId(){return new PeerId(this.hash().subarray(0,16))}}Class.register(PublicKey);class KeyPair extends Primitive{constructor(e,t=!1,s=null){super(e,Crypto.keyPairType);this._locked=t;this._lockedInternally=t;this._lockSalt=s;this._internalPrivateKey=new PrivateKey(Crypto.keyPairPrivate(this._obj))}static generate(){return new KeyPair(Crypto.keyPairGenerate())}static fromPrivateKey(e){return new KeyPair(Crypto.keyPairDerive(e._obj))}static fromHex(e){return KeyPair.unserialize(BufferUtils.fromHex(e))}static async fromEncrypted(e,t){if(1!==e.readUint8())throw new Error("Unsupported type");const s=e.readUint8();if(s>32)throw new Error("Rounds out-of-bounds");const r=Math.pow(2,s),i=PrivateKey.unserialize(e),n=e.read(KeyPair.EXPORT_SALT_LENGTH),o=e.read(KeyPair.EXPORT_CHECKSUM_LENGTH),a=new PrivateKey(await KeyPair._otpKdf(i.serialize(),t,n,r)),c=KeyPair.fromPrivateKey(a),h=c.publicKey.hash();if(!BufferUtils.equals(h.subarray(0,4),o))throw new Error("Invalid key");return c}static unserialize(e){const t=PrivateKey.unserialize(e),s=PublicKey.unserialize(e);let r=!1,i=null;if(e.readPos<e.byteLength){if(1===e.readUint8()){r=!0;i=e.read(32)}}return new KeyPair(Crypto.keyPairFromKeys(t._obj,s._obj),r,i)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._privateKey.serialize(e);this.publicKey.serialize(e);if(this._locked){e.writeUint8(1);e.write(this._lockSalt)}else e.writeUint8(0);return e}get privateKey(){if(this.isLocked)throw new Error("Wallet is locked");return this._privateKey}get _privateKey(){return this._unlockedPrivateKey||this._internalPrivateKey}get publicKey(){return this._publicKey||(this._publicKey=new PublicKey(Crypto.keyPairPublic(this._obj)))}get serializedSize(){return this._privateKey.serializedSize+this.publicKey.serializedSize+(this._locked?this._lockSalt.byteLength+1:1)}async exportEncrypted(e,t){const s=this._locked;if(this._locked)try{await this.unlock(t||e)}catch(n){throw new Error("KeyPair is locked and lock key mismatches")}const r=new Uint8Array(KeyPair.EXPORT_SALT_LENGTH);Crypto.lib.getRandomValues(r);const i=new SerialBuffer(this.encryptedSize);i.writeUint8(1);i.writeUint8(Math.log2(KeyPair.EXPORT_KDF_ROUNDS));i.write(await KeyPair._otpKdf(this.privateKey.serialize(),e,r,KeyPair.EXPORT_KDF_ROUNDS));i.write(r);i.write(this.publicKey.hash().subarray(0,KeyPair.EXPORT_CHECKSUM_LENGTH));s&&this.relock();return i}get encryptedSize(){return 2+this.privateKey.serializedSize+KeyPair.EXPORT_SALT_LENGTH+KeyPair.EXPORT_CHECKSUM_LENGTH}async lock(e,t){if(this._locked)throw new Error("KeyPair already locked");t&&(this._lockSalt=t);if(!this._lockSalt||0===this._lockSalt.length){this._lockSalt=new Uint8Array(32);Crypto.lib.getRandomValues(this._lockSalt)}this._internalPrivateKey.overwrite(await this._otpPrivateKey(e));this._clearUnlockedPrivateKey();this._locked=!0;this._lockedInternally=!0}async unlock(e){if(!this._locked)throw new Error("KeyPair not locked");const t=await this._otpPrivateKey(e);if(!PublicKey.derive(t).equals(this.publicKey))throw new Error("Invalid key");this._unlockedPrivateKey=t;this._locked=!1}relock(){if(this._locked)throw new Error("KeyPair already locked");if(!this._lockedInternally)throw new Error("KeyPair was never locked");this._clearUnlockedPrivateKey();this._locked=!0}_clearUnlockedPrivateKey(){if(this._lockedInternally&&!this._locked){this._unlockedPrivateKey.overwrite(PrivateKey.unserialize(new SerialBuffer(this._unlockedPrivateKey.serializedSize)));this._unlockedPrivateKey=null}}async _otpPrivateKey(e){return new PrivateKey(await KeyPair._otpKdf(this._privateKey.serialize(),e,this._lockSalt,KeyPair.LOCK_KDF_ROUNDS))}static async _otpKdf(e,t,s,r){return BufferUtils.xor(e,await Crypto.kdf(t,s,r))}get isLocked(){return this._locked}equals(e){return e instanceof KeyPair&&super.equals(e)}}KeyPair.LOCK_KDF_ROUNDS=256;KeyPair.EXPORT_KDF_ROUNDS=256;KeyPair.EXPORT_CHECKSUM_LENGTH=4;KeyPair.EXPORT_SALT_LENGTH=16;Class.register(KeyPair);class RandomSecret extends Primitive{constructor(e){super(e,Crypto.randomSecretType,Crypto.randomSecretSize)}static unserialize(e){return new RandomSecret(Crypto.randomSecretUnserialize(e.read(Crypto.randomSecretSize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.randomSecretSerialize(this._obj));return e}get serializedSize(){return Crypto.randomSecretSize}equals(e){return e instanceof RandomSecret&&super.equals(e)}}Class.register(RandomSecret);class Commitment extends Primitive{static copy(e){return e?new Commitment(new Uint8Array(e._obj)):e}static sum(e){return new Commitment(Crypto.aggregateCommitments(e.map(e=>e._obj)))}constructor(e){super(e,Crypto.commitmentType,Crypto.commitmentSize)}static unserialize(e){return new Commitment(Crypto.commitmentUnserialize(e.read(Crypto.commitmentSize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.commitmentSerialize(this._obj));return e}get serializedSize(){return Crypto.commitmentSize}equals(e){return e instanceof Commitment&&super.equals(e)}}Class.register(Commitment);class CommitmentPair extends Primitive{constructor(e){super(e,Crypto.commitmentPairType)}static generate(){return new CommitmentPair(Crypto.commitmentPairGenerate())}static unserialize(e){const t=RandomSecret.unserialize(e),s=Commitment.unserialize(e);return new CommitmentPair(Crypto.commitmentPairFromValues(t._obj,s._obj))}static fromHex(e){return this.unserialize(BufferUtils.fromHex(e))}serialize(e){e=e||new SerialBuffer(this.serializedSize);this.secret.serialize(e);this.commitment.serialize(e);return e}get secret(){return this._secret||(this._secret=new RandomSecret(Crypto.commitmentPairRandomSecret(this._obj)))}get commitment(){return this._commitment||(this._commitment=new Commitment(Crypto.commitmentPairCommitment(this._obj)))}get serializedSize(){return this.secret.serializedSize+this.commitment.serializedSize}equals(e){return e instanceof CommitmentPair&&super.equals(e)}}CommitmentPair.SERIALIZED_SIZE=Crypto.randomSecretSize+Crypto.commitmentSize;Class.register(CommitmentPair);class Signature extends Primitive{static copy(e){if(!e)return e;const t=new Uint8Array(e._obj);return new Signature(t)}constructor(e){super(e,Crypto.signatureType,Crypto.signatureSize)}static create(e,t,s){return new Signature(Crypto.signatureCreate(e._obj,t._obj,s))}static fromPartialSignatures(e,t){return new Signature(Crypto.combinePartialSignatures(e._obj,t.map(e=>e._obj)))}static unserialize(e){return new Signature(Crypto.signatureUnserialize(e.read(Crypto.signatureSize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.signatureSerialize(this._obj));return e}get serializedSize(){return Crypto.signatureSize}verify(e,t){return Crypto.signatureVerify(e._obj,t,this._obj)}equals(e){return e instanceof Signature&&super.equals(e)}}Class.register(Signature);class PartialSignature extends Primitive{constructor(e){super(e,Crypto.partialSignatureType,Crypto.partialSignatureSize)}static create(e,t,s,r,i,n){return new PartialSignature(Crypto.delinearizedPartialSignatureCreate(e._obj,t._obj,s.map(e=>e._obj),r._obj,i._obj,n))}static unserialize(e){return new PartialSignature(Crypto.partialSignatureUnserialize(e.read(Crypto.signatureSize)))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(Crypto.partialSignatureSerialize(this._obj));return e}get serializedSize(){return Crypto.partialSignatureSize}equals(e){return e instanceof PartialSignature&&super.equals(e)}}Class.register(PartialSignature);class Address extends Primitive{static copy(e){if(!e)return e;const t=new Uint8Array(e._obj);return new Address(t)}static fromHash(e){return new Address(e.subarray(0,Address.SERIALIZED_SIZE))}constructor(e){super(e,Uint8Array,Address.SERIALIZED_SIZE)}static unserialize(e){return new Address(e.read(Address.SERIALIZED_SIZE))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(this._obj);return e}subarray(e,t){return this._obj.subarray(e,t)}get serializedSize(){return Address.SERIALIZED_SIZE}equals(e){return e instanceof Address&&super.equals(e)}static fromString(e){try{return Address.fromUserFriendlyAddress(e)}catch(t){}try{return Address.fromHex(e)}catch(t){}try{return Address.fromBase64(e)}catch(t){}throw new Error("Invalid address format")}static fromBase64(e){return new Address(BufferUtils.fromBase64(e))}static fromHex(e){return new Address(BufferUtils.fromHex(e))}static fromUserFriendlyAddress(e){if((e=e.replace(/ /g,"")).substr(0,2).toUpperCase()!==Address.CCODE)throw new Error("Invalid Address: Wrong country code");if(36!==e.length)throw new Error("Invalid Address: Should be 36 chars (ignoring spaces)");if(1!==Address._ibanCheck(e.substr(4)+e.substr(0,4)))throw new Error("Invalid Address: Checksum invalid");return new Address(BufferUtils.fromBase32(e.substr(4)))}static _ibanCheck(e){const t=e.split("").map(e=>{const t=e.toUpperCase().charCodeAt(0);return t>=48&&t<=57?e:(t-55).toString()}).join("");let s="";for(let r=0;r<Math.ceil(t.length/6);r++)s=(parseInt(s+t.substr(6*r,6))%97).toString();return parseInt(s)}toUserFriendlyAddress(e=!0){const t=BufferUtils.toBase32(this.serialize()),s=("00"+(98-Address._ibanCheck(t+Address.CCODE+"00"))).slice(-2);let r=Address.CCODE+s+t;e&&(r=r.replace(/.{4}/g,"$& ").trim());return r}}Address.CCODE="NQ";Address.SERIALIZED_SIZE=20;Address.HEX_SIZE=40;Address.NULL=new Address(new Uint8Array(Address.SERIALIZED_SIZE));Address.CONTRACT_CREATION=new Address(new Uint8Array(Address.SERIALIZED_SIZE));Class.register(Address);class Account{constructor(e,t){if(!NumberUtils.isUint8(e))throw new Error("Malformed type");if(!NumberUtils.isUint64(t))throw new Error("Malformed balance");this._type=e;this._balance=t}static unserialize(e){const t=e.readUint8();e.readPos--;if(!Account.TYPE_MAP.has(t))throw new Error("Unknown account type");return Account.TYPE_MAP.get(t).unserialize(e)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._type);e.writeUint64(this._balance);return e}get serializedSize(){return 9}equals(e){return BufferUtils.equals(this.serialize(),e.serialize())}toString(){return`Account{type=${this._type}, balance=${this._balance.toString()}`}get balance(){return this._balance}get type(){return this._type}withBalance(e){throw new Error("Not yet implemented.")}withOutgoingTransaction(e,t,s,r=!1){if(r){if(t<e.validityStartHeight||t>=e.validityStartHeight+Policy.TRANSACTION_VALIDITY_WINDOW)throw new Error("Validity Error!");return this.withBalance(this._balance+e.value+e.fee)}{const r=this._balance-e.value-e.fee;if(r<0)throw new Error("Balance Error!");if(t<e.validityStartHeight||t>=e.validityStartHeight+Policy.TRANSACTION_VALIDITY_WINDOW)throw new Error("Validity Error!");if(s.containsTransaction(e))throw new Error("Double Transaction Error!");return this.withBalance(r)}}withIncomingTransaction(e,t,s=!1){if(s){const t=this._balance-e.value;if(t<0)throw new Error("Balance Error!");return this.withBalance(t)}return this.withBalance(this._balance+e.value)}withContractCommand(e,t,s=!1){throw new Error("Not yet implemented")}isInitial(){return this===Account.INITIAL}isToBePruned(){return 0===this._balance&&!this.isInitial()}}Account.Type={BASIC:0,VESTING:1,HTLC:2};Account.TYPE_MAP=new Map;Class.register(Account);class PrunedAccount{constructor(e,t){if(!(e instanceof Address))throw new Error("Malformed address");this._address=e;this._account=t}static unserialize(e){return new PrunedAccount(Address.unserialize(e),Account.unserialize(e))}compare(e){return this._address.compare(e._address)}get address(){return this._address}get account(){return this._account}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._address.serialize(e);this._account.serialize(e);return this}get serializedSize(){return this._address.serializedSize+this._account.serializedSize}}Class.register(PrunedAccount);class BasicAccount extends Account{static copy(e){return e?new BasicAccount(e._balance):e}constructor(e=0){super(Account.Type.BASIC,e)}static unserialize(e){if(e.readUint8()!==Account.Type.BASIC)throw new Error("Invalid account type");const t=e.readUint64();return new BasicAccount(t)}equals(e){return e instanceof BasicAccount&&this._type===e._type&&this._balance===e._balance}toString(){return`BasicAccount{balance=${this._balance}}`}static verifyOutgoingTransaction(e){return SignatureProof.verifyTransaction(e)}static verifyIncomingTransaction(e){return!(e.data.byteLength>64)}withBalance(e){return new BasicAccount(e)}withIncomingTransaction(e,t,s=!1){if(!s){if(e.hasFlag(Transaction.Flag.CONTRACT_CREATION)!==(e.recipientType!==this._type))throw new Error("Data Error!")}return super.withIncomingTransaction(e,t,s)}withContractCommand(e,t,s=!1){return!s&&e.recipientType!==this._type&&e.hasFlag(Transaction.Flag.CONTRACT_CREATION)?Account.TYPE_MAP.get(e.recipientType).create(this._balance,t,e):this}isInitial(){return 0===this._balance}}Account.INITIAL=new BasicAccount(0);Account.TYPE_MAP.set(Account.Type.BASIC,BasicAccount);Class.register(BasicAccount);class Contract extends Account{constructor(e,t){super(e,t)}static verifyIncomingTransaction(e){return!!e.recipient.equals(e.getContractCreationAddress())}withIncomingTransaction(e,t,s=!1){if(!s&&e.hasFlag(Transaction.Flag.CONTRACT_CREATION))throw new Error("Data error");return super.withIncomingTransaction(e,t,s)}withContractCommand(e,t,s=!1){return s&&e.hasFlag(Transaction.Flag.CONTRACT_CREATION)?new BasicAccount(this.balance):this}}Class.register(Contract);class HashedTimeLockedContract extends Contract{constructor(e=0,t=Address.NULL,s=Address.NULL,r=Hash.NULL,i=1,n=0,o=e){super(Account.Type.HTLC,e);if(!(t instanceof Address))throw new Error("Malformed address");if(!(s instanceof Address))throw new Error("Malformed address");if(!(r instanceof Hash))throw new Error("Malformed address");if(!NumberUtils.isUint8(i)||0===i)throw new Error("Malformed hashCount");if(!NumberUtils.isUint32(n))throw new Error("Malformed timeout");if(!NumberUtils.isUint64(o))throw new Error("Malformed totalAmount");this._sender=t;this._recipient=s;this._hashRoot=r;this._hashCount=i;this._timeout=n;this._totalAmount=o}static create(e,t,s){const r=new SerialBuffer(s.data),i=Address.unserialize(r),n=Address.unserialize(r),o=r.readUint8(),a=Hash.unserialize(r,o),c=r.readUint8(),h=r.readUint32();return new HashedTimeLockedContract(e,i,n,a,c,h)}static unserialize(e){if(e.readUint8()!==Account.Type.HTLC)throw new Error("Invalid account type");const t=e.readUint64(),s=Address.unserialize(e),r=Address.unserialize(e),i=e.readUint8(),n=Hash.unserialize(e,i),o=e.readUint8(),a=e.readUint32(),c=e.readUint64();return new HashedTimeLockedContract(t,s,r,n,o,a,c)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._sender.serialize(e);this._recipient.serialize(e);e.writeUint8(this._hashRoot.algorithm);this._hashRoot.serialize(e);e.writeUint8(this._hashCount);e.writeUint32(this._timeout);e.writeUint64(this._totalAmount);return e}get serializedSize(){return super.serializedSize+this._sender.serializedSize+this._recipient.serializedSize+1+this._hashRoot.serializedSize+1+4+8}get sender(){return this._sender}get recipient(){return this._recipient}get hashRoot(){return this._hashRoot}get hashCount(){return this._hashCount}get timeout(){return this._timeout}get totalAmount(){return this._totalAmount}toString(){return`HashedTimeLockedContract{balance=${this._balance}, sender=${this._sender.toUserFriendlyAddress(!1)}, recipient=${this._sender.toUserFriendlyAddress(!1)}, amount=${this._totalAmount}/${this._hashCount}, timeout=${this._timeout}}`}equals(e){return e instanceof HashedTimeLockedContract&&this._type===e._type&&this._balance===e._balance&&this._sender.equals(e._sender)&&this._recipient.equals(e._recipient)&&this._hashRoot.equals(e._hashRoot)&&this._hashCount===e._hashCount&&this._timeout===e._timeout&&this._totalAmount===e._totalAmount}static verifyOutgoingTransaction(e){try{const s=new SerialBuffer(e.proof);switch(s.readUint8()){case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER:{const t=s.readUint8(),r=s.readUint8(),i=Hash.unserialize(s,t);let n=Hash.unserialize(s,t);for(let e=0;e<r;++e)n=Hash.compute(n.array,t);if(!i.equals(n))return!1;if(!SignatureProof.unserialize(s).verify(null,e.serializeContent()))return!1;break}case HashedTimeLockedContract.ProofType.EARLY_RESOLVE:if(!SignatureProof.unserialize(s).verify(null,e.serializeContent()))return!1;if(!SignatureProof.unserialize(s).verify(null,e.serializeContent()))return!1;break;case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:if(!SignatureProof.unserialize(s).verify(null,e.serializeContent()))return!1;break;default:return!1}return s.readPos===s.byteLength}catch(t){return!1}}static verifyIncomingTransaction(e){try{const s=new SerialBuffer(e.data);Address.unserialize(s);Address.unserialize(s);const r=s.readUint8();Hash.unserialize(s,r);s.readUint8();s.readUint32();return r!==Hash.Algorithm.ARGON2D&&(s.readPos===s.byteLength&&Contract.verifyIncomingTransaction(e))}catch(t){return!1}}withBalance(e){return new HashedTimeLockedContract(e,this._sender,this._recipient,this._hashRoot,this._hashCount,this._timeout,this._totalAmount)}withOutgoingTransaction(e,t,s,r=!1){const i=new SerialBuffer(e.proof);let n=0;switch(i.readUint8()){case HashedTimeLockedContract.ProofType.REGULAR_TRANSFER:{if(this._timeout<t)throw new Error("Proof Error!");const e=i.readUint8(),s=i.readUint8();if(!Hash.unserialize(i,e).equals(this._hashRoot))throw new Error("Proof Error!");Hash.unserialize(i,e);if(!SignatureProof.unserialize(i).isSignedBy(this._recipient))throw new Error("Proof Error!");n=Math.max(0,Math.floor((1-s/this._hashCount)*this._totalAmount));break}case HashedTimeLockedContract.ProofType.EARLY_RESOLVE:if(!SignatureProof.unserialize(i).isSignedBy(this._recipient))throw new Error("Proof Error!");if(!SignatureProof.unserialize(i).isSignedBy(this._sender))throw new Error("Proof Error!");break;case HashedTimeLockedContract.ProofType.TIMEOUT_RESOLVE:if(this._timeout>=t)throw new Error("Proof Error!");if(!SignatureProof.unserialize(i).isSignedBy(this._sender))throw new Error("Proof Error!");break;default:throw new Error("Proof Error!")}if(!r){if(this._balance-e.value-e.fee<n)throw new Error("Balance Error!")}return super.withOutgoingTransaction(e,t,s,r)}withIncomingTransaction(e,t,s=!1){throw new Error("Illegal incoming transaction")}}HashedTimeLockedContract.ProofType={REGULAR_TRANSFER:1,EARLY_RESOLVE:2,TIMEOUT_RESOLVE:3};Account.TYPE_MAP.set(Account.Type.HTLC,HashedTimeLockedContract);Class.register(HashedTimeLockedContract);class VestingContract extends Contract{constructor(e=0,t=Address.NULL,s=0,r=0,i=e,n=e){super(Account.Type.VESTING,e);if(!(t instanceof Address))throw new Error("Malformed address");if(!NumberUtils.isUint32(s))throw new Error("Malformed vestingStart");if(!NumberUtils.isUint32(r))throw new Error("Malformed vestingStepBlocks");if(!NumberUtils.isUint64(i))throw new Error("Malformed vestingStepAmount");if(!NumberUtils.isUint64(n))throw new Error("Malformed lowerCap");this._owner=t;this._vestingStart=s;this._vestingStepBlocks=r;this._vestingStepAmount=i;this._vestingTotalAmount=n}static create(e,t,s){let r,i,n,o;const a=new SerialBuffer(s.data),c=Address.unserialize(a);o=s.value;switch(s.data.length){case Address.SERIALIZED_SIZE+4:r=0;i=a.readUint32();n=o;break;case Address.SERIALIZED_SIZE+16:r=a.readUint32();i=a.readUint32();n=a.readUint64();break;case Address.SERIALIZED_SIZE+24:r=a.readUint32();i=a.readUint32();n=a.readUint64();o=a.readUint64();break;default:throw new Error("Invalid transaction data")}return new VestingContract(e,c,r,i,n,o)}static unserialize(e){if(e.readUint8()!==Account.Type.VESTING)throw new Error("Invalid account type");const t=e.readUint64(),s=Address.unserialize(e),r=e.readUint32(),i=e.readUint32(),n=e.readUint64(),o=e.readUint64();return new VestingContract(t,s,r,i,n,o)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._owner.serialize(e);e.writeUint32(this._vestingStart);e.writeUint32(this._vestingStepBlocks);e.writeUint64(this._vestingStepAmount);e.writeUint64(this._vestingTotalAmount);return e}get serializedSize(){return super.serializedSize+this._owner.serializedSize+4+4+8+8}get owner(){return this._owner}get vestingStart(){return this._vestingStart}get vestingStepBlocks(){return this._vestingStepBlocks}get vestingStepAmount(){return this._vestingStepAmount}get vestingTotalAmount(){return this._vestingTotalAmount}toString(){return`VestingAccount{balance=${this._balance}, owner=${this._owner.toUserFriendlyAddress()}`}equals(e){return e instanceof VestingContract&&this._type===e._type&&this._balance===e._balance&&this._owner.equals(e._owner)&&this._vestingStart===e._vestingStart&&this._vestingStepBlocks===e._vestingStepBlocks&&this._vestingStepAmount===e._vestingStepAmount&&this._vestingTotalAmount===e._vestingTotalAmount}static verifyOutgoingTransaction(e){const t=new SerialBuffer(e.proof);return!!SignatureProof.unserialize(t).verify(null,e.serializeContent())&&t.readPos===t.byteLength}static verifyIncomingTransaction(e){switch(e.data.length){case Address.SERIALIZED_SIZE+4:case Address.SERIALIZED_SIZE+16:case Address.SERIALIZED_SIZE+24:return Contract.verifyIncomingTransaction(e);default:return!1}}withBalance(e){return new VestingContract(e,this._owner,this._vestingStart,this._vestingStepBlocks,this._vestingStepAmount,this._vestingTotalAmount)}withOutgoingTransaction(e,t,s,r=!1){if(!r){const s=this.getMinCap(t);if(this._balance-e.value-e.fee<s)throw new Error("Balance Error!");const r=new SerialBuffer(e.proof);if(!SignatureProof.unserialize(r).isSignedBy(this._owner))throw new Error("Proof Error!")}return super.withOutgoingTransaction(e,t,s,r)}withIncomingTransaction(e,t,s=!1){throw new Error("Illegal incoming transaction")}getMinCap(e){return this._vestingStepBlocks&&this._vestingStepAmount>0?Math.max(0,this._vestingTotalAmount-Math.floor((e-this._vestingStart)/this._vestingStepBlocks)*this._vestingStepAmount):0}}Account.TYPE_MAP.set(Account.Type.VESTING,VestingContract);Class.register(VestingContract);class AccountsTreeNode{static terminalNode(e,t){return new AccountsTreeNode(AccountsTreeNode.TERMINAL,e,t)}static branchNode(e,t=[],s=[]){if(t.length!==s.length)throw new Error("Invalid list of children for branch node");return new AccountsTreeNode(AccountsTreeNode.BRANCH,e,t,s)}static copy(e){return e?AccountsTreeNode.unserialize(new SerialBuffer(e)):e}constructor(e,t="",s,r=[]){this._type=e;this._prefix=t;if(this.isBranch()){this._childrenSuffixes=s;this._childrenHashes=r}else{if(!this.isTerminal())throw`Invalid AccountsTreeNode type: ${e}`;this._account=s}}static isTerminalType(e){return e===AccountsTreeNode.TERMINAL}static isBranchType(e){return e===AccountsTreeNode.BRANCH}static unserialize(e){const t=e.readUint8(),s=e.readVarLengthString();if(AccountsTreeNode.isTerminalType(t)){const t=Account.unserialize(e);return AccountsTreeNode.terminalNode(s,t)}if(AccountsTreeNode.isBranchType(t)){const t=[],r=[],i=e.readUint8();for(let s=0;s<i;++s){const s=e.readVarLengthString(),i=Hash.unserialize(e),n=parseInt(s[0],16);t[n]=s;r[n]=i}return AccountsTreeNode.branchNode(s,t,r)}throw`Invalid AccountsTreeNode type: ${t}`}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._type);e.writeVarLengthString(this._prefix);if(this.isTerminal())this._account.serialize(e);else{const t=this._childrenSuffixes.reduce((e,t)=>e+!!t,0);e.writeUint8(t);for(let s=0;s<this._childrenSuffixes.length;++s)if(this._childrenHashes[s]){e.writeVarLengthString(this._childrenSuffixes[s]);this._childrenHashes[s].serialize(e)}}return e}get serializedSize(){let e;if(this.isTerminal())e=this._account.serializedSize;else{e=1+this._childrenHashes.reduce((e,t,s)=>e+(t?t.serializedSize+SerialBuffer.varLengthStringSize(this._childrenSuffixes[s]):0),0)}return 1+SerialBuffer.varLengthStringSize(this._prefix)+e}stripDown(){return this.serialize()}getChildHash(e){return this._childrenHashes&&this._childrenHashes[this._getChildIndex(e)]}getChild(e){const t=this._childrenSuffixes&&this._childrenSuffixes[this._getChildIndex(e)];return t?this.prefix+t:t}withChild(e,t){const s=this._childrenSuffixes.slice()||[],r=this._childrenHashes.slice()||[];s[this._getChildIndex(e)]=e.substr(this.prefix.length);r[this._getChildIndex(e)]=t;return AccountsTreeNode.branchNode(this._prefix,s,r)}withoutChild(e){const t=this._childrenSuffixes.slice()||[],s=this._childrenHashes.slice()||[];delete t[this._getChildIndex(e)];delete s[this._getChildIndex(e)];return AccountsTreeNode.branchNode(this._prefix,t,s)}hasChildren(){return this._childrenSuffixes&&this._childrenSuffixes.some(e=>!!e)}hasSingleChild(){return this._childrenSuffixes&&1===this._childrenSuffixes.reduce((e,t)=>e+!!t,0)}getFirstChild(){if(!this._childrenSuffixes)return undefined;const e=this._childrenSuffixes.find(e=>!!e);return e?this.prefix+e:undefined}getLastChild(){if(!this._childrenSuffixes)return undefined;for(let e=this._childrenSuffixes.length-1;e>=0;--e)if(this._childrenSuffixes[e])return this.prefix+this._childrenSuffixes[e];return undefined}getChildren(){return this._childrenSuffixes?this._childrenSuffixes.filter(e=>!!e).map(e=>this.prefix+e):undefined}get account(){return this._account}get prefix(){return this._prefix}set prefix(e){this._prefix=e;this._hash=undefined}withAccount(e){return AccountsTreeNode.terminalNode(this._prefix,e)}hash(){this._hash||(this._hash=Hash.light(this.serialize()));return this._hash}isChildOf(e){return e.getChildren()&&e.getChildren().includes(this._prefix)}isTerminal(){return AccountsTreeNode.isTerminalType(this._type)}isBranch(){return AccountsTreeNode.isBranchType(this._type)}_getChildIndex(e){Assert.that(e.substr(0,this.prefix.length)===this.prefix,`Prefix ${e} is not a child of the current node ${this.prefix}`);return parseInt(e[this.prefix.length],16)}equals(e){if(!(e instanceof AccountsTreeNode))return!1;if(!Object.is(this.prefix,e.prefix))return!1;if(this.isTerminal())return e.isTerminal()&&e._account.equals(this._account);if(!e.isBranch())return!1;if(this._childrenSuffixes.length!==e._childrenSuffixes.length)return!1;if(e._childrenSuffixes.length!==e._childrenHashes.length)return!1;for(let t=0;t<this._childrenSuffixes.length;++t){const s=this._childrenHashes[t],r=e._childrenHashes[t];if(s){if(!r||!s.equals(r))return!1}else if(r)return!1;if(this._childrenSuffixes[t]!==e._childrenSuffixes[t])return!1}return!0}}AccountsTreeNode.BRANCH=0;AccountsTreeNode.TERMINAL=255;Class.register(AccountsTreeNode);class AccountsTreeStore{static initPersistent(e){e.createObjectStore("Accounts",new AccountsTreeStoreCodec)}static getPersistent(e){return new AccountsTreeStore(e.getObjectStore("Accounts"))}static createVolatile(){const e=JDB.JungleDB.createVolatileObjectStore();return new AccountsTreeStore(e)}constructor(e){this._store=e}get(e){return this._store.get(e)}async put(e){const t=e.prefix;await this._store.put(t,e);return t}async remove(e){const t=e.prefix;await this._store.remove(t);return t}getRootNode(){return this.get("")}async getTerminalNodes(e,t){const s=[];await this._store.keyStream(e=>{if(e.length===Address.HEX_SIZE){s.push(e);if(s.length===t)return!1}return!0},!0,JDB.KeyRange.lowerBound(e,!0));const r=[];for(const i of s)r.push(this._store.get(i));return Promise.all(r)}snapshot(e){const t=this._store.snapshot();e&&t.inherit(e._store);return new AccountsTreeStore(t)}transaction(e=!0){const t=this._store.transaction(e);return new AccountsTreeStore(t)}synchronousTransaction(e=!0){const t=this._store.synchronousTransaction(e);return new SynchronousAccountsTreeStore(t)}truncate(){return this._store.truncate()}commit(){return this._store.commit()}abort(){return this._store.abort()}get tx(){return this._store instanceof JDB.Transaction?this._store:undefined}}Class.register(AccountsTreeStore);class AccountsTreeStoreCodec{encode(e){return e.stripDown()}decode(e,t){return AccountsTreeNode.copy(e)}get valueEncoding(){return JDB.JungleDB.JSON_ENCODING}}class SynchronousAccountsTreeStore extends AccountsTreeStore{constructor(e){super(e);this._syncStore=e}async preload(e){await this._syncStore.preload(e)}getSync(e,t=!0){return this._syncStore.getSync(e,t)}putSync(e){const t=e.prefix;this._syncStore.putSync(t,e);return t}removeSync(e){const t=e.prefix;this._syncStore.removeSync(t);return t}getRootNodeSync(){return this.getSync("")}}Class.register(SynchronousAccountsTreeStore);class AccountsProof{constructor(e){if(!e||!Array.isArray(e)||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof AccountsTreeNode)))throw"Malformed nodes";this._nodes=e;this._index=null}static unserialize(e){const t=e.readUint16(),s=[];for(let r=0;r<t;r++)s.push(AccountsTreeNode.unserialize(e));return new AccountsProof(s)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._nodes.length);for(const t of this._nodes)t.serialize(e);return e}get serializedSize(){let e=2;for(const t of this._nodes)e+=t.serializedSize;return e}verify(){const e=[];this._index=new HashMap;for(const t of this._nodes){if(t.isBranch()){let s;for(;s=e.pop();){if(!s.isChildOf(t)){e.push(s);break}{const e=s.hash();if(!t.getChildHash(s.prefix).equals(e)||t.getChild(s.prefix)!==s.prefix)return!1;this._index.put(e,s)}}}e.push(t)}return 1===e.length&&""===e[0].prefix&&e[0].isBranch()}getAccount(e){Assert.that(!!this._index,"AccountsProof must be verified before retrieving accounts. Call verify() first.");const t=this._nodes[this._nodes.length-1],s=e.toHex();return this._getAccount(t,s)}_getAccount(e,t){const s=StringUtils.commonPrefix(e.prefix,t);if(s.length!==e.prefix.length)return null;if(s===t)return e.account;const r=e.getChildHash(t);if(r){const e=this._index.get(r);if(!e)throw new Error("Requested address not part of AccountsProof");return this._getAccount(e,t)}return null}toString(){return`AccountsProof{length=${this.length}}`}root(){return this._nodes[this._nodes.length-1].hash()}get length(){return this._nodes.length}get nodes(){return this._nodes}}Class.register(AccountsProof);class AccountsTreeChunk{constructor(e,t){if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof AccountsTreeNode&&e.isTerminal())))throw"Malformed nodes";this._nodes=e;this._proof=t}static unserialize(e){const t=e.readUint16(),s=[];for(let i=0;i<t;i++)s.push(AccountsTreeNode.unserialize(e));const r=AccountsProof.unserialize(e);return new AccountsTreeChunk(s,r)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._nodes.length);for(const t of this._nodes)t.serialize(e);this._proof.serialize(e);return e}get serializedSize(){let e=2;for(const t of this._nodes)e+=t.serializedSize;return e+=this._proof.serializedSize}verify(){if(!this._proof.verify())return!1;let e=null;for(let t=0;t<=this._nodes.length;++t){const s=t<this._nodes.length?this._nodes[t]:this.tail;if(e&&e>=s.prefix)return!1;e=s.prefix}return!0}toString(){return`AccountsTreeChunk{length=${this.length}}`}root(){return this._proof.root()}get terminalNodes(){return this._nodes.concat([this.tail])}get proof(){return this._proof}get head(){return this._nodes[0]}get tail(){return this._proof.nodes[0]}get length(){return this._nodes.length+1}}AccountsTreeChunk.SIZE_MAX=1e3;AccountsTreeChunk.EMPTY=new AccountsTreeChunk([],new AccountsProof([]));Class.register(AccountsTreeChunk);class AccountsTree extends Observable{static async getPersistent(e){const t=AccountsTreeStore.getPersistent(e);return new AccountsTree(t)._init()}static async createVolatile(){const e=AccountsTreeStore.createVolatile();return new AccountsTree(e)._init()}constructor(e){super();this._store=e;this._synchronizer=new Synchronizer}async _init(){let e=await this._store.getRootNode();if(!e){e=AccountsTreeNode.branchNode("",[],[]);await this._store.put(e)}return this}put(e,t){return this._synchronizer.push(()=>this._put(e,t))}async _put(e,t){if(t.isInitial()&&!await this.get(e))return;const s=await this._store.getRootNode();Assert.that(!!s,"Corrupted store: Failed to fetch AccountsTree root node");const r=e.toHex();await this._insert(s,r,t,[])}async _insert(e,t,s,r){const i=StringUtils.commonPrefix(e.prefix,t);if(i.length!==e.prefix.length){const n=AccountsTreeNode.terminalNode(t,s),o=n.hash();await this._store.put(n);const a=AccountsTreeNode.branchNode(i).withChild(e.prefix,e.hash()).withChild(n.prefix,o),c=a.hash();await this._store.put(a);return this._updateKeys(a.prefix,c,r)}if(i===t){if(s.isInitial()){await this._store.remove(e);return this._prune(e.prefix,r)}const t=(e=e.withAccount(s)).hash();await this._store.put(e);return this._updateKeys(e.prefix,t,r)}const n=e.getChild(t);if(n){const i=await this._store.get(n);r.push(e);return this._insert(i,t,s,r)}const o=AccountsTreeNode.terminalNode(t,s),a=o.hash();await this._store.put(o);const c=(e=e.withChild(o.prefix,a)).hash();await this._store.put(e);return this._updateKeys(e.prefix,c,r)}async _prune(e,t){let s=t.length-1;for(;s>=0;--s){let r=t[s];if((r=r.withoutChild(e)).hasSingleChild()&&""!==r.prefix){await this._store.remove(r);const e=r.getFirstChild(),i=await this._store.get(e);await this._store.put(i);const n=i.hash();return this._updateKeys(i.prefix,n,t.slice(0,s))}if(r.hasChildren()||""===r.prefix){const e=r.hash();await this._store.put(r);return this._updateKeys(r.prefix,e,t.slice(0,s))}e=r.prefix}return undefined}async _updateKeys(e,t,s){let r=s.length-1;for(;r>=0;--r){let i=s[r];i=i.withChild(e,t);await this._store.put(i);t=i.hash();e=i.prefix}return t}async get(e){const t=await this._store.get(e.toHex());return t!==undefined?t.account:null}async getAccountsProof(e){const t=await this._store.getRootNode();Assert.that(!!t,"Corrupted store: Failed to fetch AccountsTree root node");const s=[];for(const i of e)s.push(i.toHex());s.sort();const r=[];await this._getAccountsProof(t,s,r);return new AccountsProof(r)}async _getAccountsProof(e,t,s){let r=!1;for(let i=0;i<t.length;){let n=t[i];if(StringUtils.commonPrefix(e.prefix,n).length!==e.prefix.length||e.prefix===n){r=!0;i++;continue}const o=e.getChild(n);if(o){const e=await this._store.get(o),a=[n];let c=i+1;for(;c<t.length&&t[c].startsWith(e.prefix);++c)a.push(t[c]);i=c;r=await this._getAccountsProof(e,a,s)||r}else{r=!0;i++}}r&&s.push(e);return r}async getChunk(e,t){const s=await this._store.getTerminalNodes(e,t),r=s.pop();let i;i=r?await this.getAccountsProof([Address.fromHex(r.prefix)]):await this.getAccountsProof([Address.fromHex("ffffffffffffffffffffffffffffffffffffffff")]);return new AccountsTreeChunk(s,i)}transaction(e=!0){return new AccountsTree(this._store.transaction(e))._init()}synchronousTransaction(e=!0){const t=this._store.synchronousTransaction(e);return new SynchronousAccountsTree(t)._init()}async partialTree(){const e=this._store.synchronousTransaction(!1);await e.truncate();return new PartialAccountsTree(e)._init()}snapshot(e){return new AccountsTree(this._store.snapshot(e?e._store:undefined))._init()}async commit(){Assert.that(!(await this.root()).equals(new Hash(null)));return this._store.commit()}abort(){return this._store.abort()}async root(){const e=await this._store.getRootNode();return e&&e.hash()}get tx(){return this._store.tx}async isEmpty(){return!(await this._store.getRootNode()).hasChildren()}}Class.register(AccountsTree);class SynchronousAccountsTree extends AccountsTree{constructor(e){super(e);this._syncStore=e}async preloadAddresses(e){const t=await this._syncStore.getRootNode();Assert.that(!!t,"Corrupted store: Failed to fetch AccountsTree root node");const s=[];for(const r of e)s.push(r.toHex());s.sort();await this._preloadAddresses(t,s)}async _preloadAddresses(e,t){e.hasChildren()&&await this._syncStore.preload(e.getChildren());for(let s=0;s<t.length;){const r=t[s];if(StringUtils.commonPrefix(e.prefix,r).length!==e.prefix.length||e.prefix===r){s++;continue}const i=e.getChild(r);if(i){const e=this._syncStore.getSync(i),n=[r];let o=s+1;for(;o<t.length&&t[o].startsWith(e.prefix);++o)n.push(t[o]);s=o;await this._preloadAddresses(e,n)}else s++}}putSync(e,t){this.putBatch(e,t);this.finalizeBatch()}finalizeBatch(){const e=this._syncStore.getRootNodeSync();this._updateHashes(e)}putBatch(e,t){if(t.isInitial()&&!this.getSync(e,!1))return;const s=this._syncStore.getRootNodeSync();Assert.that(!!s,"Corrupted store: Failed to fetch AccountsTree root node");const r=e.toHex();this._insertBatch(s,r,t,[])}_insertBatch(e,t,s,r){const i=StringUtils.commonPrefix(e.prefix,t);if(i.length!==e.prefix.length){const n=AccountsTreeNode.terminalNode(t,s);this._syncStore.putSync(n);const o=AccountsTreeNode.branchNode(i).withChild(e.prefix,new Hash(null)).withChild(n.prefix,new Hash(null));this._syncStore.putSync(o);return this._updateKeysBatch(o.prefix,r)}if(i===t){if(s.isInitial()){this._syncStore.removeSync(e);return this._pruneBatch(e.prefix,r)}e=e.withAccount(s);this._syncStore.putSync(e);return this._updateKeysBatch(e.prefix,r)}const n=e.getChild(t);if(n){const i=this._syncStore.getSync(n);r.push(e);return this._insertBatch(i,t,s,r)}const o=AccountsTreeNode.terminalNode(t,s);this._syncStore.putSync(o);e=e.withChild(o.prefix,new Hash(null));this._syncStore.putSync(e);return this._updateKeysBatch(e.prefix,r)}_pruneBatch(e,t){let s=t.length-1;for(;s>=0;--s){let r=t[s];if((r=r.withoutChild(e)).hasSingleChild()&&""!==r.prefix){this._syncStore.removeSync(r);const e=r.getFirstChild(),i=this._syncStore.getSync(e);this._syncStore.putSync(i);return this._updateKeysBatch(i.prefix,t.slice(0,s))}if(r.hasChildren()||""===r.prefix){this._syncStore.putSync(r);return this._updateKeysBatch(r.prefix,t.slice(0,s))}e=r.prefix}return undefined}_updateKeysBatch(e,t){let s=t.length-1;for(;s>=0;--s){let r=t[s];r=r.withChild(e,new Hash(null));this._syncStore.putSync(r);e=r.prefix}}_updateHashes(e){if(e.isTerminal())return e.hash();const t=new Hash(null),s=e.getChildren().map(s=>{const r=e.getChildHash(s);if(!r.equals(t))return r;const i=this._syncStore.getSync(s);return this._updateHashes(i)});let r=e;e.getChildren().forEach((e,t)=>{r=r.withChild(e,s[t])});this._syncStore.putSync(r);return r.hash()}getSync(e,t=!0){const s=this._syncStore.getSync(e.toHex(),t);return s!==undefined?s.account:null}rootSync(){const e=this._syncStore.getRootNodeSync();return e&&e.hash()}}Class.register(SynchronousAccountsTree);class PartialAccountsTree extends SynchronousAccountsTree{constructor(e){super(e);this._complete=!1;this._lastPrefix=""}async pushChunk(e){if(!e.verify())return PartialAccountsTree.Status.ERR_INCORRECT_PROOF;const t=this.synchronousTransaction();t._putLight(e.terminalNodes);if(!t._mergeProof(e.proof,e.tail.prefix)){await t.abort();return PartialAccountsTree.Status.ERR_UNMERGEABLE}this._complete=t.complete;await t.commit();this._lastPrefix=e.tail.prefix;return this._complete?PartialAccountsTree.Status.OK_COMPLETE:PartialAccountsTree.Status.OK_UNFINISHED}_mergeProof(e,t){let s=this._store.getRootNodeSync(),r=s.getChildren(),i=!0,n=e.length-1;for(;n>0;--n){const o=e.nodes[n];if(StringUtils.commonPrefix(s.prefix,o.prefix)!==s.prefix)return!1;const a=o.getChildren();if(r.length>a.length)return!1;const c=s.getLastChild();let h=!1,l=0;for(const e of a){if(!(e<=t.substr(0,e.length)))break;{const t=r.shift();if(StringUtils.commonPrefix(c,e)===e){e!==c&&(h=!0);continue}if(t!==e)return!1;const i=s.getChildHash(t),n=o.getChildHash(t);if(!i||!n||!i.equals(n))return!1}++l}if(0!==r.length)return!1;i=i&&l===a.length-1;if(h)r=[c];else{if(s.isTerminal())return!1;r=(s=this._store.getSync(s.getLastChild())).getChildren();if(s.isTerminal())break}}if(!s.equals(e.nodes[0]))return!1;this._complete=i;return!0}_putLight(e){Assert.that(e.every(e=>e.isTerminal()),"Can only build tree from terminal nodes");let t=this._store.getRootNodeSync();Assert.that(!!t,"Corrupted store: Failed to fetch AccountsTree root node");for(const s of e){this._insertBatch(t,s.prefix,s.account,[]);t=this._store.getRootNodeSync();Assert.that(!!t,"Corrupted store: Failed to fetch AccountsTree root node")}this._updateHashes(t)}get complete(){return this._complete}get missingPrefix(){return this._lastPrefix}synchronousTransaction(e=!0){const t=new PartialAccountsTree(this._store.synchronousTransaction(e));t._complete=this._complete;t._lastPrefix=this._lastPrefix;return t}transaction(e=!0){if(!this.complete)throw new Error("Can only construct AccountsTree from complete PartialAccountsTree");return new AccountsTree(this._store.synchronousTransaction(e))}commit(){return this._store.commit()}abort(){return this._store.abort()}}PartialAccountsTree.Status={ERR_HASH_MISMATCH:-3,ERR_INCORRECT_PROOF:-2,ERR_UNMERGEABLE:-1,OK_COMPLETE:0,OK_UNFINISHED:1};Class.register(PartialAccountsTree);class Accounts extends Observable{static async getPersistent(e){const t=await AccountsTree.getPersistent(e);return new Accounts(t)}static async createVolatile(){const e=await AccountsTree.createVolatile();return new Accounts(e)}constructor(e){super();this._tree=e;this.bubble(this._tree,"*")}async initialize(e,t){Assert.that(await this._tree.isEmpty());const s=await this._tree.synchronousTransaction();try{const r=BufferUtils.fromBase64(t),n=r.readUint16();for(let e=0;e<n;e++){const e=Address.unserialize(r),t=Account.unserialize(r);s.putSync(e,t)}await this._commitBlockBody(s,e.body,e.height,new TransactionCache);s.finalizeBatch()}catch(i){await s.abort();throw i}const r=s.rootSync();if(!e.accountsHash.equals(r)){await s.abort();throw new Error("Genesis AccountsHash mismatch")}return s.commit()}getAccountsProof(e){return this._tree.getAccountsProof(e)}getAccountsTreeChunk(e){return this._tree.getChunk(e,AccountsTreeChunk.SIZE_MAX)}async commitBlock(e,t){const s=await this._tree.synchronousTransaction();await s.preloadAddresses(e.body.getAddresses());try{this._commitBlockBody(s,e.body,e.height,t)}catch(i){await s.abort();throw i}s.finalizeBatch();const r=s.rootSync();if(!e.accountsHash.equals(r)){await s.abort();throw new Error("AccountsHash mismatch")}return s.commit()}async commitBlockBody(e,t,s){const r=await this._tree.synchronousTransaction();await r.preloadAddresses(e.getAddresses());try{this._commitBlockBody(r,e,t,s)}catch(i){await r.abort();throw i}r.finalizeBatch();return r.commit()}async gatherToBePrunedAccounts(e,t,s){const r=await this._tree.synchronousTransaction(),i=[];for(const n of e)i.push(n.sender,n.recipient);await r.preloadAddresses(i);try{this._processSenderAccounts(r,e,t,s);this._processRecipientAccounts(r,e,t);this._processContracts(r,e,t);const i=[];for(const t of e){const e=this._getSync(t.sender,undefined,r);e.isToBePruned()&&i.push(new PrunedAccount(t.sender,e))}return i.sort((e,t)=>e.compare(t))}finally{await r.abort()}}async revertBlock(e,t){if(!e)throw new Error("block undefined");const s=await this._tree.root();if(!e.accountsHash.equals(s))throw new Error("AccountsHash mismatch");return this.revertBlockBody(e.body,e.height,t)}async revertBlockBody(e,t,s){const r=await this._tree.synchronousTransaction();await r.preloadAddresses(e.getAddresses());try{this._revertBlockBody(r,e,t,s)}catch(i){await r.abort();throw i}r.finalizeBatch();return r.commit()}async get(e,t,s=this._tree){const r=await s.get(e);if(!r){if("undefined"==typeof t)return Account.INITIAL;throw new Error("Account type was given but account not present")}if("undefined"!=typeof t&&r.type!==t)throw new Error("Account type does match actual account");return r}_getSync(e,t,s){const r=s.getSync(e,!1);if(!r){if("undefined"==typeof t)return Account.INITIAL;throw new Error("Account type was given but account not present")}if("undefined"!=typeof t&&r.type!==t)throw new Error("Account type does match actual account");return r}async transaction(e=!0){return new Accounts(await this._tree.transaction(e))}async snapshot(e){return new Accounts(await this._tree.snapshot(e?e._tree:undefined))}partialAccountsTree(){return this._tree.partialTree()}commit(){return this._tree.commit()}abort(){return this._tree.abort()}_processSenderAccounts(e,t,s,r,i=!1){for(const n of t){const t=this._getSync(n.sender,i?undefined:n.senderType,e);e.putBatch(n.sender,t.withOutgoingTransaction(n,s,r,i))}}_processRecipientAccounts(e,t,s,r=!1){for(const i of t){const t=this._getSync(i.recipient,undefined,e);e.putBatch(i.recipient,t.withIncomingTransaction(i,s,r))}}_processContracts(e,t,s,r=!1){r&&(t=t.slice().reverse());for(const i of t){const t=this._getSync(i.recipient,r?i.recipientType:undefined,e);e.putBatch(i.recipient,t.withContractCommand(i,s,r))}}_commitBlockBody(e,t,s,r){this._processSenderAccounts(e,t.transactions,s,r);this._processRecipientAccounts(e,t.transactions,s);this._processContracts(e,t.transactions,s);const i=t.prunedAccounts.slice();for(const n of t.transactions){const t=this._getSync(n.sender,undefined,e);if(t.isToBePruned()){const s=i.findIndex(e=>e.address.equals(n.sender));if(-1===s||!t.equals(i[s].account))throw new Error("Account was not pruned correctly");e.putBatch(n.sender,Account.INITIAL);i.splice(s,1)}}if(i.length>0)throw new Error("Account was invalidly pruned");this._rewardMiner(e,t,s,!1)}_revertBlockBody(e,t,s,r){this._rewardMiner(e,t,s,!0);for(const i of t.prunedAccounts)e.putBatch(i.address,i.account);this._processContracts(e,t.transactions,s,!0);this._processRecipientAccounts(e,t.transactions,s,!0);this._processSenderAccounts(e,t.transactions,s,r,!0)}_rewardMiner(e,t,s,r=!1){const i=t.transactions.reduce((e,t)=>e+t.fee,0),n=new ExtendedTransaction(Address.NULL,Account.Type.BASIC,t.minerAddr,Account.Type.BASIC,i+Policy.blockRewardAt(s),0,0,Transaction.Flag.NONE,new Uint8Array(0)),o=this._getSync(t.minerAddr,undefined,e);e.putBatch(t.minerAddr,o.withIncomingTransaction(n,s,r))}hash(){return this._tree.root()}get tx(){return this._tree.tx}}Class.register(Accounts);class BlockHeader{static copy(e){if(!e)return e;const t=Hash.copy(e._prevHash),s=Hash.copy(e._interlinkHash),r=Hash.copy(e._bodyHash),i=Hash.copy(e._accountsHash);return new BlockHeader(t,s,r,i,e._nBits,e._height,e._timestamp,e._nonce,e._version)}constructor(e,t,s,r,i,n,o,a,c=BlockHeader.CURRENT_VERSION){if(!NumberUtils.isUint16(c))throw"Malformed version";if(!Hash.isHash(e))throw"Malformed prevHash";if(!Hash.isHash(t))throw"Malformed interlinkHash";if(!Hash.isHash(s))throw"Malformed bodyHash";if(!Hash.isHash(r))throw"Malformed accountsHash";if(!NumberUtils.isUint32(i)||!BlockUtils.isValidCompact(i))throw"Malformed nBits";if(!NumberUtils.isUint32(n))throw"Invalid height";if(!NumberUtils.isUint32(o))throw"Malformed timestamp";if(!NumberUtils.isUint32(a))throw"Malformed nonce";this._version=c;this._prevHash=e;this._interlinkHash=t;this._bodyHash=s;this._accountsHash=r;this._nBits=i;this._height=n;this._timestamp=o;this._nonce=a}static unserialize(e){const t=e.readUint16();if(!BlockHeader.SUPPORTED_VERSIONS.includes(t))throw new Error(`Unsupported block version ${t}`);const s=Hash.unserialize(e),r=Hash.unserialize(e),i=Hash.unserialize(e),n=Hash.unserialize(e),o=e.readUint32(),a=e.readUint32(),c=e.readUint32(),h=e.readUint32();return new BlockHeader(s,r,i,n,o,a,c,h,t)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._version);this._prevHash.serialize(e);this._interlinkHash.serialize(e);this._bodyHash.serialize(e);this._accountsHash.serialize(e);e.writeUint32(this._nBits);e.writeUint32(this._height);e.writeUint32(this._timestamp);e.writeUint32(this._nonce);return e}get serializedSize(){return 2+this._prevHash.serializedSize+this._interlinkHash.serializedSize+this._bodyHash.serializedSize+this._accountsHash.serializedSize+4+4+4+4}async verifyProofOfWork(e){const t=await this.pow(e);return BlockUtils.isProofOfWork(t,this.target)}isImmediateSuccessorOf(e){if(this.height!==e.height+1)return!1;if(this.timestamp<e.timestamp)return!1;const t=e.hash();return!!this.prevHash.equals(t)}hash(e){this._hash=this._hash||Hash.light(this.serialize(e));return this._hash}async hashAsync(e){this._hash=this._hash||await Hash.lightAsync(this.serialize(e));return this._hash}async pow(e){this._pow=this._pow||await Hash.hard(this.serialize(e));return this._pow}equals(e){return e instanceof BlockHeader&&this._prevHash.equals(e.prevHash)&&this._interlinkHash.equals(e.interlinkHash)&&this._bodyHash.equals(e.bodyHash)&&this._accountsHash.equals(e.accountsHash)&&this._nBits===e.nBits&&this._height===e.height&&this._timestamp===e.timestamp&&this._nonce===e.nonce}toString(){return"BlockHeader{"+`prevHash=${this._prevHash}, `+`interlinkHash=${this._interlinkHash}, `+`bodyHash=${this._bodyHash}, `+`accountsHash=${this._accountsHash}, `+`nBits=${this._nBits.toString(16)}, `+`height=${this._height}, `+`timestamp=${this._timestamp}, `+`nonce=${this._nonce}`+"}"}get version(){return this._version}get prevHash(){return this._prevHash}get interlinkHash(){return this._interlinkHash}get bodyHash(){return this._bodyHash}get accountsHash(){return this._accountsHash}get nBits(){return this._nBits}get target(){return BlockUtils.compactToTarget(this._nBits)}get difficulty(){return BlockUtils.compactToDifficulty(this._nBits)}get height(){return this._height}get timestamp(){return this._timestamp}get nonce(){return this._nonce}set nonce(e){this._nonce=e;this._hash=null;this._pow=null}}BlockHeader.Version={V1:1};BlockHeader.CURRENT_VERSION=BlockHeader.Version.V1;BlockHeader.SUPPORTED_VERSIONS=[BlockHeader.Version.V1];BlockHeader.SERIALIZED_SIZE=146;Class.register(BlockHeader);class BlockInterlink{static copy(e){if(!e)return e;const t=e._hashes.map(e=>Hash.copy(e)),s=new Uint8Array(e._repeatBits),r=e._compressed.map(e=>Hash.copy(e));return new BlockInterlink(t,undefined,s,r)}static _compress(e,t){const s=e.length,r=Math.ceil(s/8),i=new Uint8Array(r);let n=t;const o=[];for(let a=0;a<s;a++){const t=e[a];if(t.equals(n))i[Math.floor(a/8)]|=128>>>a%8;else{o.push(t);n=t}}return{repeatBits:i,compressed:o}}constructor(e,t,s,r){if(!Array.isArray(e)||!NumberUtils.isUint8(e.length)||e.some(e=>!(e instanceof Hash)))throw new Error("Malformed hashes");if((s||r)&&(!s||!r))throw new Error("Malformed repeatBits/compressed");if(!t&&!s)throw new Error("Either prevHash or repeatBits/compressed required");s||({repeatBits:s,compressed:r}=BlockInterlink._compress(e,t));this._hashes=e;this._repeatBits=s;this._compressed=r}static unserialize(e,t){const s=e.readUint8(),r=Math.ceil(s/8),i=e.read(r);let n=t;const o=[],a=[];for(let c=0;c<s;c++){if(!(0!=(i[Math.floor(c/8)]&128>>>c%8))){n=Hash.unserialize(e);a.push(n)}o.push(n)}return new BlockInterlink(o,t,i,a)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._hashes.length);e.write(this._repeatBits);for(const t of this._compressed)t.serialize(e);return e}get serializedSize(){return 1+this._repeatBits.length+this._compressed.reduce((e,t)=>e+t.serializedSize,0)}equals(e){return e instanceof BlockInterlink&&this._hashes.length===e._hashes.length&&this._hashes.every((t,s)=>t.equals(e.hashes[s]))}hash(){this._hash||(this._hash=MerkleTree.computeRoot([this._repeatBits,Block.GENESIS.HASH,...this._compressed]));return this._hash}get hashes(){return this._hashes}get length(){return this._hashes.length}}Class.register(BlockInterlink);class BlockBody{static getMetadataSize(e){return Address.SERIALIZED_SIZE+1+e.byteLength+2}constructor(e,t,s=new Uint8Array(0),r=[]){if(!(e instanceof Address))throw"Malformed minerAddr";if(!Array.isArray(t)||t.some(e=>!(e instanceof Transaction)))throw"Malformed transactions";if(!(s instanceof Uint8Array&&NumberUtils.isUint8(s.byteLength)))throw"Malformed extraData";this._minerAddr=e;this._extraData=s;this._transactions=t;this._prunedAccounts=r;this._hash=null}static unserialize(e){const t=Address.unserialize(e),s=e.readUint8(),r=e.read(s),i=e.readUint16(),n=new Array(i);for(let c=0;c<i;c++)n[c]=Transaction.unserialize(e);const o=e.readUint16(),a=[];for(let c=0;c<o;c++)a.push(PrunedAccount.unserialize(e));return new BlockBody(t,n,r,a)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._minerAddr.serialize(e);e.writeUint8(this._extraData.byteLength);e.write(this._extraData);e.writeUint16(this._transactions.length);for(const t of this._transactions)t.serialize(e);e.writeUint16(this._prunedAccounts.length);for(const t of this._prunedAccounts)t.serialize(e);return e}get serializedSize(){let e=this._minerAddr.serializedSize+1+this._extraData.byteLength+2+2;for(const t of this._transactions)e+=t.serializedSize;return e+=this._prunedAccounts.reduce((e,t)=>e+t.serializedSize,0)}verify(){let e=null;for(const s of this._transactions){if(e&&e.compareBlockOrder(s)>=0){Log.w(BlockBody,"Invalid block - transactions not ordered.");return!1}e=s;if(!s.verify()){Log.w(BlockBody,"Invalid block - invalid transaction");return!1}}let t=null;for(const s of this._prunedAccounts){if(t&&t.compare(s)>=0){Log.w(BlockBody,"Invalid block - pruned accounts not ordered.");return!1}t=s;if(!s.account.isToBePruned()){Log.w(BlockBody,"Invalid block - invalid pruned account");return!1}}return!0}getMerkleLeafs(){return[this._minerAddr,this._extraData,...this._transactions,...this.prunedAccounts]}hash(){this._hash||(this._hash=MerkleTree.computeRoot(this.getMerkleLeafs()));return this._hash}equals(e){return e instanceof BlockBody&&this._minerAddr.equals(e.minerAddr)&&BufferUtils.equals(this._extraData,e.extraData)&&this._transactions.length===e.transactions.length&&this._transactions.every((t,s)=>t.equals(e.transactions[s]))}getAddresses(){const e=[this._minerAddr];for(const t of this._transactions)e.push(t.sender,t.recipient);return e}get extraData(){return this._extraData}get minerAddr(){return this._minerAddr}get transactions(){return this._transactions}get transactionCount(){return this._transactions.length}get prunedAccounts(){return this._prunedAccounts}}Class.register(BlockBody);class BlockUtils{static compactToTarget(e){return(16777215&e)*Math.pow(2,8*((e>>24)-3))}static targetToCompact(e){if(!Number.isFinite(e)||Number.isNaN(e))throw"Invalid Target";let t=Math.max(Math.ceil(Math.log2(e)/8),1);e/Math.pow(2,8*(t-1))>=128&&t++;return(t<<24)+(e/Math.pow(2,8*(t-3))&16777215)}static getTargetHeight(e){return Math.ceil(Math.log2(e))}static getTargetDepth(e){return BlockUtils.getTargetHeight(Policy.BLOCK_TARGET_MAX)-BlockUtils.getTargetHeight(e)}static compactToDifficulty(e){return Policy.BLOCK_TARGET_MAX/BlockUtils.compactToTarget(e)}static difficultyToCompact(e){return BlockUtils.targetToCompact(BlockUtils.difficultyToTarget(e))}static difficultyToTarget(e){return Policy.BLOCK_TARGET_MAX/e}static targetToDifficulty(e){return Policy.BLOCK_TARGET_MAX/e}static hashToTarget(e){return parseInt(e.toHex(),16)}static realDifficulty(e){return BlockUtils.targetToDifficulty(BlockUtils.hashToTarget(e))}static isProofOfWork(e,t){return parseInt(e.toHex(),16)<=t}static isValidCompact(e){return BlockUtils.isValidTarget(BlockUtils.compactToTarget(e))}static isValidTarget(e){return e>=1&&e<=Policy.BLOCK_TARGET_MAX}static getNextTarget(e,t,s){Assert.that(e.height-t.height===Policy.DIFFICULTY_BLOCK_WINDOW||e.height<=Policy.DIFFICULTY_BLOCK_WINDOW&&1===t.height,`Tail and head block must be ${Policy.DIFFICULTY_BLOCK_WINDOW} blocks apart`);let r=e.timestamp-t.timestamp;if(e.height<=Policy.DIFFICULTY_BLOCK_WINDOW){r+=(Policy.DIFFICULTY_BLOCK_WINDOW-e.height+1)*Policy.BLOCK_TIME;s+=Policy.DIFFICULTY_BLOCK_WINDOW-e.height+1}let i=r/(Policy.DIFFICULTY_BLOCK_WINDOW*Policy.BLOCK_TIME);i=Math.max(i,1/Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);i=Math.min(i,Policy.DIFFICULTY_MAX_ADJUSTMENT_FACTOR);const n=s/Policy.DIFFICULTY_BLOCK_WINDOW;let o=BlockUtils.difficultyToTarget(n)*i;o=Math.min(o,Policy.BLOCK_TARGET_MAX);o=Math.max(o,1);const a=BlockUtils.targetToCompact(o);return BlockUtils.compactToTarget(a)}}Class.register(BlockUtils);class Subscription{static fromAddresses(e){return new Subscription(Subscription.Type.ADDRESSES,e)}static fromMinFeePerByte(e){return new Subscription(Subscription.Type.MIN_FEE,e)}constructor(e,t=null){if(!NumberUtils.isUint8(e))throw new Error("Invalid type");if(e===Subscription.Type.ADDRESSES&&(!Array.isArray(t)||!NumberUtils.isUint16(t.length)||t.some(e=>!(e instanceof Address))))throw new Error("Invalid addresses");if(e===Subscription.Type.MIN_FEE&&!NumberUtils.isUint64(t))throw new Error("Invalid minFeePerByte");this._type=e;this._addresses=new HashSet;this._minFeePerByte=0;switch(e){case Subscription.Type.ADDRESSES:this._addresses.addAll(t);break;case Subscription.Type.MIN_FEE:this._minFeePerByte=t}}static unserialize(e){const t=e.readUint8();let s=null;switch(t){case Subscription.Type.ADDRESSES:{s=[];const t=e.readUint16();for(let r=0;r<t;++r)s.push(Address.unserialize(e));break}case Subscription.Type.MIN_FEE:s=e.readUint64()}return new Subscription(t,s)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._type);switch(this._type){case Subscription.Type.ADDRESSES:e.writeUint16(this._addresses.length);for(const t of this._addresses)t.serialize(e);break;case Subscription.Type.MIN_FEE:e.writeUint64(this._minFeePerByte)}return e}get serializedSize(){let e=0;switch(this._type){case Subscription.Type.ADDRESSES:e=2;for(const t of this._addresses)e+=t.serializedSize;break;case Subscription.Type.MIN_FEE:e=8}return 1+e}matchesBlock(e){switch(this._type){case Subscription.Type.NONE:return!1;case Subscription.Type.ANY:case Subscription.Type.ADDRESSES:case Subscription.Type.MIN_FEE:return!0;default:throw new Error("Unknown type")}}matchesTransaction(e){switch(this._type){case Subscription.Type.NONE:return!1;case Subscription.Type.ANY:return!0;case Subscription.Type.ADDRESSES:return this._addresses.contains(e.recipient)||this._addresses.contains(e.sender);case Subscription.Type.MIN_FEE:return e.fee/e.serializedSize>=this._minFeePerByte;default:throw new Error("Unknown type")}}toString(){return`Subscription{type=${this._type}, addresses=[${this._addresses.values()}], minFeePerByte=${this._minFeePerByte}}`}get type(){return this._type}get addresses(){return this._addresses.values()}get minFeePerByte(){return this._minFeePerByte}}Subscription.Type={NONE:0,ANY:1,ADDRESSES:2,MIN_FEE:3};Subscription.NONE=new Subscription(Subscription.Type.NONE);Subscription.BLOCKS_ONLY=new Subscription(Subscription.Type.ADDRESSES,[]);Subscription.ANY=new Subscription(Subscription.Type.ANY);Class.register(Subscription);class Transaction{constructor(e,t,s,r,i,n,o,a,c,h,l){if(!(t instanceof Address))throw new Error("Malformed sender");if(!NumberUtils.isUint8(s))throw new Error("Malformed sender type");if(!(r instanceof Address))throw new Error("Malformed recipient");if(!NumberUtils.isUint8(i))throw new Error("Malformed recipient type");if(!NumberUtils.isUint64(n)||0===n)throw new Error("Malformed value");if(!NumberUtils.isUint64(o))throw new Error("Malformed fee");if(!NumberUtils.isUint32(a))throw new Error("Malformed validityStartHeight");if(!NumberUtils.isUint8(c)&&(c&~Transaction.Flag.ALL)>0)throw new Error("Malformed flags");if(!(h instanceof Uint8Array&&NumberUtils.isUint16(h.byteLength)))throw new Error("Malformed data");if(l&&(!(l instanceof Uint8Array)||!NumberUtils.isUint16(l.byteLength)))throw new Error("Malformed proof");this._format=e;this._sender=t;this._senderType=s;this._recipient=r;this._recipientType=i;this._value=n;this._fee=o;this._validityStartHeight=a;this._flags=c;this._data=h;this._proof=l;this._recipient===Address.CONTRACT_CREATION&&(this._recipient=this.getContractCreationAddress())}static unserialize(e){const t=e.readUint8();e.readPos--;if(!Transaction.FORMAT_MAP.has(t))throw new Error("Invalid transaction type");return Transaction.FORMAT_MAP.get(t).unserialize(e)}serializeContent(e){(e=e||new SerialBuffer(this.serializedContentSize)).writeUint16(this._data.byteLength);e.write(this._data);this._sender.serialize(e);e.writeUint8(this._senderType);this._recipient.serialize(e);e.writeUint8(this._recipientType);e.writeUint64(this._value);e.writeUint64(this._fee);e.writeUint32(this._validityStartHeight);e.writeUint8(this._flags);return e}get serializedContentSize(){return 2+this._data.byteLength+this._sender.serializedSize+1+this._recipient.serializedSize+1+8+8+4+1}verify(){this._valid===undefined&&(this._valid=this._verify());return this._valid}_verify(){if(this._recipient.equals(this._sender)){Log.w(Transaction,"Sender and recipient must not match",this);return!1}if(!Account.TYPE_MAP.has(this._senderType)||!Account.TYPE_MAP.has(this._recipientType)){Log.w(Transaction,"Invalid account type",this);return!1}if(!Account.TYPE_MAP.get(this._senderType).verifyOutgoingTransaction(this)){Log.w(Transaction,"Invalid for sender",this);return!1}if(!Account.TYPE_MAP.get(this._recipientType).verifyIncomingTransaction(this)){Log.w(Transaction,"Invalid for recipient",this);return!1}return!0}get serializedSize(){throw new Error("Getter needs to be overwritten by subclasses")}serialize(e){throw new Error("Method needs to be overwritten by subclasses")}hash(){this._hash=this._hash||Hash.light(this.serializeContent());return this._hash}async hashAsync(){this._hash=this._hash||await Hash.lightAsync(this.serializeContent());return this._hash}compare(e){return this.fee/this.serializedSize>e.fee/e.serializedSize?-1:this.fee/this.serializedSize<e.fee/e.serializedSize?1:this.serializedSize>e.serializedSize?-1:this.serializedSize<e.serializedSize?1:this.fee>e.fee?-1:this.fee<e.fee?1:this.value>e.value?-1:this.value<e.value?1:this.compareBlockOrder(e)}compareBlockOrder(e){const t=this._recipient.compare(e._recipient);if(0!==t)return t;if(this._validityStartHeight<e._validityStartHeight)return-1;if(this._validityStartHeight>e._validityStartHeight)return 1;if(this._fee>e._fee)return-1;if(this._fee<e._fee)return 1;if(this._value>e._value)return-1;if(this._value<e._value)return 1;const s=this._sender.compare(e._sender);return 0!==s?s:this._recipientType<e._recipientType?-1:this._recipientType>e._recipientType?1:this._senderType<e._senderType?-1:this._senderType>e._senderType?1:this._flags<e._flags?-1:this._flags>e._flags?1:BufferUtils.compare(this._data,e._data)}equals(e){return e instanceof Transaction&&this._sender.equals(e._sender)&&this._senderType===e._senderType&&this._recipient.equals(e._recipient)&&this._recipientType===e._recipientType&&this._value===e._value&&this._fee===e._fee&&this._validityStartHeight===e._validityStartHeight&&this._flags===e._flags&&BufferUtils.equals(this._data,e._data)}toString(){return"Transaction{"+`sender=${this._sender.toBase64()}, `+`recipient=${this._recipient.toBase64()}, `+`value=${this._value}, `+`fee=${this._fee}, `+`validityStartHeight=${this._validityStartHeight}`+"}"}getContractCreationAddress(){const e=Transaction.unserialize(this.serialize());e._recipient=Address.NULL;e._hash=null;return Address.fromHash(e.hash())}get sender(){return this._sender}get senderType(){return this._senderType}get recipient(){return this._recipient}get recipientType(){return this._recipientType}get value(){return this._value}get fee(){return this._fee}get feePerByte(){return this._fee/this.serializedSize}get validityStartHeight(){return this._validityStartHeight}get flags(){return this._flags}hasFlag(e){return(this._flags&e)>0}get data(){return this._data}get proof(){return this._proof}set proof(e){this._proof=e}}Transaction.Format={BASIC:0,EXTENDED:1};Transaction.Flag={NONE:0,CONTRACT_CREATION:1,ALL:1};Transaction.FORMAT_MAP=new Map;Class.register(Transaction);class SignatureProof{static verifyTransaction(e){try{const s=new SerialBuffer(e.proof),r=SignatureProof.unserialize(s);if(s.readPos!==s.byteLength){Log.w(SignatureProof,"Invalid SignatureProof - overlong");return!1}return r.verify(e.sender,e.serializeContent())}catch(t){Log.w(SignatureProof,`Failed to verify transaction: ${t.message||t}`,t);return!1}}static singleSig(e,t){return new SignatureProof(e,new MerklePath([]),t)}static multiSig(e,t,s){const r=MerklePath.compute(t,e);return new SignatureProof(e,r,s)}constructor(e,t,s){if(!(e instanceof PublicKey))throw new Error("Malformed publickKey");if(!(t instanceof MerklePath))throw new Error("Malformed merklePath");if(s&&!(s instanceof Signature))throw new Error("Malformed signature");this._publicKey=e;this._merklePath=t;this._signature=s}static unserialize(e){const t=PublicKey.unserialize(e),s=MerklePath.unserialize(e),r=Signature.unserialize(e);return new SignatureProof(t,s,r)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._publicKey.serialize(e);this._merklePath.serialize(e);this._signature&&this._signature.serialize(e);return e}get serializedSize(){return this._publicKey.serializedSize+this._merklePath.serializedSize+(this._signature?this._signature.serializedSize:0)}equals(e){return e instanceof SignatureProof&&this._publicKey.equals(e._publicKey)&&this._merklePath.equals(e._merklePath)&&(this._signature?this._signature.equals(e._signature):this._signature===e._signature)}verify(e,t){if(null!==e&&!this.isSignedBy(e)){Log.w(SignatureProof,"Invalid SignatureProof - signer does not match sender address");return!1}if(!this._signature){Log.w(SignatureProof,"Invalid SignatureProof - signature is missing");return!1}if(!this._signature.verify(this._publicKey,t)){Log.w(SignatureProof,"Invalid SignatureProof - signature is invalid");return!1}return!0}isSignedBy(e){const t=this._merklePath.computeRoot(this._publicKey);return Address.fromHash(t).equals(e)}get publicKey(){return this._publicKey}get merklePath(){return this._merklePath}get signature(){return this._signature}set signature(e){this._signature=e}}Class.register(SignatureProof);class BasicTransaction extends Transaction{constructor(e,t,s,r,i,n){if(!(e instanceof PublicKey))throw new Error("Malformed senderPubKey");if(n!==undefined&&!(n instanceof Signature))throw new Error("Malformed signature");const o=SignatureProof.singleSig(e,n);super(Transaction.Format.BASIC,e.toAddress(),Account.Type.BASIC,t,Account.Type.BASIC,s,r,i,Transaction.Flag.NONE,new Uint8Array(0),o.serialize());this._signatureProof=o}static unserialize(e){const t=e.readUint8();Assert.that(t===Transaction.Format.BASIC);const s=PublicKey.unserialize(e),r=Address.unserialize(e),i=e.readUint64(),n=e.readUint64(),o=e.readUint32(),a=Signature.unserialize(e);return new BasicTransaction(s,r,i,n,o,a)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(Transaction.Format.BASIC);this.senderPubKey.serialize(e);this._recipient.serialize(e);e.writeUint64(this._value);e.writeUint64(this._fee);e.writeUint32(this._validityStartHeight);this.signature.serialize(e);return e}get serializedSize(){return 1+this.senderPubKey.serializedSize+this._recipient.serializedSize+8+8+4+this.signature.serializedSize}get senderPubKey(){return this._signatureProof.publicKey}get signature(){return this._signatureProof.signature}set signature(e){this._signatureProof.signature=e;this._proof=this._signatureProof.serialize()}}Transaction.FORMAT_MAP.set(Transaction.Format.BASIC,BasicTransaction);Class.register(BasicTransaction);class ExtendedTransaction extends Transaction{constructor(e,t,s,r,i,n,o,a,c,h=new Uint8Array(0)){super(Transaction.Format.EXTENDED,e,t,s,r,i,n,o,a,c,h)}static unserialize(e){const t=e.readUint8();Assert.that(t===Transaction.Format.EXTENDED);const s=e.readUint16(),r=e.read(s),i=Address.unserialize(e),n=e.readUint8(),o=Address.unserialize(e),a=e.readUint8(),c=e.readUint64(),h=e.readUint64(),l=e.readUint32(),u=e.readUint8(),d=e.readUint16(),_=e.read(d);return new ExtendedTransaction(i,n,o,a,c,h,l,u,r,_)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint8(Transaction.Format.EXTENDED);this.serializeContent(e);e.writeUint16(this._proof.byteLength);e.write(this._proof);return e}get serializedSize(){return 1+this.serializedContentSize+2+this._proof.byteLength}}Transaction.FORMAT_MAP.set(Transaction.Format.EXTENDED,ExtendedTransaction);Class.register(ExtendedTransaction);class TransactionsProof{constructor(e,t){if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof Transaction)))throw new Error("Malformed transactions");if(!(t instanceof MerkleProof))throw new Error("Malformed merkle proof");this._transactions=e;this._proof=t}static unserialize(e){const t=e.readUint16(),s=[];for(let i=0;i<t;++i)s.push(Transaction.unserialize(e));const r=MerkleProof.unserialize(e);return new TransactionsProof(s,r)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._transactions.length);for(const t of this._transactions)t.serialize(e);this._proof.serialize(e);return e}get serializedSize(){return 2+this._transactions.reduce((e,t)=>e+t.serializedSize,0)+this._proof.serializedSize}toString(){return`TransactionsProof{length=${this.length}}`}root(){return this._proof.computeRoot(this._transactions)}get length(){return this._transactions.length}get transactions(){return this._transactions}get proof(){return this._proof}}Class.register(TransactionsProof);class TransactionCache{constructor(e=[],t=[]){this._transactions=new HashSet(e=>e.hash().toBase64());this._transactions.addAll(e);this._blockOrder=t}containsTransaction(e){return this._transactions.contains(e)}pushBlock(e){this._blockOrder.push(e);this._transactions.addAll(e.transactions);this._blockOrder.length>Policy.TRANSACTION_VALIDITY_WINDOW&&this.shiftBlock()}shiftBlock(){const e=this._blockOrder.shift();e&&this._transactions.removeAll(e.transactions)}revertBlock(e){if(this._transactions.isEmpty())return this.missingBlocks;const t=this._blockOrder.pop();Assert.that(t.equals(e),"Invalid block to revert");e&&this._transactions.removeAll(e.transactions);return this.missingBlocks}prependBlocks(e){if(e.length+this._blockOrder.length>Policy.TRANSACTION_VALIDITY_WINDOW)throw new Error("Exceeding transaction cache size");this._blockOrder.unshift(...e);e.forEach(e=>this._transactions.addAll(e.transactions))}get missingBlocks(){return Policy.TRANSACTION_VALIDITY_WINDOW-this._blockOrder.length}get transactions(){return this._transactions}clone(){return new TransactionCache(this._transactions,this._blockOrder.slice())}}Class.register(TransactionCache);class TransactionStoreEntry{constructor(e,t,s,r,i,n){this._transactionHash=e;this._sender=t;this._recipient=s;this._blockHeight=r;this._blockHash=i;this._index=n;this.senderKey=t.toBase64();this.recipientKey=s.toBase64()}static fromBlock(e){const t=e.hash(),s=[];for(let r=0;r<e.transactions.length;++r){const i=e.transactions[r];s.push(new TransactionStoreEntry(i.hash(),i.sender,i.recipient,e.height,t,r))}return s}static fromJSON(e,t){return new TransactionStoreEntry(Hash.fromBase64(e),Address.fromBase64(t.senderKey),Address.fromBase64(t.recipientKey),t.blockHeight,Hash.fromBase64(t.blockHash),t.index)}toJSON(){return{senderKey:this.senderKey,recipientKey:this.recipientKey,blockHeight:this.blockHeight,blockHash:this.blockHash.toBase64(),index:this.index}}get transactionHash(){return this._transactionHash}get sender(){return this._sender}get recipient(){return this._recipient}get blockHeight(){return this._blockHeight}get blockHash(){return this._blockHash}get index(){return this._index}get key(){return this.transactionHash.toBase64()}}Class.register(TransactionStoreEntry);class TransactionStore{static initPersistent(e){const t=e.createObjectStore("Transactions",new TransactionStoreCodec);t.createIndex("sender","senderKey",!0);t.createIndex("recipient","recipientKey",!0)}static getPersistent(e){return new TransactionStore(e.getObjectStore("Transactions"))}static createVolatile(){const e=JDB.JungleDB.createVolatileObjectStore();e.createIndex("sender","senderKey",!0);e.createIndex("recipient","recipientKey",!0);return new TransactionStore(e)}constructor(e){this._store=e}get(e){return this._store.get(e.toBase64())}getBySender(e){return this._store.index("sender").values(JDB.KeyRange.only(e.toBase64()))}getByRecipient(e){return this._store.index("recipient").values(JDB.KeyRange.only(e.toBase64()))}async put(e){const t=await TransactionStoreEntry.fromBlock(e),s=this._store.transaction(),r=[];for(const i of t)r.push(s.put(i.key,i));await Promise.all(r);return s.commit()}async remove(e){const t=this._store.transaction(),s=[];for(const r of e.transactions)s.push(t.remove(r.hash().toBase64()));await Promise.all(s);return t.commit()}snapshot(e){const t=this._store.snapshot();e&&t.inherit(e._store);return new TransactionStore(t)}transaction(e=!0){const t=this._store.transaction(e);return new TransactionStore(t)}truncate(){return this._store.truncate()}commit(){return this._store.commit()}abort(){return this._store.abort()}get tx(){return this._store instanceof JDB.Transaction?this._store:undefined}}Class.register(TransactionStore);class TransactionStoreCodec{encode(e){return e.toJSON()}decode(e,t){return TransactionStoreEntry.fromJSON(t,e)}get valueEncoding(){return JDB.JungleDB.JSON_ENCODING}}class TransactionReceipt{constructor(e,t){this._transactionHash=e;this._blockHash=t}static unserialize(e){const t=Hash.unserialize(e),s=Hash.unserialize(e);return new TransactionReceipt(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._transactionHash.serialize(e);this._blockHash.serialize(e);return e}get serializedSize(){return this._transactionHash.serializedSize+this._blockHash.serializedSize}get transactionHash(){return this._transactionHash}get blockHash(){return this._blockHash}}Class.register(TransactionReceipt);class Block{static copy(e){return e?new Block(BlockHeader.copy(e._header),BlockInterlink.copy(e._interlink),BlockBody.copy(e._body)):e}constructor(e,t,s){if(!(e instanceof BlockHeader))throw"Malformed header";if(!(t instanceof BlockInterlink))throw"Malformed interlink";if(s&&!(s instanceof BlockBody))throw"Malformed body";this._header=e;this._interlink=t;this._body=s}static unserialize(e){const t=BlockHeader.unserialize(e),s=BlockInterlink.unserialize(e,t.prevHash);let r=undefined;e.readUint8()&&(r=BlockBody.unserialize(e));return new Block(t,s,r)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._header.serialize(e);this._interlink.serialize(e);if(this._body){e.writeUint8(1);this._body.serialize(e)}else e.writeUint8(0);return e}get serializedSize(){return this._header.serializedSize+this._interlink.serializedSize+1+(this._body?this._body.serializedSize:0)}async verify(e){if(this._valid===undefined)if(this.isLight()||this.body.transactions.length<150||!IWorker.areWorkersAsync)this._valid=await this._verify(e.now());else{const t=this.body.transactions.map(e=>e._valid),{valid:s,pow:r,interlinkHash:i,bodyHash:n}=await Crypto.blockVerify(this.serialize(),t,e.now());this._valid=s;this.header._pow=Hash.unserialize(new SerialBuffer(r));this.interlink._hash=Hash.unserialize(new SerialBuffer(i));this.body._hash=Hash.unserialize(new SerialBuffer(n))}return this._valid}async _verify(e){if(1e3*this._header.timestamp>e+1e3*Block.TIMESTAMP_DRIFT_MAX){Log.w(Block,"Invalid block - timestamp too far in the future");return!1}if(!await this._header.verifyProofOfWork()){Log.w(Block,"Invalid block - PoW verification failed");return!1}if(this.serializedSize>Policy.BLOCK_SIZE_MAX){Log.w(Block,"Invalid block - max block size exceeded");return!1}return!!this._verifyInterlink()&&!(this.isFull()&&!this._verifyBody())}_verifyInterlink(){if(1===this.height&&this._header.interlinkHash.equals(new Hash(null)))return!0;const e=this._interlink.hash();if(!this._header.interlinkHash.equals(e)){Log.w(Block,"Invalid block - interlink hash mismatch");return!1}return!0}_verifyBody(){if(!this._body.verify())return!1;const e=this._body.hash();if(!this._header.bodyHash.equals(e)){Log.w(Block,"Invalid block - body hash mismatch");return!1}return!0}async isImmediateSuccessorOf(e){if(!this._header.isImmediateSuccessorOf(e.header))return!1;const t=await e.getNextInterlink(this.target,this.version);return!!this._interlink.equals(t)}async isInterlinkSuccessorOf(e){if(this._header.height<=e.header.height){Log.v(Block,"No interlink successor - height");return!1}if(this._header.timestamp<e.header.timestamp){Log.v(Block,"No interlink successor - timestamp");return!1}const t=e.hash();if(!Block.GENESIS.HASH.equals(t)){const s=await e.pow(),r=BlockUtils.getTargetHeight(this.target);let i=!1,n=0;for(;n<this._interlink.length;n++)if(t.equals(this._interlink.hashes[n])){i=!0;if(!BlockUtils.isProofOfWork(s,Math.pow(2,r-n))){Log.v(Block,"No interlink successor - invalid position in interlink");return!1}}if(!i){Log.v(Block,"No interlink successor - not in interlink");return!1}}if(this._header.prevHash.equals(t)){if(this._header.height!==e.header.height+1){Log.v(Block,"No interlink successor - immediate height");return!1}const t=(await e.getNextInterlink(this.target,this.version)).hash();if(!this._header.interlinkHash.equals(t)){Log.v(Block,"No interlink successor - immediate interlink");return!1}}else{if(this._header.height===e.height.height+1){Log.v(Block,"No interlink successor - immediate height (2)");return!1}{const t=new HashSet;t.addAll(this._interlink.hashes);t.removeAll(e.interlink.hashes);if(t.length>this._header.height-e.header.height){Log.v(Block,"No interlink successor - too many new blocks");return!1}const s=BlockUtils.getTargetDepth(this.target)-BlockUtils.getTargetDepth(e.target);if(this._interlink.length<e.interlink.length-s){Log.v(Block,"No interlink successor - interlink too short");return!1}let r=!1;const i=this._interlink.hashes,n=e.interlink.hashes;for(let e=1;e<n.length&&e-s<i.length;e++)if(n[e].equals(i[e-s]))r=!0;else if(r){Log.v(Block,"No interlink successor - invalid common suffix");return!1}}}return!0}async isSuccessorOf(e){return await this.isImmediateSuccessorOf(e)||await this.isInterlinkSuccessorOf(e)}async getNextInterlink(e,t=BlockHeader.CURRENT_VERSION){const s=await this.pow(),r=BlockUtils.getTargetDepth(BlockUtils.hashToTarget(s)),i=BlockUtils.getTargetDepth(e);let n=r-i;const o=[],a=this.hash();for(let c=0;c<=n;c++)o.push(a);for(let c=n+(i-BlockUtils.getTargetDepth(this.target))+1;c<this.interlink.length;c++)o.push(this.interlink.hashes[c]);return new BlockInterlink(o,a)}equals(e){return e instanceof Block&&this._header.equals(e._header)&&this._interlink.equals(e._interlink)&&(this._body?this._body.equals(e._body):!e._body)}isLight(){return!this._body}isFull(){return!!this._body}toLight(){return this.isLight()?this:new Block(this._header,this._interlink)}toFull(e){return this.isFull()?this:new Block(this._header,this._interlink,e)}get header(){return this._header}get interlink(){return this._interlink}get body(){if(this.isLight())throw"Cannot access body of light block";return this._body}get version(){return this._header.version}get prevHash(){return this._header.prevHash}get bodyHash(){return this._header.bodyHash}get accountsHash(){return this._header.accountsHash}get nBits(){return this._header.nBits}get target(){return this._header.target}get difficulty(){return this._header.difficulty}get height(){return this._header.height}get timestamp(){return this._header.timestamp}get nonce(){return this._header.nonce}get minerAddr(){return this._body.minerAddr}get transactions(){return this._body.transactions}get transactionCount(){return this._body.transactionCount}hash(e){return this._header.hash(e)}hashAsync(e){return this._header.hashAsync(e)}pow(e){return this._header.pow(e)}}Block.TIMESTAMP_DRIFT_MAX=600;Class.register(Block);class IBlockchain extends Observable{get head(){}get headHash(){}get height(){}}Class.register(IBlockchain);class BaseChain extends IBlockchain{constructor(e){super();this._store=e}async getBlock(e,t=!1){const s=await this._store.getChainData(e);return s&&(s.onMainChain||t)?s.head:null}getBlockAt(e){return this._store.getBlockAt(e)||null}async getNextTarget(e){let t;if(e){const s=e.hash();t=await this._store.getChainData(s);Assert.that(!!t)}else{e=this.head;t=this._mainChain}const s=Math.max(e.height-Policy.DIFFICULTY_BLOCK_WINDOW,1);let r;if(t.onMainChain)r=await this._store.getChainDataAt(s);else{let e=t;for(let t=0;t<Policy.DIFFICULTY_BLOCK_WINDOW&&!e.onMainChain;t++)if(!(e=await this._store.getChainData(e.head.prevHash)))return-1;r=e.onMainChain&&e.head.height>s?await this._store.getChainDataAt(s):e}if(!r||r.totalDifficulty<1)return-1;const i=t.totalDifficulty-r.totalDifficulty;return BlockUtils.getNextTarget(t.head.header,r.head.header,i)}async _getChainProof(){const e=this._store.snapshot(),t=new BaseChainSnapshot(e,this.head),s=await t._prove(Policy.M,Policy.K,Policy.DELTA);e.abort()["catch"](Log.w.tag(BaseChain));return s}async _prove(e,t,s){Assert.that(e>=1,"m must be >= 1");Assert.that(s>0,"delta must be > 0");let r=new BlockChain([]),i=1;const n=await this.getBlockAt(Math.max(this.height-t,1));for(let a=Math.max(BlockUtils.getTargetDepth(n.target)+n.interlink.length-1,0);a>=0;a--){const t=await this._getSuperChain(a,n,i);r=BlockChain.merge(r,t);if(BaseChain._isGoodSuperChain(t,a,e,s)){Assert.that(t.length>=e,`Good superchain expected to be at least ${e} long`);Log.v(BaseChain,`Found good superchain at depth ${a} with length ${t.length} (#${i} - #${n.height})`);i=t.blocks[t.length-e].height}}const o=await this._getHeaderChain(this.height-n.height);return new ChainProof(r,o)}async _getSuperChain(e,t=this.head,s=1){Assert.that(s>=1,"tailHeight must be >= 1");const r=[],i=await t.pow();BlockUtils.getTargetDepth(BlockUtils.hashToTarget(i))>=e&&r.push(t.toLight());let n=Math.max(e-BlockUtils.getTargetDepth(t.target),-1);for(;n<t.interlink.hashes.length&&t.height>s;){const s=n<0?t.prevHash:t.interlink.hashes[n];if(!(t=await this.getBlock(s))){Log.w(BaseChain,`Failed to find block ${s} while constructing SuperChain at depth ${e} - returning truncated chain`);break}r.push(t.toLight());n=Math.max(e-BlockUtils.getTargetDepth(t.target),-1)}(0===r.length||r[r.length-1].height>1)&&1===s&&r.push(Block.GENESIS.toLight());return new BlockChain(r.reverse())}static _isGoodSuperChain(e,t,s,r){return BaseChain._hasSuperQuality(e,t,s,r)}static _hasSuperQuality(e,t,s,r){Assert.that(s>=1,"m must be >= 1");if(e.length<s)return!1;for(let i=s;i<=e.length;i++){const s=e.head.height-e.blocks[e.length-i].height+1;if(!BaseChain._isLocallyGood(i,s,t,r))return!1}return!0}static _isLocallyGood(e,t,s,r){return e>(1-r)*Math.pow(2,-s)*t}async _getHeaderChain(e,t=this.head){const s=[];for(;t&&s.length<e;){s.push(t.header);t=await this.getBlock(t.prevHash)}return new HeaderChain(s.reverse())}async _extendChainProof(e,t,s=!0){const r=e.suffix.headers.slice();r.push(t);const i=e.prefix.blocks.slice();if(r.length<=Policy.K)return new ChainProof(new BlockChain(i),new HeaderChain(r));const n=r.shift(),o=await e.prefix.head.getNextInterlink(n.target,n.version),a=new Block(n,o);i.push(a);const c=(await e.getSuperChains()).slice(),h=BlockUtils.hashToTarget(await a.pow()),l=BlockUtils.getTargetDepth(h);for(let _=l;_>=0;_--)c[_]?c[_]=new BlockChain([...c[_].blocks,a]):c[_]=new BlockChain([a]);if(l-BlockUtils.getTargetDepth(a.target)<=0)return new ChainProof(new BlockChain(i),new HeaderChain(r),c);const u=new Set;for(let _=l;_>=0;_--){const e=c[_];if(!(e.length<Policy.M))if(BaseChain._isGoodSuperChain(e,_,Policy.M,Policy.DELTA)){const t=e.blocks[e.length-Policy.M];for(let e=_-1;e>=0;e--){let s=0,r=c[e].blocks[s];for(;r.height<=t.height;){const t=BlockUtils.hashToTarget(await r.pow());BlockUtils.getTargetDepth(t)===e&&r.height>1&&u.add(r.height);s++;r=c[e].blocks[s]}s>0&&(c[e]=new BlockChain(c[e].blocks.slice(s)))}}else{Log.w(BaseChain,`Chain quality badness detected at depth ${_}`);if(s)return null}}const d=new BlockChain(i.filter(e=>!u.has(e.height)));return new ChainProof(d,new HeaderChain(r),c)}static async isBetterProof(e,t,s){const r=BlockChain.lowestCommonAncestor(e.prefix,t.prefix),i=await NanoChain._getProofScore(e.prefix,r,s),n=await NanoChain._getProofScore(t.prefix,r,s);return i===n?e.suffix.totalDifficulty()>=t.suffix.totalDifficulty():i>n}static async _getProofScore(e,t,s){const r=[];for(const c of e.blocks){if(c.height<t.height)continue;const e=BlockUtils.hashToTarget(await c.pow()),s=BlockUtils.getTargetDepth(e);r[s]=r[s]?r[s]+1:1}let i,n=0;for(i=r.length-1;n<s&&i>=0;i--)n+=r[i]?r[i]:0;let o=Math.pow(2,i+1)*n,a=n;for(let c=i;c>=0;c--){a+=r[c]?r[c]:0;const e=Math.pow(2,c)*a;o=Math.max(o,e)}return o}}Class.register(BaseChain);class BaseChainSnapshot extends BaseChain{constructor(e,t){super(e);this._head=t}get head(){return this._head}get height(){return this._head.height}}Class.register(BaseChainSnapshot);class BlockChain{static merge(e,t){const s=[];let r=0,i=0;for(;r<e.length&&i<t.length;){const n=e.blocks[r],o=t.blocks[i];if(n.height===o.height){Assert.that(n.equals(o),"Encountered different blocks at same height during chain merge");s.push(n);r++;i++}else if(n.height<o.height){s.push(n);r++}else{s.push(o);i++}}for(;r<e.length;r++)s.push(e.blocks[r]);for(;i<t.length;i++)s.push(t.blocks[i]);return new BlockChain(s)}static lowestCommonAncestor(e,t){let s=e.length-1,r=t.length-1;for(;s>=0&&r>=0;){const i=e.blocks[s],n=t.blocks[r];if(i.equals(n))return i;i.height>n.height?s--:r--}return undefined}constructor(e){if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof Block&&e.isLight())))throw new Error("Malformed blocks");this._blocks=e}static unserialize(e){const t=e.readUint16(),s=[];for(let r=0;r<t;r++)s.push(Block.unserialize(e));return new BlockChain(s)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._blocks.length);for(const t of this._blocks)t.serialize(e);return e}get serializedSize(){return 2+this._blocks.reduce((e,t)=>e+t.serializedSize,0)}async verify(){for(let e=this._blocks.length-1;e>=1;e--)if(!await this._blocks[e].isSuccessorOf(this._blocks[e-1]))return!1;return!0}denseSuffix(){const e=[this.head];let t=this.head;for(let s=this.length-2;s>=0;s--){const r=this.blocks[s];if(!r.hash().equals(t.prevHash))break;e.push(r);t=r}e.reverse();return e}isAnchored(){return Block.GENESIS.HASH.equals(this.tail.hash())}toString(){return`BlockChain{length=${this.length}}`}get length(){return this._blocks.length}get blocks(){return this._blocks}get head(){return this._blocks[this.length-1]}get tail(){return this._blocks[0]}totalDifficulty(){return this._blocks.reduce((e,t)=>e+BlockUtils.targetToDifficulty(t.target),0)}}Class.register(BlockChain);class HeaderChain{constructor(e){if(!e||!Array.isArray(e)||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof BlockHeader)))throw new Error("Malformed headers");this._headers=e}static unserialize(e){const t=e.readUint16(),s=[];for(let r=0;r<t;r++)s.push(BlockHeader.unserialize(e));return new HeaderChain(s)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint16(this._headers.length);for(const t of this._headers)t.serialize(e);return e}get serializedSize(){return 2+this._headers.reduce((e,t)=>e+t.serializedSize,0)}async verify(){for(let e=this._headers.length-1;e>=1;e--)if(!this._headers[e].isImmediateSuccessorOf(this._headers[e-1]))return!1;return!0}toString(){return`HeaderChain{length=${this.length}}`}get length(){return this._headers.length}get headers(){return this._headers}get head(){return this._headers[this.length-1]}get tail(){return this._headers[0]}totalDifficulty(){return this._headers.reduce((e,t)=>e+BlockUtils.targetToDifficulty(t.target),0)}}Class.register(HeaderChain);class ChainProof{constructor(e,t,s){if(!(e instanceof BlockChain&&e.length))throw new Error("Malformed prefix");if(!(t instanceof HeaderChain))throw new Error("Malformed suffix");this._prefix=e;this._suffix=t;this._chains=s}static unserialize(e){const t=BlockChain.unserialize(e),s=HeaderChain.unserialize(e);return new ChainProof(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);this._prefix.serialize(e);this._suffix.serialize(e);return e}get serializedSize(){return this._prefix.serializedSize+this._suffix.serializedSize}async verify(){return!!this._prefix.isAnchored()&&(!(!await this._prefix.verify()||!await this._suffix.verify())&&(!(this._suffix.length>0&&!this._suffix.tail.isImmediateSuccessorOf(this._prefix.head.header))&&!!this._verifyDifficulty()))}_verifyDifficulty(){const e=this.prefix.denseSuffix().map(e=>e.header).concat(this.suffix.headers);let t=0;const s=[];for(let n=0;n<e.length;n++){t+=e[n].difficulty;s[n]=t}let r=e.length-2,i=r-Policy.DIFFICULTY_BLOCK_WINDOW;for(;i>=0&&r>=0;){const t=e[r],n=e[i],o=s[r]-s[i],a=BlockUtils.getNextTarget(t,n,o),c=BlockUtils.targetToCompact(a),h=e[r+1];if(h.nBits!==c){Log.w(ChainProof,`Block target mismatch: expected=${c}, got=${h.nBits}`);return!1}--r;0===i&&1===n.height||--i}return!0}async getSuperChains(){if(!this._chains){this._chains=[];for(let e=0;e<this._prefix.length;e++){const t=this._prefix.blocks[e],s=BlockUtils.hashToTarget(await t.pow()),r=BlockUtils.getTargetDepth(s);this._chains[r]?this._chains[r].blocks.push(t):this._chains[r]||(this._chains[r]=new BlockChain([t]));for(let e=r-1;e>=0;e--)this._chains[e]?this._chains[e].blocks.push(t):this._chains[e]=new BlockChain([])}}return this._chains}toString(){return`ChainProof{prefix=${this._prefix.length}, suffix=${this._suffix.length}, height=${this.head.height}}`}get prefix(){return this._prefix}get suffix(){return this._suffix}get head(){return this._suffix.length>0?this._suffix.head:this._prefix.head.header}}Class.register(ChainProof);class ChainData{static copy(e){if(!e)return e;const t=Block.unserialize(new SerialBuffer(e._head));t.header._pow=Hash.unserialize(new SerialBuffer(e._pow));return new ChainData(t,e._totalDifficulty,e._totalWork,e._onMainChain)}constructor(e,t,s,r=!1){this._head=e;this._totalDifficulty=t;this._totalWork=s;this._onMainChain=r;this._height=e.height}stripDown(){Assert.that(this._head.header._pow instanceof Hash,"Expected cashed PoW hash");return{_head:this._head.serialize(),_totalDifficulty:this._totalDifficulty,_totalWork:this._totalWork,_onMainChain:this._onMainChain,_height:this._height,_pow:this._head.header._pow.serialize()}}get head(){return this._head}get totalDifficulty(){return this._totalDifficulty}get totalWork(){return this._totalWork}get onMainChain(){return this._onMainChain}set onMainChain(e){this._onMainChain=e}}Class.register(ChainData);class ChainDataStore{static initPersistent(e){const t=e.createObjectStore("ChainData",new ChainDataStoreCodec);ChainDataStore._createIndexes(t)}static getPersistent(e){return new ChainDataStore(e.getObjectStore("ChainData"))}static createVolatile(){const e=JDB.JungleDB.createVolatileObjectStore();ChainDataStore._createIndexes(e);return new ChainDataStore(e)}static _createIndexes(e){e.createIndex("height",["_height"])}constructor(e){this._store=e}getChainData(e){return this._store.get(e.toBase64())}putChainData(e,t){return this._store.put(e.toBase64(),t)}async getBlock(e){const t=await this.getChainData(e);return t?t.head:undefined}async getChainDataAt(e){const t=await this._store.values(JDB.Query.eq("height",e));if(!t||!t.length)return undefined;for(const s of t)if(s.onMainChain)return s;return undefined}async getBlockAt(e){const t=await this.getChainDataAt(e);return t?t.head:undefined}async getNearestBlockAt(e,t=!0){const s=this._store.index("height"),r=t?await s.maxValues(JDB.KeyRange.upperBound(e)):await s.minValues(JDB.KeyRange.lowerBound(e));if(!r||!r.length)return undefined;for(const i of r)if(i.onMainChain)return i.head;throw new Error(`Failed to find main chain block at height ${e}`)}async getBlocks(e,t=500,s=!0){if(t<=0)return[];s||(e-=t);let r=await this._store.values(JDB.Query.within("height",e,e+t-1));r=r.filter(e=>e.onMainChain).map(e=>e.head);const i=s?(e,t)=>e.height-t.height:(e,t)=>t.height-e.height;r.sort(i);return r}async getHead(){const e=await this._store.get("main");return e?Hash.fromBase64(e):undefined}setHead(e){return this._store.put("main",e.toBase64())}transaction(e=!0){const t=this._store.transaction(e);return new ChainDataStore(t)}commit(){return this._store.commit()}abort(){return this._store.abort()}snapshot(){const e=this._store.snapshot();return new ChainDataStore(e)}truncate(){return this._store.truncate()}get tx(){return this._store instanceof JDB.Transaction?this._store:undefined}}Class.register(ChainDataStore);class ChainDataStoreCodec{encode(e){return"string"==typeof e?e:e.stripDown()}decode(e,t){return"string"==typeof e?e:ChainData.copy(e)}get valueEncoding(){return JDB.JungleDB.JSON_ENCODING}}class MempoolTransactionSet{constructor(e){this._transactions=new SortedList(e)}add(e){this._transactions.add(e);return this}remove(e){this._transactions.remove(e);return this}copyAndAdd(e){const t=this._transactions.copy();t.add(e);return new MempoolTransactionSet(t.values())}get transactions(){return this._transactions.values()}get sender(){return this._transactions.length>0?this._transactions.values()[0].sender:null}get senderType(){return this._transactions.length>0?this._transactions.values()[0].senderType:undefined}get length(){return this._transactions.length}numBelowFeePerByte(e){return this._transactions.values().filter(t=>t.fee/t.serializedSize<e).length}toString(){return`MempoolTransactionSet{length=${this.length}}`}}Class.register(MempoolTransactionSet);class Mempool extends Observable{constructor(e,t){super();this._blockchain=e;this._accounts=t;this._transactionsByHash=new HashMap;this._transactionSetByAddress=new HashMap;this._synchronizer=new Synchronizer;e.on("head-changed",()=>this._evictTransactions())}pushTransaction(e){return this._synchronizer.push(()=>this._pushTransaction(e))}async _pushTransaction(e){const t=e.hash();if(this._transactionsByHash.contains(t)){Log.v(Mempool,()=>`Ignoring known transaction ${t.toBase64()}`);return Mempool.ReturnCode.KNOWN}const s=this._transactionSetByAddress.get(e.sender)||new MempoolTransactionSet;if(e.fee/e.serializedSize<Mempool.TRANSACTION_RELAY_FEE_MIN&&s.numBelowFeePerByte(Mempool.TRANSACTION_RELAY_FEE_MIN)>=Mempool.FREE_TRANSACTIONS_PER_SENDER_MAX)return Mempool.ReturnCode.FEE_TOO_LOW;if(!e.verify())return Mempool.ReturnCode.INVALID;let r,i;try{(r=await this._accounts.get(e.recipient)).withIncomingTransaction(e,this._blockchain.height+1)}catch(a){Log.w(Mempool,`Rejected transaction - ${a.message}`,e);return Mempool.ReturnCode.INVALID}try{i=await this._accounts.get(e.sender,e.senderType)}catch(a){Log.w(Mempool,`Rejected transaction - ${a.message}`,e);return Mempool.ReturnCode.INVALID}const n=[];let o=i;for(const c of s.copyAndAdd(e).transactions)try{o=o.withOutgoingTransaction(c,this._blockchain.height+1,this._blockchain.transactionCache);n.push(c)}catch(a){if(c.equals(e)){Log.w(Mempool,`Rejected transaction - ${a.message}`,e);return Mempool.ReturnCode.INVALID}this._transactionsByHash.remove(c.hash())}this._transactionsByHash.put(t,e);this._transactionSetByAddress.put(e.sender,new MempoolTransactionSet(n));this.fire("transaction-added",e);return Mempool.ReturnCode.ACCEPTED}getTransaction(e){return this._transactionsByHash.get(e)}getTransactions(e=Infinity){const t=[];let s=0;for(const r of this._transactionsByHash.values().sort((e,t)=>e.compare(t))){const i=r.serializedSize;if(!(s+i>=e)){t.push(r);s+=i}}return t}async getTransactionsForBlock(e){const t=this.getTransactions(e);let s=(await this._accounts.gatherToBePrunedAccounts(t,this._blockchain.height+1,this._blockchain.transactionCache)).reduce((e,t)=>e+t.serializedSize,0)+t.reduce((e,t)=>e+t.serializedSize,0);for(;s>e;)s-=t.pop().serializedSize;t.sort((e,t)=>e.compareBlockOrder(t));return t}getPendingTransactions(e){const t=this._transactionSetByAddress.get(e);return t?t.transactions:[]}_evictTransactions(){return this._synchronizer.push(()=>this.__evictTransactions())}async __evictTransactions(){for(const t of this._transactionSetByAddress.keys()){const s=this._transactionSetByAddress.get(t);try{const r=await this._accounts.get(s.sender,s.senderType),i=[];let n=r;for(const t of s.transactions)try{const s=n.withOutgoingTransaction(t,this._blockchain.height+1,this._blockchain.transactionCache);(await this._accounts.get(t.recipient)).withIncomingTransaction(t,this._blockchain.height+1);i.push(t);n=s}catch(e){this._transactionsByHash.remove(t.hash())}0===i.length?this._transactionSetByAddress.remove(t):this._transactionSetByAddress.put(t,new MempoolTransactionSet(i))}catch(e){for(const t of s.transactions)this._transactionsByHash.remove(t.hash());this._transactionSetByAddress.remove(t)}}this.fire("transactions-ready")}}Mempool.TRANSACTION_RELAY_FEE_MIN=1;Mempool.FREE_TRANSACTIONS_PER_SENDER_MAX=10;Mempool.ReturnCode={FEE_TOO_LOW:-2,INVALID:-1,ACCEPTED:1,KNOWN:2};Class.register(Mempool);class BaseConsensusAgent extends Observable{constructor(e){super();this._peer=e;this._synced=!1;this._knownObjects=new HashSet;this._knownObjects.add(new InvVector(InvVector.Type.BLOCK,e.headHash));this._objectsToRequest=new HashSet;this._objectsInFlight=new HashSet;this._objectsThatFlew=new HashSet;this._objectsProcessing=new HashSet;this._remoteSubscription=Subscription.NONE;this._timers=new Timers;this._waitingInvVectors=new Queue;this._timers.setInterval("invVectors",()=>this._sendWaitingInvVectors(),BaseConsensusAgent.TRANSACTION_RELAY_INTERVAL);this._waitingFreeInvVectors=new Queue;this._timers.setInterval("freeInvVectors",()=>this._sendFreeWaitingInvVectors(),BaseConsensusAgent.FREE_TRANSACTION_RELAY_INTERVAL);e.channel.on("inv",e=>this._onInv(e));e.channel.on("block",e=>this._onBlock(e));e.channel.on("header",e=>this._onHeader(e));e.channel.on("tx",e=>this._onTx(e));e.channel.on("not-found",e=>this._onNotFound(e));e.channel.on("subscribe",e=>this._onSubscribe(e));e.channel.on("get-data",e=>this._onGetData(e));e.channel.on("get-header",e=>this._onGetHeader(e));e.channel.on("close",()=>this._onClose())}relayBlock(e){if(!this._synced)return!1;if(!this._remoteSubscription.matchesBlock(e))return!1;const t=InvVector.fromBlock(e);if(this._knownObjects.contains(t))return!1;this._peer.channel.inv([t,...this._waitingInvVectors.dequeueMulti(BaseInventoryMessage.VECTORS_MAX_COUNT-1)]);this._knownObjects.add(t);return!0}_sendWaitingInvVectors(){const e=this._waitingInvVectors.dequeueMulti(BaseInventoryMessage.VECTORS_MAX_COUNT);if(e.length>0){this._peer.channel.inv(e);Log.v(BaseConsensusAgent,`[INV] Sent ${e.length} vectors to ${this._peer.peerAddress}`)}}_sendFreeWaitingInvVectors(){const e=[];let t=0;for(;e.length<=BaseInventoryMessage.VECTORS_MAX_COUNT&&this._waitingFreeInvVectors.length>0&&t<BaseConsensusAgent.FREE_TRANSACTION_SIZE_PER_INTERVAL;){const{serializedSize:s,vector:r}=this._waitingFreeInvVectors.dequeue();e.push(r);t+=s}if(e.length>0){this._peer.channel.inv(e);Log.v(BaseConsensusAgent,`[INV] Sent ${e.length} vectors to ${this._peer.peerAddress}`)}}relayTransaction(e){if(!this._remoteSubscription.matchesTransaction(e))return!1;const t=InvVector.fromTransaction(e);if(this._knownObjects.contains(t))return!1;const s=e.serializedSize;e.fee/s<BaseConsensusAgent.TRANSACTION_RELAY_FEE_MIN?this._waitingFreeInvVectors.enqueue({serializedSize:s,vector:t}):this._waitingInvVectors.enqueue(t);this._knownObjects.add(t);return!0}knowsBlock(e){const t=new InvVector(InvVector.Type.BLOCK,e);return this._knownObjects.contains(t)}_onSubscribe(e){Log.d(BaseConsensusAgent,`[SUBSCRIBE] ${this._peer.peerAddress} ${e.subscription}`);this._remoteSubscription=e.subscription}async _onInv(e){for(const s of e.vectors){this._knownObjects.add(s);this._waitingInvVectors.remove(s)}const t=[];for(const s of e.vectors)if(!this._objectsInFlight.contains(s)&&!this._objectsProcessing.contains(s)&&this._shouldRequestData(s))switch(s.type){case InvVector.Type.BLOCK:{const e=await this._getBlock(s.hash,!0);if(e)this._onKnownBlockAnnounced(s.hash,e);else{t.push(s);this._onNewBlockAnnounced(s.hash)}break}case InvVector.Type.TRANSACTION:{const e=await this._getTransaction(s.hash);if(e)this._onKnownTransactionAnnounced(s.hash,e);else{t.push(s);this._onNewTransactionAnnounced(s.hash)}break}default:throw`Invalid inventory type: ${s.type}`}Log.v(BaseConsensusAgent,`[INV] ${e.vectors.length} vectors (${t.length} new) received from ${this._peer.peerAddress}`);if(t.length>0){this._objectsToRequest.addAll(t);this._timers.clearTimeout("inv");this._objectsToRequest.length>=BaseConsensusAgent.REQUEST_THRESHOLD?this._requestData():this._timers.setTimeout("inv",()=>this._requestData(),BaseConsensusAgent.REQUEST_THROTTLE)}else this._onNoUnknownObjects()}_shouldRequestData(e){return!0}_getBlock(e,t=!1){throw new Error("not implemented")}_getTransaction(e){throw new Error("not implemented")}_onNewBlockAnnounced(e){}_onKnownBlockAnnounced(e,t){}_onNewTransactionAnnounced(e){}_onKnownTransactionAnnounced(e,t){}_requestData(){if(!this._objectsInFlight.isEmpty())return;if(this._objectsToRequest.isEmpty())return;const e=BaseInventoryMessage.VECTORS_MAX_COUNT,t=Array.from(new LimitIterable(this._objectsToRequest.valueIterator(),e));this._objectsInFlight.addAll(t);this._objectsToRequest.removeAll(t);this._doRequestData(t);this._timers.setTimeout("getData",()=>this._noMoreData(),BaseConsensusAgent.REQUEST_TIMEOUT)}_doRequestData(e){this._peer.channel.getData(e)}async _onBlock(e){const t=e.block.hash(),s=new InvVector(InvVector.Type.BLOCK,t);if(!this._objectsInFlight.contains(s)&&!this._objectsThatFlew.contains(s)){Log.w(BaseConsensusAgent,`Unsolicited block ${t} received from ${this._peer.peerAddress}, discarding`);return}const r=e.block.isFull()?e.block.body.transactions:[],i=r.map(e=>this._getTransaction(e.hash()));for(let n=0;n<r.length;n++){const e=await i[n];e&&(r[n]=e)}this._onObjectReceived(s);this._objectsProcessing.add(s);await this._processBlock(t,e.block);this._onObjectProcessed(s)}async _processBlock(e,t){}async _onHeader(e){const t=e.header.hash(),s=new InvVector(InvVector.Type.BLOCK,t);if(this._objectsInFlight.contains(s)||this._objectsThatFlew.contains(s)){this._onObjectReceived(s);this._objectsProcessing.add(s);await this._processHeader(t,e.header);this._onObjectProcessed(s)}else Log.w(BaseConsensusAgent,`Unsolicited header ${t} received from ${this._peer.peerAddress}, discarding`)}async _processHeader(e,t){}async _onTx(e){const t=e.transaction.hash(),s=new InvVector(InvVector.Type.TRANSACTION,t);if(this._objectsInFlight.contains(s)||this._objectsThatFlew.contains(s)){this._onObjectReceived(s);this._objectsProcessing.add(s);await this._processTransaction(t,e.transaction);this._onObjectProcessed(s)}else Log.w(BaseConsensusAgent,`Unsolicited transaction ${t} received from ${this._peer.peerAddress}, discarding`)}async _processTransaction(e,t){}_onNotFound(e){Log.d(BaseConsensusAgent,`[NOTFOUND] ${e.vectors.length} unknown objects received from ${this._peer.peerAddress}`);for(const t of e.vectors)this._objectsInFlight.contains(t)&&this._onObjectReceived(t)}_onObjectReceived(e){if(!this._objectsInFlight.isEmpty()){this._objectsInFlight.remove(e);this._objectsInFlight.isEmpty()?this._noMoreData():this._timers.resetTimeout("getData",()=>this._noMoreData(),BaseConsensusAgent.REQUEST_TIMEOUT)}}_noMoreData(){this._timers.clearTimeout("getData");this._objectsThatFlew.addAll(this._objectsInFlight.values());this._objectsInFlight.clear();this._objectsToRequest.isEmpty()?this._onAllObjectsReceived():this._requestData()}_onNoUnknownObjects(){}_onAllObjectsReceived(){}_onObjectProcessed(e){this._objectsProcessing.remove(e);this._objectsProcessing.isEmpty()&&this._onAllObjectsProcessed()}_onAllObjectsProcessed(){}async _onGetData(e){for(const s of e.vectors)this._knownObjects.add(s);const t=[];for(const s of e.vectors)switch(s.type){case InvVector.Type.BLOCK:{const e=await this._getBlock(s.hash);e&&e.isFull()?this._peer.channel.block(e):t.push(s);break}case InvVector.Type.TRANSACTION:{const e=await this._getTransaction(s.hash);e?this._peer.channel.tx(e):t.push(s);break}default:throw`Invalid inventory type: ${s.type}`}t.length&&this._peer.channel.notFound(t)}async _onGetHeader(e){for(const s of e.vectors)this._knownObjects.add(s);const t=[];for(const s of e.vectors)switch(s.type){case InvVector.Type.BLOCK:{const e=await this._getBlock(s.hash);e?this._peer.channel.header(e.header):t.push(s);break}case InvVector.Type.TRANSACTION:default:throw`Invalid inventory type: ${s.type}`}t.length&&this._peer.channel.notFound(t)}_onClose(){this._timers.clearAll();this.fire("close",this)}get peer(){return this._peer}get synced(){return this._synced}}BaseConsensusAgent.REQUEST_THRESHOLD=50;BaseConsensusAgent.REQUEST_THROTTLE=500;BaseConsensusAgent.REQUEST_TIMEOUT=1e4;BaseConsensusAgent.TRANSACTION_RELAY_INTERVAL=5e3;BaseConsensusAgent.FREE_TRANSACTION_RELAY_INTERVAL=6e3;BaseConsensusAgent.FREE_TRANSACTION_SIZE_PER_INTERVAL=15e3;BaseConsensusAgent.TRANSACTION_RELAY_FEE_MIN=1;Class.register(BaseConsensusAgent);class FullChain extends BaseChain{static getPersistent(e,t,s,r){const i=ChainDataStore.getPersistent(e);return new FullChain(i,t,s,r)._init()}static createVolatile(e,t,s){const r=ChainDataStore.createVolatile();return new FullChain(r,e,t,s)._init()}constructor(e,t,s,r){super(e);this._accounts=t;this._time=s;this._snapshots=new HashMap;this._snapshotOrder=[];this._mainChain=null;this._proof=null;this._transactionCache=new TransactionCache;this._transactionStore=r;this._synchronizer=new Synchronizer;this._blockKnownCount=this._blockInvalidCount=this._blockOrphanCount=this._blockExtendedCount=this._blockRebranchedCount=this._blockForkedCount=0}async _init(){this._headHash=await this._store.getHead();if(this._headHash){this._mainChain=await this._store.getChainData(this._headHash);Assert.that(!!this._mainChain,"Failed to load main chain from storage");Assert.that(this._mainChain.head.accountsHash.equals(await this._accounts.hash()),"Corrupted store: Inconsistent chain/accounts state");const e=await this.getBlocks(this.head.height,this._transactionCache.missingBlocks-1,!1);this._transactionCache.prependBlocks([...e.reverse(),this._mainChain.head])}else{this._mainChain=new ChainData(Block.GENESIS,Block.GENESIS.difficulty,BlockUtils.realDifficulty(await Block.GENESIS.pow()),!0);this._headHash=Block.GENESIS.HASH;const e=this._store.transaction();await e.putChainData(Block.GENESIS.HASH,this._mainChain);await e.setHead(Block.GENESIS.HASH);await e.commit();await this._accounts.initialize(Block.GENESIS,Accounts.GENESIS)}return this}pushBlock(e){return this._synchronizer.push(()=>this._pushBlock(e))}async _pushBlock(e){const t=e.hash();if(await this._store.getBlock(t)){Log.v(FullChain,`Ignoring known block ${t}`);this._blockKnownCount++;return FullChain.OK_KNOWN}if(!e.isFull()){Log.w(FullChain,"Rejecting block - body missing");this._blockInvalidCount++;return FullChain.ERR_INVALID}if(!await e.verify(this._time)){this._blockInvalidCount++;return FullChain.ERR_INVALID}const s=await this._store.getChainData(e.prevHash);if(!s){Log.w(FullChain,"Rejecting block - unknown predecessor");this._blockOrphanCount++;return FullChain.ERR_ORPHAN}const r=s.head;if(!await e.isImmediateSuccessorOf(r)){Log.w(FullChain,"Rejecting block - not a valid immediate successor");this._blockInvalidCount++;return FullChain.ERR_INVALID}const i=await this.getNextTarget(r);Assert.that(BlockUtils.isValidTarget(i),"Failed to compute next target in FullChain");if(e.nBits!==BlockUtils.targetToCompact(i)){Log.w(FullChain,"Rejecting block - difficulty mismatch");this._blockInvalidCount++;return FullChain.ERR_INVALID}const n=s.totalDifficulty+e.difficulty,o=s.totalWork+BlockUtils.realDifficulty(await e.pow()),a=new ChainData(e,n,o);if(e.prevHash.equals(this.headHash)){if(!await this._extend(t,a)){this._blockInvalidCount++;return FullChain.ERR_INVALID}this._blockExtendedCount++;return FullChain.OK_EXTENDED}if(n>this.totalDifficulty){if(!await this._rebranch(t,a)){this._blockInvalidCount++;return FullChain.ERR_INVALID}this._blockRebranchedCount++;return FullChain.OK_REBRANCHED}Log.v(FullChain,`Creating/extending fork with block ${t}, height=${e.height}, totalDifficulty=${a.totalDifficulty}, totalWork=${a.totalWork}`);await this._store.putChainData(t,a);this._blockForkedCount++;return FullChain.OK_FORKED}async _verifyInterlink(e){for(let t=0;t<e.interlink.length;t++){const s=await this._store.getBlock(e.interlink.hashes[t]);if(!s||!await e.isInterlinkSuccessorOf(s))return!1}return!0}async _extend(e,t){const s=await this._accounts.transaction();try{await s.commitBlock(t.head,this._transactionCache)}catch(i){Log.w(FullChain,`Rejecting block - failed to commit to AccountsTree: ${i.message||i}`);s.abort()["catch"](Log.w.tag(FullChain));return!1}t.onMainChain=!0;const r=await this._store.transaction();await r.putChainData(e,t);await r.setHead(e);if(this._transactionStore){const e=this._transactionStore.transaction();await e.put(t.head);await JDB.JungleDB.commitCombined(r.tx,s.tx,e.tx)}else await JDB.JungleDB.commitCombined(r.tx,s.tx);await this._saveSnapshot(e);this._transactionCache.pushBlock(t.head);this._proof&&(this._proof=await this._extendChainProof(this._proof,t.head.header));this._mainChain=t;this._headHash=e;this.fire("head-changed",this.head,!1);return!0}async _rebranch(e,t){Log.v(FullChain,`Rebranching to fork ${e}, height=${t.head.height}, totalDifficulty=${t.totalDifficulty}, totalWork=${t.totalWork}`);for(const p of this._snapshotOrder){this._snapshots.get(p).abort()}this._snapshots.clear();this._snapshotOrder=[];const s=[],r=[];let i=t,n=e;for(;!i.onMainChain;){s.push(i);r.push(n);n=i.head.prevHash;i=await this._store.getChainData(n);Assert.that(!!i,"Corrupted store: Failed to find fork predecessor while rebranching")}Log.v(FullChain,()=>`Found common ancestor ${n.toBase64()} ${s.length} blocks up`);const o=await this._accounts.transaction(!1),a=this._transactionCache.clone(),c=this._transactionStore?this._transactionStore.transaction():null;let h=this._headHash,l=this._mainChain.head;for(;!h.equals(n);){try{await o.revertBlock(l,a);a.revertBlock(l);this._transactionStore&&await c.remove(l)}catch(f){Log.e(FullChain,"Failed to revert main chain while rebranching",f);o.abort()["catch"](Log.w.tag(FullChain));this._transactionStore&&c.abort()["catch"](Log.w.tag(FullChain));return!1}h=l.prevHash;l=await this._store.getBlock(h);Assert.that(!!l,"Corrupted store: Failed to find main chain predecessor while rebranching");Assert.that(l.accountsHash.equals(await o.hash()),"Failed to revert main chain - inconsistent state")}const u=a.missingBlocks,d=await this.getBlocks(l.height,u,!1);a.prependBlocks(d.reverse());for(let p=s.length-1;p>=0;p--)try{await o.commitBlock(s[p].head,a);a.pushBlock(s[p].head);this._transactionStore&&await c.put(s[p].head)}catch(f){Log.e(FullChain,"Failed to apply fork block while rebranching",f);o.abort()["catch"](Log.w.tag(FullChain));this._transactionStore&&c.abort()["catch"](Log.w.tag(FullChain));return!1}const _=this._store.transaction(!1);h=this._headHash;let g=this._mainChain;for(;!h.equals(n);){g.onMainChain=!1;await _.putChainData(h,g);h=g.head.prevHash;g=await _.getChainData(h);Assert.that(!!g,"Corrupted store: Failed to find main chain predecessor while rebranching")}for(let p=s.length-1;p>=0;p--){const e=s[p];e.onMainChain=!0;await _.putChainData(r[p],e)}await _.setHead(e);this._transactionStore?await JDB.JungleDB.commitCombined(_.tx,o.tx,c.tx):await JDB.JungleDB.commitCombined(_.tx,o.tx);this._transactionCache=a;this._proof=null;for(let p=s.length-1;p>=0;p--){this._mainChain=s[p];this._headHash=r[p];this.fire("head-changed",this.head,p>0)}return!0}getBlocks(e,t=500,s=!0){return this._store.getBlocks(e,t,s)}async getChainProof(){this._proof||(this._proof=await this._getChainProof());return this._proof}async getAccountsTreeChunk(e,t){const s=await this._getSnapshot(e);return s&&await s.getAccountsTreeChunk(t)}async getAccountsProof(e,t){const s=await this._getSnapshot(e);return s&&await s.getAccountsProof(t)}async getTransactionsProof(e,t){const s=await this.getBlock(e);if(!s||!s.isFull())return null;const r=[],i=new HashSet;i.addAll(t);for(const o of s.transactions)(i.contains(o.sender)||i.contains(o.recipient))&&r.push(o);const n=MerkleProof.compute(s.body.getMerkleLeafs(),r);return new TransactionsProof(r,n)}async getTransactionReceiptsByAddress(e){if(!this._transactionStore)throw new Error("Invalid request");const t=[],s=await this._transactionStore.getBySender(e),r=await this._transactionStore.getByRecipient(e);s.forEach(e=>{t.push(new TransactionReceipt(e.transactionHash,e.blockHash))});r.forEach(e=>{t.push(new TransactionReceipt(e.transactionHash,e.blockHash))});return t}async getTransactionInfoByHash(e){if(!this._transactionStore)throw new Error("Invalid request");const t=await this._transactionStore.get(e);return t||null}_getSnapshot(e){return this._synchronizer.push(async()=>{const t=await this.getBlock(e);if(!t||this._mainChain.head.height-t.height>Policy.NUM_SNAPSHOTS_MAX)return null;let s=null;if(this._snapshots.contains(e))s=this._snapshots.get(e);else{const e=await this._accounts.transaction(),r=this._transactionCache.clone();let i=this._headHash;for(;!t.prevHash.equals(i);){const t=await this.getBlock(i);if(!this._snapshots.contains(i)){s=await this._accounts.snapshot(e);this._snapshots.put(i,s);this._snapshotOrder.unshift(i)}await e.revertBlock(t,r);r.revertBlock(t);i=t.prevHash}await e.abort()}Assert.that(t.accountsHash.equals(await s.hash()),"AccountsHash mismatch for snapshot of block ${blockHash}");return s})}async _saveSnapshot(e){if(this._snapshotOrder.length>0){const t=this._snapshotOrder.shift(),s=this._snapshots.get(t);s?await s.abort():Log.e(FullChain,()=>`Snapshot with hash ${t.toBase64()} not found.`);this._snapshots.remove(t);const r=await this._accounts.snapshot();this._snapshots.put(e,r);this._snapshotOrder.push(e)}}get head(){return this._mainChain.head}get headHash(){return this._headHash}get height(){return this._mainChain.head.height}get totalDifficulty(){return this._mainChain.totalDifficulty}get totalWork(){return this._mainChain.totalWork}get accounts(){return this._accounts}get transactionCache(){return this._transactionCache}get blockForkedCount(){return this._blockForkedCount}get blockRebranchedCount(){return this._blockRebranchedCount}get blockExtendedCount(){return this._blockExtendedCount}get blockOrphanCount(){return this._blockOrphanCount}get blockInvalidCount(){return this._blockInvalidCount}get blockKnownCount(){return this._blockKnownCount}accountsHash(){return this._accounts.hash()}}FullChain.ERR_ORPHAN=-2;FullChain.ERR_INVALID=-1;FullChain.OK_KNOWN=0;FullChain.OK_EXTENDED=1;FullChain.OK_REBRANCHED=2;FullChain.OK_FORKED=3;Class.register(FullChain);class FullConsensusAgent extends BaseConsensusAgent{constructor(e,t,s){super(s);this._blockchain=e;this._mempool=t;this._syncing=!1;this._numBlocksExtending=-1;this._numBlocksForking=-1;this._forkHead=null;this._failedSyncs=0;this._syncTarget=s.headHash;s.channel.on("get-blocks",e=>this._onGetBlocks(e));s.channel.on("get-chain-proof",e=>this._onGetChainProof(e));s.channel.on("get-accounts-proof",e=>this._onGetAccountsProof(e));s.channel.on("get-accounts-tree-chunk",e=>this._onGetAccountsTreeChunk(e));s.channel.on("get-transactions-proof",e=>this._onGetTransactionsProof(e));s.channel.on("get-transaction-receipts",e=>this._onGetTransactions(e));s.channel.on("mempool",e=>this._onMempool(e))}async syncBlockchain(){this._syncing=!0;if(!Services.isFullNode(this._peer.peerAddress.services)){this._syncFinished();return}if(!this._objectsInFlight.isEmpty()){Log.v(FullConsensusAgent,`Waiting for ${this._objectsInFlight.length} objects to arrive ...`);return}if(!this._objectsProcessing.isEmpty()){Log.v(FullConsensusAgent,`Waiting for ${this._objectsProcessing.length} objects to be processed ...`);return}await this._blockchain.getBlock(this._syncTarget,!0)?this._syncFinished():0===this._numBlocksExtending&&++this._failedSyncs>=FullConsensusAgent.SYNC_ATTEMPTS_MAX?this._peer.channel.close(CloseType.BLOCKCHAIN_SYNC_FAILED,"blockchain sync failed"):this._requestBlocks()["catch"](Log.w.tag(FullConsensusAgent))}_syncFinished(){this._peer.channel.subscribe(Subscription.ANY);const e=FullConsensusAgent.MEMPOOL_DELAY_MIN+Math.random()*(FullConsensusAgent.MEMPOOL_DELAY_MAX-FullConsensusAgent.MEMPOOL_DELAY_MIN);setTimeout(()=>this._peer.channel.mempool(),e);this._syncing=!1;this._synced=!0;this._numBlocksExtending=0;this._numBlocksForking=0;this._forkHead=null;this._failedSyncs=0;this.fire("sync")}async _requestBlocks(e){if(this._peer.channel.isExpectingMessage(Message.Type.INV)){Log.e(FullConsensusAgent,"Duplicate _requestBlocks()");return}this._peer.channel.expectMessage(Message.Type.INV,()=>{this._peer.channel.close(CloseType.GET_BLOCKS_TIMEOUT,"getBlocks timeout")},BaseConsensusAgent.REQUEST_TIMEOUT);const t=[];if(this._forkHead&&0===this._numBlocksExtending&&this._numBlocksForking>0)t.push(this._forkHead.hash());else{t.push(this._blockchain.headHash);let e=this._blockchain.head;for(let r=Math.min(10,this._blockchain.height)-1;r>0&&e;r--){t.push(e.prevHash);e=await this._blockchain.getBlock(e.prevHash)}let s=2;for(let r=this._blockchain.height-10-s;r>0;r-=s){(e=await this._blockchain.getBlockAt(r))&&t.push(e.hash());s*=2}0!==t.length&&t[t.length-1].equals(Block.GENESIS.HASH)||t.push(Block.GENESIS.HASH)}this._numBlocksExtending=0;this._numBlocksForking=0;this._peer.channel.getBlocks(t,e)}_onInv(e){return super._onInv(e)}_shouldRequestData(e){return!(Services.isNanoNode(this._peer.peerAddress.services)&&e.type===InvVector.Type.BLOCK)}_getBlock(e,t=!1){return this._blockchain.getBlock(e,t)}_getTransaction(e){return Promise.resolve(this._mempool.getTransaction(e))}async _onKnownBlockAnnounced(e,t){if(this._syncing){this._numBlocksForking++;this._forkHead=t}}_onNoUnknownObjects(){this._syncing&&this.syncBlockchain()["catch"](Log.w.tag(FullConsensusAgent))}_onAllObjectsReceived(){this._syncing&&this.syncBlockchain()["catch"](Log.w.tag(FullConsensusAgent))}_onHeader(e){Log.w(FullConsensusAgent,`Unsolicited header message received from ${this._peer.peerAddress}, discarding`)}async _processBlock(e,t){switch(await this._blockchain.pushBlock(t)){case FullChain.ERR_INVALID:this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK,"received invalid block");break;case FullChain.OK_EXTENDED:case FullChain.OK_REBRANCHED:this._syncing&&this._numBlocksExtending++;break;case FullChain.OK_FORKED:if(this._syncing){this._numBlocksForking++;this._forkHead=t}break;case FullChain.ERR_ORPHAN:this._onOrphanBlock(e,t);break;case FullChain.OK_KNOWN:Log.v(FullConsensusAgent,`Received known block ${e} (height=${t.height}, prevHash=${t.prevHash}) from ${this._peer.peerAddress}`)}}_onOrphanBlock(e,t){if(this._synced){Log.d(FullConsensusAgent,`Received orphan block ${e} (height=${t.height}, prevHash=${t.prevHash}) from ${this._peer.peerAddress}`);this._timers.timeoutExists("outOfSync")||this._peer.channel.subscribe(Subscription.NONE);this._syncTarget=e;this._timers.resetTimeout("outOfSync",()=>this._outOfSync(),FullConsensusAgent.RESYNC_THROTTLE)}else Log.w(FullConsensusAgent,`Received orphan block ${e} (height=${t.height}, prevHash=${t.prevHash}) while syncing`)}_outOfSync(){this._timers.clearTimeout("outOfSync");this._synced=!1;this.fire("out-of-sync")}async _processTransaction(e,t){switch(await this._mempool.pushTransaction(t)){case Mempool.ReturnCode.ACCEPTED:return!0;case Mempool.ReturnCode.KNOWN:return!1;case Mempool.ReturnCode.FEE_TOO_LOW:this.peer.channel.reject(Message.Type.TX,RejectMessage.Code.REJECT_INSUFFICIENT_FEE,"Sender has too many free transactions",t.hash().serialize());return!1;case Mempool.ReturnCode.INVALID:this.peer.channel.reject(Message.Type.TX,RejectMessage.Code.REJECT_INVALID,"Invalid transaction",t.hash().serialize());return!1;default:return!1}}_onAllObjectsProcessed(){this._syncing&&this.syncBlockchain()["catch"](Log.w.tag(FullConsensusAgent))}async _onGetBlocks(e){Log.v(FullConsensusAgent,`[GETBLOCKS] ${e.locators.length} block locators maxInvSize ${e.maxInvSize} received from ${this._peer.peerAddress}`);let t=Block.GENESIS;for(const i of e.locators){const e=await this._blockchain.getBlock(i);if(e){t=e;break}}const s=await this._blockchain.getBlocks(t.height+1,Math.min(e.maxInvSize,FullConsensusAgent.GETBLOCKS_VECTORS_MAX),e.direction===GetBlocksMessage.Direction.FORWARD),r=[];for(const i of s)r.push(InvVector.fromBlock(i));this._peer.channel.inv(r)}async _onGetChainProof(e){const t=await this._blockchain.getChainProof();this._peer.channel.chainProof(t)}async _onGetAccountsProof(e){const t=await this._blockchain.getAccountsProof(e.blockHash,e.addresses);this._peer.channel.accountsProof(e.blockHash,t)}async _onGetTransactionsProof(e){const t=await this._blockchain.getTransactionsProof(e.blockHash,e.addresses);this._peer.channel.transactionsProof(e.blockHash,t)}async _onGetAccountsTreeChunk(e){const t=await this._blockchain.getAccountsTreeChunk(e.blockHash,e.startPrefix);this._peer.channel.accountsTreeChunk(e.blockHash,t)}async _onGetTransactions(e){const t=await this._blockchain.getTransactionReceiptsByAddress(e.address);let s=0;for(;s<TransactionReceiptsMessage.RECEIPTS_MAX_COUNT;){const e=t.slice(s,s+TransactionReceiptsMessage.RECEIPTS_MAX_COUNT);this._peer.channel.transactionReceipts(e);s+=TransactionReceiptsMessage.RECEIPTS_MAX_COUNT}}async _onMempool(e){const t=this._mempool.getTransactions(),s=new LimitIterable(t,FullConsensusAgent.MEMPOOL_ENTRIES_MAX);let r=[];for(const i of s){r.push(InvVector.fromTransaction(i));if(r.length>=BaseInventoryMessage.VECTORS_MAX_COUNT){this._peer.channel.inv(r);r=[];await new Promise(e=>setTimeout(e,FullConsensusAgent.MEMPOOL_THROTTLE))}}r.length>0&&this._peer.channel.inv(r)}}FullConsensusAgent.SYNC_ATTEMPTS_MAX=25;FullConsensusAgent.GETBLOCKS_VECTORS_MAX=500;FullConsensusAgent.RESYNC_THROTTLE=3e3;FullConsensusAgent.MEMPOOL_DELAY_MIN=2e3;FullConsensusAgent.MEMPOOL_DELAY_MAX=2e4;FullConsensusAgent.MEMPOOL_THROTTLE=1e3;FullConsensusAgent.MEMPOOL_ENTRIES_MAX=1e4;Class.register(FullConsensusAgent);class FullConsensus extends Observable{constructor(e,t,s){super();this._blockchain=e;this._mempool=t;this._network=s;this._agents=new HashMap;this._timers=new Timers;this._established=!1;this._syncPeer=null;s.on("peer-joined",e=>this._onPeerJoined(e));s.on("peer-left",e=>this._onPeerLeft(e));e.on("head-changed",e=>{if(this._established)for(const t of this._agents.values())t.relayBlock(e)});t.on("transaction-added",e=>{if(this._established)for(const t of this._agents.values())t.relayTransaction(e)})}_onPeerJoined(e){const t=new FullConsensusAgent(this._blockchain,this._mempool,e);this._agents.put(e.id,t);t.on("close",()=>this._onPeerLeft(t.peer));t.on("sync",()=>this._onPeerSynced(t.peer));t.on("out-of-sync",()=>this._onPeerOutOfSync(t.peer));this._timers.resetTimeout("sync",this._syncBlockchain.bind(this),FullConsensus.SYNC_THROTTLE)}_onPeerLeft(e){if(e.equals(this._syncPeer)){Log.w(FullConsensus,`Peer ${e.peerAddress} left during sync`);this._syncPeer=null}this._agents.remove(e.id);this._syncBlockchain()}_syncBlockchain(){if(this._syncPeer)return;const e=ArrayUtils.randomElement(this._agents.values().filter(e=>!e.synced));if(e){this._syncPeer=e.peer;this._established||this.fire("syncing");Log.v(FullConsensus,`Syncing blockchain with peer ${e.peer.peerAddress}`);e.syncBlockchain()["catch"](Log.w.tag(FullConsensusAgent))}else if(this._agents.length>0){if(!this._established){Log.i(FullConsensus,`Synced with all connected peers (${this._agents.length}), consensus established.`);Log.d(FullConsensus,`Blockchain: height=${this._blockchain.height}, headHash=${this._blockchain.headHash}`);this._established=!0;this.fire("established")}}else{this._established=!1;this.fire("lost")}}_onPeerSynced(e){if(e.equals(this._syncPeer)){Log.v(FullConsensus,`Finished sync with peer ${e.peerAddress}`);this._syncPeer=null}this._syncBlockchain()}_onPeerOutOfSync(e){Log.w(FullConsensus,`Peer ${e.peerAddress} out of sync, resyncing`);this._syncBlockchain()}get established(){return this._established}get blockchain(){return this._blockchain}get mempool(){return this._mempool}get network(){return this._network}}FullConsensus.SYNC_THROTTLE=1500;Class.register(FullConsensus);class LightChain extends FullChain{static getPersistent(e,t,s){const r=ChainDataStore.getPersistent(e);return new LightChain(r,t,s)._init()}static createVolatile(e,t){const s=ChainDataStore.createVolatile();return new LightChain(s,e,t)._init()}constructor(e,t,s){super(e,t,s)}async _init(){await FullChain.prototype._init.call(this);this._proof||(this._proof=await this._getChainProof());return this}async partialChain(){const e=await this.getChainProof(),t=new PartialLightChain(this._store,this._accounts,this._time,e);t.on("committed",async(e,t,s)=>{this._proof=e;this._headHash=t;this._mainChain=s;this.fire("head-changed",this.head)});await t._init();return t}}Class.register(LightChain);class LightConsensusAgent extends FullConsensusAgent{constructor(e,t,s){super(e,t,s);this._blockchain=e;this._partialChain=null;this._syncing=!1;this._catchup=!1;this._onMainChain=!1;this._orphanedBlocks=[];this._busy=!1;this._accountsRequest=null;this._requestedChainProof=!1;s.channel.on("chain-proof",e=>this._onChainProof(e));s.channel.on("accounts-tree-chunk",e=>this._onAccountsTreeChunk(e))}async syncBlockchain(){if(Services.isNanoNode(this._peer.peerAddress.services)){this._syncFinished();return}if(!this._objectsInFlight.isEmpty()){Log.v(LightConsensusAgent,`Waiting for ${this._objectsInFlight.length} objects to arrive ...`);return}if(!this._objectsProcessing.isEmpty()){Log.v(LightConsensusAgent,`Waiting for ${this._objectsProcessing.length} objects to be processed ...`);return}if(this._failedSyncs>=LightConsensusAgent.SYNC_ATTEMPTS_MAX){this._peer.channel.close(CloseType.BLOCKCHAIN_SYNC_FAILED,"blockchain sync failed");if(this._partialChain){await this._partialChain.abort();this._partialChain=null}return}const e=await this._blockchain.getBlock(this._syncTarget);if(!e||this._syncing){if(!e&&!this._syncing){this._syncing=!0;this._onMainChain=!1;let e;try{e=await this.getHeader(this._syncTarget)}catch(t){this._peer.channel.close(CloseType.DID_NOT_GET_REQUESTED_HEADER,"Did not get requested header");return}this._catchup=e.height-this._blockchain.height<=Policy.NUM_BLOCKS_VERIFICATION;Log.d(LightConsensusAgent,`Start syncing, catchup mode: ${this._catchup}`)}if(this._syncing&&!this._busy)if(this._catchup)await FullConsensusAgent.prototype.syncBlockchain.call(this);else{this._partialChain||await this._initChainProofSync();switch(this._partialChain.state){case PartialLightChain.State.PROVE_CHAIN:this._requestChainProof();this.fire("sync-chain-proof",this._peer.peerAddress);break;case PartialLightChain.State.PROVE_ACCOUNTS_TREE:this._requestAccountsTree();this.fire("sync-accounts-tree",this._peer.peerAddress);break;case PartialLightChain.State.PROVE_BLOCKS:this._requestProofBlocks();this.fire("verify-accounts-tree",this._peer.peerAddress);break;case PartialLightChain.State.COMPLETE:this.fire("sync-finalize",this._peer.peerAddress);this._busy=!0;await this._partialChain.commit();await this._applyOrphanedBlocks();this._syncFinished();break;case PartialLightChain.State.ABORTED:this._peer.channel.close(CloseType.ABORTED_SYNC,"aborted sync")}}}else this._syncFinished()}async _initChainProofSync(){this._peer.channel.subscribe(Subscription.ANY);this._syncing=!0;this._synced=!1;this._catchup=!1;this._onMainChain=!0;this._partialChain&&await this._partialChain.abort();this._partialChain=await this._blockchain.partialChain()}_syncFinished(){this._partialChain&&(this._partialChain=null);this._busy=!1;super._syncFinished()}async _applyOrphanedBlocks(){for(const e of this._orphanedBlocks){if(await this._blockchain.pushBlock(e)===LightChain.ERR_INVALID){this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK,"received invalid block");break}}this._orphanedBlocks=[]}_requestChainProof(){Assert.that(this._partialChain&&this._partialChain.state===PartialLightChain.State.PROVE_CHAIN);Assert.that(!this._requestedChainProof);this._busy=!0;this._peer.channel.getChainProof();this._requestedChainProof=!0;this._peer.channel.expectMessage(Message.Type.CHAIN_PROOF,()=>{this._peer.channel.close(CloseType.GET_CHAIN_PROOF_TIMEOUT,"getChainProof timeout")},LightConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT,LightConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT)}async _onChainProof(e){Assert.that(this._partialChain&&this._partialChain.state===PartialLightChain.State.PROVE_CHAIN);Log.d(LightConsensusAgent,`[CHAIN-PROOF] Received from ${this._peer.peerAddress}: ${e.proof}`);if(this._requestedChainProof){this._requestedChainProof=!1;this._syncing&&this.fire("verify-chain-proof",this._peer.peerAddress);if(await this._partialChain.pushProof(e.proof)){this._busy=!1;this.syncBlockchain()["catch"](Log.w.tag(LightConsensusAgent))}else{Log.w(LightConsensusAgent,`Invalid chain proof received from ${this._peer.peerAddress} - verification failed`);this._peer.channel.close(CloseType.INVALID_CHAIN_PROOF,"invalid chain proof")}}else Log.w(LightConsensusAgent,`Unsolicited chain proof received from ${this._peer.peerAddress}`)}_requestAccountsTree(){Assert.that(this._partialChain&&this._partialChain.state===PartialLightChain.State.PROVE_ACCOUNTS_TREE);Assert.that(!this._accountsRequest);this._busy=!0;const e=this._partialChain.getMissingAccountsPrefix(),t=this._partialChain.headHash;Log.d(LightConsensusAgent,`Requesting AccountsTreeChunk starting at ${e} from ${this._peer.peerAddress}`);this._accountsRequest={startPrefix:e,blockHash:t};this._peer.channel.getAccountsTreeChunk(t,e);this._peer.channel.expectMessage(Message.Type.ACCOUNTS_TREE_CHUNK,()=>{this._peer.channel.close(CloseType.GET_ACCOUNTS_TREE_CHUNK_TIMEOUT,"getAccountsTreeChunk timeout")},LightConsensusAgent.ACCOUNTS_TREE_CHUNK_REQUEST_TIMEOUT)}async _onAccountsTreeChunk(e){Log.d(LightConsensusAgent,`[ACCOUNTS-TREE-CHUNK] Received from ${this._peer.peerAddress}: blockHash=${e.blockHash}, proof=${e.chunk}`);if(!this._accountsRequest){Log.w(LightConsensusAgent,`Unsolicited accounts tree chunk received from ${this._peer.peerAddress}`);return}Assert.that(this._partialChain&&this._partialChain.state===PartialLightChain.State.PROVE_ACCOUNTS_TREE);const t=this._accountsRequest.startPrefix,s=this._accountsRequest.blockHash;this._accountsRequest=null;if(!e.hasChunk()){await this._partialChain.abort();this._partialChain=null;this._busy=!1;this._failedSyncs++;return}if(!s.equals(e.blockHash)||e.chunk.head.prefix<=t){Log.w(LightConsensusAgent,`Received AccountsTreeChunk for block != head or wrong start prefix from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INVALID_ACCOUNTS_TREE_CHUNK,"Invalid AccountsTreeChunk");return}const r=e.chunk;if(!r.verify()){Log.w(LightConsensusAgent,`Invalid AccountsTreeChunk received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INVALID_ACCOUNTS_TREE_CHUNK,"Invalid AccountsTreeChunk");return}const i=r.root();if(!(await this._partialChain.getBlock(s)).accountsHash.equals(i)){Log.w(LightConsensusAgent,`Invalid AccountsTreeChunk (root hash) received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH,"AccountsTreeChunk root hash mismatch");return}const n=await this._partialChain.pushAccountsTreeChunk(r);if(n<0){Log.e(`AccountsTree sync failed with error code ${n} from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH,"AccountsTreeChunk root hash mismatch")}this._busy=!1;this.syncBlockchain()["catch"](Log.w.tag(LightConsensusAgent))}_requestProofBlocks(){Assert.that(this._partialChain&&this._partialChain.state===PartialLightChain.State.PROVE_BLOCKS);this._lastChainHeight===this._partialChain.proofHeadHeight&&this._failedSyncs++;this._lastChainHeight=this._partialChain.proofHeadHeight;if(this._peer.channel.isExpectingMessage(Message.Type.INV))Log.e(LightConsensusAgent,"Duplicate _requestProofBlocks()");else{this._peer.channel.expectMessage(Message.Type.INV,()=>{this._peer.channel.close(CloseType.GET_BLOCKS_TIMEOUT,"getBlocks timeout")},BaseConsensusAgent.REQUEST_TIMEOUT);this._peer.channel.getBlocks(this._partialChain.getBlockLocators(),this._partialChain.numBlocksNeeded(),!1)}}_requestBlocks(){return this._syncing&&!this._onMainChain?super._requestBlocks(1):super._requestBlocks()}async _processBlock(e,t){if(t.height<this._chain.height-Policy.NUM_BLOCKS_VERIFICATION&&(!this._partialChain||this._partialChain.state!==PartialLightChain.State.PROVE_BLOCKS)){this._onMainChain=!1;await this._initChainProofSync();this.syncBlockchain()["catch"](Log.w.tag(LightConsensusAgent));return}this._onMainChain=!0;switch(await this._chain.pushBlock(t)){case FullChain.ERR_INVALID:this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK,"received invalid block");break;case FullChain.OK_EXTENDED:case FullChain.OK_REBRANCHED:this._syncing&&this._numBlocksExtending++;break;case FullChain.OK_FORKED:if(this._syncing){this._numBlocksForking++;this._forkHead=t}break;case LightChain.ERR_ORPHAN:this._onOrphanBlock(e,t)}}async _onKnownBlockAnnounced(e,t){if(this._syncing&&this._catchup){if(t.height<this._chain.height-Policy.NUM_BLOCKS_VERIFICATION&&(!this._partialChain||this._partialChain.state!==PartialLightChain.State.PROVE_BLOCKS)){this._onMainChain=!1;await this._initChainProofSync();this.syncBlockchain()["catch"](e=>Log.e(LightConsensusAgent,e));return}this._onMainChain=!0;FullConsensusAgent.prototype._onKnownBlockAnnounced.call(this,e,t)}}_onOrphanBlock(e,t){this._syncing&&!this._catchup?this._orphanedBlocks.push(t):super._onOrphanBlock(e,t)}getHeader(e){Assert.that(!this._headerRequest);return new Promise((t,s)=>{const r=new InvVector(InvVector.Type.BLOCK,e);this._headerRequest={hash:e,resolve:t,reject:s};this._peer.channel.getHeader([r]);this._peer.channel.expectMessage(Message.Type.HEADER,()=>{this._headerRequest=null;this._peer.channel.close(CloseType.GET_HEADER_TIMEOUT,"getHeader timeout");s(new Error("timeout"))},BaseConsensusAgent.REQUEST_TIMEOUT)})}_onHeader(e){const t=e.header,s=t.hash();if(!this._headerRequest){Log.w(NanoConsensusAgent,`Unsolicited header ${s} received from ${this._peer.peerAddress}, discarding`);return}const r=this._headerRequest.hash,i=this._headerRequest.resolve,n=this._headerRequest.reject;if(r.equals(s))i(t);else{Log.w(LightConsensusAgent,`Received wrong header from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.RECEIVED_WRONG_HEADER,"Received wrong header");n(new Error("Received wrong header"))}}_onClose(){this._partialChain&&this._partialChain.abort()["catch"](Log.w.tag(LightConsensusAgent));super._onClose()}get _chain(){return this._syncing&&!this._catchup&&this._partialChain?this._partialChain:this._blockchain}}LightConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT=45e3;LightConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT=1e4;LightConsensusAgent.ACCOUNTS_TREE_CHUNK_REQUEST_TIMEOUT=8e3;LightConsensusAgent.SYNC_ATTEMPTS_MAX=5;LightConsensusAgent.GETBLOCKS_VECTORS_MAX=500;Class.register(LightConsensusAgent);class LightConsensus extends Observable{constructor(e,t,s){super();this._blockchain=e;this._mempool=t;this._network=s;this._agents=new HashMap;this._timers=new Timers;this._established=!1;this._syncPeer=null;this._synchronizer=new Synchronizer;s.on("peer-joined",e=>this._onPeerJoined(e));s.on("peer-left",e=>this._onPeerLeft(e));e.on("head-changed",e=>{if(this._established)for(const t of this._agents.values())t.relayBlock(e)});t.on("transaction-added",e=>{if(this._established)for(const t of this._agents.values())t.relayTransaction(e)})}_onPeerJoined(e){const t=new LightConsensusAgent(this._blockchain,this._mempool,e);this._agents.put(e.id,t);t.on("close",()=>this._onPeerLeft(t.peer));t.on("sync",()=>this._onPeerSynced(t.peer));t.on("out-of-sync",()=>this._onPeerOutOfSync(t.peer));this.bubble(t,"sync-chain-proof","verify-chain-proof","sync-accounts-tree","verify-accounts-tree","sync-finalize");this._timers.resetTimeout("sync",this._syncBlockchain.bind(this),LightConsensus.SYNC_THROTTLE)}_onPeerLeft(e){if(e.equals(this._syncPeer)){Log.w(LightConsensus,`Peer ${e.peerAddress} left during sync`);this._syncPeer=null;this.fire("sync-failed",e.peerAddress)}this._agents.remove(e.id);this._syncBlockchain()}_syncBlockchain(){return this._synchronizer.push(()=>{if(this._syncPeer)return;const e=this._agents.values().filter(e=>!e.synced),t=ArrayUtils.randomElement(e);if(t){this._syncPeer=t.peer;this._established||this.fire("syncing",t.peer.peerAddress,e.length-1);Log.v(LightConsensus,`Syncing blockchain with peer ${t.peer.peerAddress}`);t.syncBlockchain()["catch"](Log.w.tag(LightConsensusAgent))}else if(this._agents.length>0){if(!this._established){Log.i(LightConsensus,`Synced with all connected peers (${this._agents.length}), consensus established.`);Log.d(LightConsensus,`Blockchain: height=${this._blockchain.height}, headHash=${this._blockchain.headHash}`);this._established=!0;this.fire("established")}}else{this._established=!1;this.fire("lost")}})}_onPeerSynced(e){if(e.equals(this._syncPeer)){Log.v(LightConsensus,`Finished sync with peer ${e.peerAddress}`);this._syncPeer=null;this.fire("sync-finished",e.peerAddress)}this._syncBlockchain()}_onPeerOutOfSync(e){Log.w(LightConsensus,`Peer ${e.peerAddress} out of sync, resyncing`);this._syncBlockchain()}get established(){return this._established}get blockchain(){return this._blockchain}get mempool(){return this._mempool}get network(){return this._network}}LightConsensus.SYNC_THROTTLE=1e3;Class.register(LightConsensus);class PartialLightChain extends LightChain{constructor(e,t,s,r){super(e.transaction(!1),t,s);this._proof=r;this._state=PartialLightChain.State.PROVE_CHAIN;this._partialTree=null;this._accountsTx=null;this._proofHead=null}pushProof(e){return this._synchronizer.push(()=>this._pushProof(e))}async _pushProof(e){const t=[];for(let n=0;n<e.prefix.length;++n){const s=e.prefix.blocks[n],r=s.hash();await this._store.getBlock(r)||s.header._pow||t.push(s.header)}for(let n=0;n<e.suffix.length;++n){const s=e.suffix.headers[n],r=s.hash();await this._store.getBlock(r)||s._pow||t.push(s)}await Crypto.manyPow(t);for(let n=0;n<e.prefix.length;n++){const t=e.prefix.blocks[n],s=t.hash(),r=await this._store.getBlock(s);if(r)e.prefix.blocks[n]=r.toLight();else if(!await t.verify(this._time)){Log.w(PartialLightChain,"Rejecting proof - prefix contains invalid block");return!1}}for(let n=0;n<e.suffix.length;n++){const t=e.suffix.headers[n],s=t.hash(),r=await this._store.getBlock(s);if(r)e.suffix.headers[n]=r.header;else if(!await t.verifyProofOfWork()){Log.w(PartialLightChain,"Rejecting proof - suffix contains invalid header");return!1}}if(!await e.verify()){Log.w(PartialLightChain,"Rejecting proof - verification failed");return!1}if(e.suffix.length!==Policy.K&&e.suffix.length!==e.head.height-1){Log.w(PartialLightChain,"Rejecting proof - invalid suffix length");return!1}if(e.prefix.denseSuffix().length<Policy.M&&e.prefix.length>0&&e.prefix.head.height>=Policy.M){Log.w(NanoChain,"Rejecting proof - dense suffix too short");return!1}const s=[];let r=e.prefix.head;for(const n of e.suffix.headers){const e=await r.getNextInterlink(n.target,n.version),t=e.hash();if(!n.interlinkHash.equals(t)){Log.w(PartialLightChain,"Rejecting proof - invalid interlink hash in proof suffix");return!1}r=new Block(n,e);s.push(r)}const i=await this.getChainProof();await BaseChain.isBetterProof(e,i,Policy.M)?await this._acceptProof(e,s):await this.abort();return!0}async _acceptProof(e,t){const s=e.prefix.head.hash(),r=await this._store.getChainData(s);if(!r||r.totalDifficulty<=0){await this._store.truncate();const t=e.prefix.denseSuffix();for(let r=0;r<e.prefix.length-t.length;r++){const t=e.prefix.blocks[r],s=t.hash(),i=new ChainData(t,-1,-1,!0);await this._store.putChainData(s,i)}const s=t[0];this._headHash=s.hash();this._mainChain=new ChainData(s,s.difficulty,BlockUtils.realDifficulty(await s.pow()),!0);await this._store.putChainData(this._headHash,this._mainChain);for(let e=1;e<t.length;e++){const s=t[e],r=await this._pushLightBlock(s);Assert.that(r>=0)}}for(const i of t){const e=await this._pushLightBlock(i);Assert.that(e>=0)}this._state=PartialLightChain.State.PROVE_ACCOUNTS_TREE;this._partialTree=await this._accounts.partialAccountsTree();this._proofHead=this._mainChain;await this._store.setHead(this.headHash);this._proof=e}async _pushLightBlock(e){const t=e.hash();if(await this._store.getBlock(t))return NanoChain.OK_KNOWN;const s=await this._store.getChainData(e.prevHash);return!s||s.totalDifficulty<=0?NanoChain.ERR_ORPHAN:this._pushBlockInternal(e,t,s)}async _pushBlockInternal(e,t,s){const r=s.totalDifficulty+e.difficulty,i=s.totalWork+BlockUtils.realDifficulty(await e.pow()),n=new ChainData(e,r,i);if(e.prevHash.equals(this.headHash)){n.onMainChain=!0;await this._store.putChainData(t,n);this._mainChain=n;this._headHash=t;if(this._proof){const t=this._proof.head.hash();e.prevHash.equals(t)&&(this._proof=await this._extendChainProof(this._proof,e.header))}this.fire("head-changed",this.head,!1);return NanoChain.OK_EXTENDED}if(r>this._mainChain.totalDifficulty){await this._rebranch(t,n);return NanoChain.OK_REBRANCHED}Log.v(NanoChain,`Creating/extending fork with block ${t}, height=${e.height}, totalDifficulty=${n.totalDifficulty}, totalWork=${n.totalWork}`);await this._store.putChainData(t,n);return NanoChain.OK_FORKED}_pushBlock(e){if(this._state===PartialLightChain.State.PROVE_BLOCKS){const t=e.hash();if(this._proofHead.head.prevHash.equals(t))return this._pushBlockBackwards(e);if(this._proofHead.head.hash().equals(t))return this._pushHeadBlock(e)}return FullChain.ERR_ORPHAN}async _pushHeadBlock(e){const t=e.hash();if(!e.isFull()){Log.w(PartialLightChain,"Rejecting block - body missing");return FullChain.ERR_INVALID}if(!await e.verify(this._time))return FullChain.ERR_INVALID;if(!await this._verifyInterlink(e)){Log.w(PartialLightChain,"Rejecting block - interlink verification failed");return FullChain.ERR_INVALID}const s=await this._store.getChainData(e.prevHash);if(!s){Log.w(PartialLightChain,"Rejecting block - unknown predecessor");return FullChain.ERR_ORPHAN}const r=s.head;if(!await e.isImmediateSuccessorOf(r)){Log.w(PartialLightChain,"Rejecting block - not a valid immediate successor");return FullChain.ERR_INVALID}const i=await this.getNextTarget(r);if(BlockUtils.isValidTarget(i)){if(e.nBits!==BlockUtils.targetToCompact(i)){Log.w(PartialLightChain,"Rejecting block - difficulty mismatch");return FullChain.ERR_INVALID}}else Log.w(PartialLightChain,"Skipping difficulty verification - not enough blocks available");const n=s.totalDifficulty+e.difficulty,o=s.totalWork+BlockUtils.realDifficulty(await e.pow()),a=new ChainData(e,n,o);if(!await this._prepend(t,a))return FullChain.ERR_INVALID;this._mainChain=a;this._proofHead=a;this._headHash=t;this.needsMoreBlocks()||await this._complete();return FullChain.OK_EXTENDED}async _pushBlockBackwards(e){const t=e.hash();if(!e.isFull()){Log.w(PartialLightChain,"Rejecting block - body missing");return FullChain.ERR_INVALID}if(!await e.verify(this._time))return FullChain.ERR_INVALID;if(!await this._verifyInterlink(e)){Log.w(PartialLightChain,"Rejecting block - interlink verification failed");return FullChain.ERR_INVALID}if(!await this._proofHead.head.isImmediateSuccessorOf(e)){Log.w(PartialLightChain,"Rejecting block - not a valid immediate predecessor");return FullChain.ERR_INVALID}const s=await this.getNextTarget(e);if(BlockUtils.isValidTarget(s)){if(this._proofHead.head.nBits!==BlockUtils.targetToCompact(s)){Log.w(PartialLightChain,"Rejecting block - difficulty mismatch");return FullChain.ERR_INVALID}}else Log.w(NanoChain,"Skipping difficulty verification - not enough blocks available");const r=this._proofHead.totalDifficulty-this._proofHead.head.difficulty,i=this._proofHead.totalWork-BlockUtils.realDifficulty(await this._proofHead.head.pow()),n=new ChainData(e,r,i);return await this._prepend(t,n)?FullChain.OK_EXTENDED:FullChain.ERR_INVALID}async _prepend(e,t){try{const e=new TransactionCache;await this._accountsTx.revertBlock(t.head,e)}catch(s){Log.w(PartialLightChain,`Rejecting block - failed to commit to AccountsTree: ${s.message||s}`);return!1}t.onMainChain=!0;await this._store.putChainData(e,t);this._proofHead=t;this.needsMoreBlocks()||await this._complete();return!0}async pushAccountsTreeChunk(e){if(this._state!==PartialLightChain.State.PROVE_ACCOUNTS_TREE)return PartialAccountsTree.Status.ERR_INCORRECT_PROOF;const t=await this._partialTree.pushChunk(e);if(t===PartialAccountsTree.Status.OK_COMPLETE){this._state=PartialLightChain.State.PROVE_BLOCKS;this._accountsTx=new Accounts(this._partialTree.transaction(!1))}return t}async _complete(){this._state=PartialLightChain.State.COMPLETE;if(this._accountsTx){await this._accountsTx.abort();this._accountsTx=null}const e=await this.getChainProof();this.fire("complete",e,this._headHash,this._mainChain)}async commit(){this._accountsTx&&await this._accountsTx.abort();const e=await JDB.JungleDB.commitCombined(this._store.tx,this._partialTree.tx);this._partialTree=null;const t=await this.getChainProof();this.fire("committed",t,this._headHash,this._mainChain);return e}async abort(){this._state=PartialLightChain.State.ABORTED;this._accountsTx&&await this._accountsTx.abort();this._partialTree&&await this._partialTree.abort();await this._store.abort();this.fire("aborted")}getMissingAccountsPrefix(){return this._partialTree?this._partialTree.missingPrefix:""}getBlockLocators(){return this._proofHead?[this._proofHead.head.hash()]:[this.headHash]}numBlocksNeeded(){if(!this._proofHead)return Policy.NUM_BLOCKS_VERIFICATION;let e=Policy.NUM_BLOCKS_VERIFICATION-(this.height-this._proofHead.head.height+1);this._proofHead.head.isFull()||e++;return e}needsMoreBlocks(){return this.numBlocksNeeded()>0}get state(){return this._state}get proofHeadHeight(){return this._proofHead.head.height}}PartialLightChain.State={ABORTED:-1,PROVE_CHAIN:0,PROVE_ACCOUNTS_TREE:1,PROVE_BLOCKS:2,COMPLETE:3};Class.register(PartialLightChain);class NanoChain extends BaseChain{constructor(e){super(ChainDataStore.createVolatile());this._time=e;this._proof=new ChainProof(new BlockChain([Block.GENESIS.toLight()]),new HeaderChain([]));this._headHash=Block.GENESIS.HASH;this._synchronizer=new Synchronizer;return this._init()}async _init(){this._mainChain=new ChainData(Block.GENESIS,Block.GENESIS.difficulty,BlockUtils.realDifficulty(await Block.GENESIS.pow()),!0);await this._store.putChainData(Block.GENESIS.HASH,this._mainChain);return this}pushProof(e){return this._synchronizer.push(()=>this._pushProof(e))}async _pushProof(e){const t=[];for(let n=0;n<e.prefix.length;++n){const s=e.prefix.blocks[n],r=s.hash();await this._store.getBlock(r)||s.header._pow||t.push(s.header)}for(let n=0;n<e.suffix.length;++n){const s=e.suffix.headers[n],r=s.hash();await this._store.getBlock(r)||s._pow||t.push(s)}await Crypto.manyPow(t);for(let n=0;n<e.prefix.length;n++){const t=e.prefix.blocks[n],s=t.hash(),r=await this._store.getBlock(s);if(r)e.prefix.blocks[n]=r.toLight();else if(!await t.verify(this._time)){Log.w(NanoChain,"Rejecting proof - prefix contains invalid block");return!1}}for(let n=0;n<e.suffix.length;n++){const t=e.suffix.headers[n],s=t.hash(),r=await this._store.getBlock(s);if(r)e.suffix.headers[n]=r.header;else if(!await t.verifyProofOfWork()){Log.w(NanoChain,"Rejecting proof - suffix contains invalid header");return!1}}if(!await e.verify()){Log.w(NanoChain,"Rejecting proof - verification failed");return!1}if(e.suffix.length!==Policy.K&&e.suffix.length!==e.head.height-1){Log.w(NanoChain,"Rejecting proof - invalid suffix length");return!1}if(e.prefix.denseSuffix().length<Policy.M&&e.prefix.length>0&&e.prefix.head.height>=Policy.M){Log.w(NanoChain,"Rejecting proof - dense suffix too short");return!1}const s=[];let r=e.prefix.head;for(const n of e.suffix.headers){const e=await r.getNextInterlink(n.target,n.version),t=e.hash();if(!n.interlinkHash.equals(t)){Log.w(NanoChain,"Rejecting proof - invalid interlink hash in proof suffix");return!1}r=new Block(n,e);s.push(r)}const i=await this.getChainProof();await BaseChain.isBetterProof(e,i,Policy.M)&&await this._acceptProof(e,s);return!0}async _acceptProof(e,t){this._proof=e;const s=e.prefix.head.hash(),r=await this._store.getChainData(s);if(!r||r.totalDifficulty<=0){await this._store.truncate();const t=e.prefix.denseSuffix();for(let r=0;r<e.prefix.length-t.length;r++){const t=e.prefix.blocks[r],s=t.hash(),i=new ChainData(t,-1,-1,!0);await this._store.putChainData(s,i)}const s=t[0];this._headHash=s.hash();this._mainChain=new ChainData(s,s.difficulty,BlockUtils.realDifficulty(await s.pow()),!0);await this._store.putChainData(this._headHash,this._mainChain);for(let e=1;e<t.length;e++){const s=t[e],r=await this._pushBlock(s);Assert.that(r>=0)}}for(const i of t){const e=await this._pushBlock(i);Assert.that(e>=0)}}async _pushBlock(e){const t=await e.hash();if(await this._store.getBlock(t))return NanoChain.OK_KNOWN;const s=await this._store.getChainData(e.prevHash);return!s||s.totalDifficulty<=0?NanoChain.ERR_ORPHAN:this._pushBlockInternal(e,t,s)}pushHeader(e){return this._synchronizer.push(()=>this._pushHeader(e))}async _pushHeader(e){const t=e.hash();if(await this._store.getBlock(t))return NanoChain.OK_KNOWN;if(!await e.verifyProofOfWork()){Log.w(NanoChain,"Rejecting header - PoW verification failed");return NanoChain.ERR_INVALID}const s=await this._store.getChainData(e.prevHash);if(!s||s.totalDifficulty<=0){Log.w(NanoChain,"Rejecting header - unknown predecessor");return NanoChain.ERR_ORPHAN}const r=s.head;if(!e.isImmediateSuccessorOf(r.header)){Log.w(NanoChain,"Rejecting header - not a valid successor");return NanoChain.ERR_INVALID}const i=await this.getNextTarget(r);if(BlockUtils.isValidTarget(i)){if(e.nBits!==BlockUtils.targetToCompact(i)){Log.w(NanoChain,"Rejecting header - difficulty mismatch");return NanoChain.ERR_INVALID}}else Log.w(NanoChain,"Skipping difficulty verification - not enough blocks available");const n=await r.getNextInterlink(e.target,e.version);if(!n.hash().equals(e.interlinkHash)){Log.w(NanoChain,"Rejecting header - interlink verification failed");return NanoChain.ERR_INVALID}const o=new Block(e,n);return this._pushBlockInternal(o,t,s)}async _pushBlockInternal(e,t,s){const r=s.totalDifficulty+e.difficulty,i=s.totalWork+BlockUtils.realDifficulty(await e.pow()),n=new ChainData(e,r,i);if(e.prevHash.equals(this.headHash)){n.onMainChain=!0;await this._store.putChainData(t,n);this._mainChain=n;this._headHash=t;if(this._proof){const t=this._proof.head.hash();e.prevHash.equals(t)&&(this._proof=await this._extendChainProof(this._proof,e.header))}this.fire("head-changed",this.head,!1);return NanoChain.OK_EXTENDED}if(r>this._mainChain.totalDifficulty){await this._rebranch(t,n);return NanoChain.OK_REBRANCHED}Log.v(NanoChain,`Creating/extending fork with block ${t}, height=${e.height}, totalDifficulty=${n.totalDifficulty}, totalWork=${n.totalWork}`);await this._store.putChainData(t,n);return NanoChain.OK_FORKED}async _rebranch(e,t){Log.v(NanoChain,`Rebranching to fork ${e}, height=${t.head.height}, totalDifficulty=${t.totalDifficulty}, totalWork=${t.totalWork}`);const s=[],r=[];let i=t,n=e;for(;!i.onMainChain;){s.push(i);r.push(n);n=i.head.prevHash;i=await this._store.getChainData(n);Assert.that(!!i,"Failed to find fork predecessor while rebranching")}Log.v(NanoChain,()=>`Found common ancestor ${n.toBase64()} ${s.length} blocks up`);let o=this._headHash,a=this._mainChain;for(;!o.equals(n);){a.onMainChain=!1;await this._store.putChainData(o,a);o=a.head.prevHash;a=await this._store.getChainData(o);Assert.that(!!a,"Failed to find main chain predecessor while rebranching")}this._proof=null;for(let c=s.length-1;c>=0;c--){const e=s[c];e.onMainChain=!0;await this._store.putChainData(r[c],e);this._mainChain=s[c];this._headHash=r[c];this.fire("head-changed",this.head,c>0)}}async getChainProof(){this._proof||(this._proof=await this._getChainProof());return this._proof}get head(){return this._mainChain.head}get headHash(){return this._headHash}get height(){return this._mainChain.head.height}}NanoChain.ERR_ORPHAN=-2;NanoChain.ERR_INVALID=-1;NanoChain.OK_KNOWN=0;NanoChain.OK_EXTENDED=1;NanoChain.OK_REBRANCHED=2;NanoChain.OK_FORKED=3;Class.register(NanoChain);class NanoConsensusAgent extends BaseConsensusAgent{constructor(e,t,s,r){super(r);this._blockchain=e;this._mempool=t;this._time=s;this._syncing=!1;this._orphanedBlocks=[];this._synchronizer=new Synchronizer;this._accountsRequest=null;this._transactionsRequest=null;this._blockRequest=null;this._requestedChainProof=!1;this._requestedTransactionReceipts=!1;r.channel.on("chain-proof",e=>this._onChainProof(e));r.channel.on("accounts-proof",e=>this._onAccountsProof(e));r.channel.on("transactions-proof",e=>this._onTransactionsProof(e));r.channel.on("transaction-receipts",e=>this._onTransactionReceipts(e));r.channel.on("get-chain-proof",e=>this._onGetChainProof(e));this._localSubscription=Subscription.BLOCKS_ONLY;this._peer.channel.subscribe(this._localSubscription)}subscribeAccounts(e){this._localSubscription=Subscription.fromAddresses(e);this._peer.channel.subscribe(Subscription.BLOCKS_ONLY);this._timers.resetTimeout("subscription-change",()=>{this._peer.channel.subscribe(this._localSubscription)},NanoConsensusAgent.SUBSCRIPTION_CHANGE_THROTTLE)}async syncBlockchain(){this._syncing=!0;if(await this._blockchain.getBlock(this._peer.headHash))this._syncFinished();else{this._requestChainProof();this.fire("sync-chain-proof",this._peer.peerAddress)}}_syncFinished(){this._syncing=!1;this._synced=!0;this.fire("sync")}_requestChainProof(){if(!this._requestedChainProof){this._peer.channel.getChainProof();this._requestedChainProof=!0;this._peer.channel.expectMessage(Message.Type.CHAIN_PROOF,()=>{this._peer.channel.close(CloseType.GET_CHAIN_PROOF_TIMEOUT,"getChainProof timeout")},NanoConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT,NanoConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT)}}async _onChainProof(e){Log.d(NanoConsensusAgent,`[CHAIN-PROOF] Received from ${this._peer.peerAddress}: ${e.proof}`);if(this._requestedChainProof){this._requestedChainProof=!1;this._syncing&&this.fire("verify-chain-proof",this._peer.peerAddress);if(await this._blockchain.pushProof(e.proof)){await this._applyOrphanedBlocks();this._syncing&&this._syncFinished()}else{Log.w(NanoConsensusAgent,`Invalid chain proof received from ${this._peer.peerAddress} - verification failed`);this._peer.channel.close(CloseType.INVALID_CHAIN_PROOF,"invalid chain proof")}}else Log.w(NanoConsensusAgent,`Unsolicited chain proof received from ${this._peer.peerAddress}`)}async _applyOrphanedBlocks(){for(const e of this._orphanedBlocks){if(await this._blockchain.pushHeader(e)===NanoChain.ERR_INVALID){this._peer.channel.close(CloseType.RECEIVED_INVALID_BLOCK,"received invalid block");break}}this._orphanedBlocks=[]}_doRequestData(e){const t=[],s=[];for(const r of e)r.type===InvVector.Type.BLOCK?t.push(r):s.push(r);this._peer.channel.getHeader(t);this._peer.channel.getData(s)}_getBlock(e,t=!1){return this._blockchain.getBlock(e,t)}_getTransaction(e){return Promise.resolve(this._mempool.getTransaction(e))}async _processHeader(e,t){const s=await this._blockchain.pushHeader(t);if(s===NanoChain.ERR_INVALID)this._peer.channel.close(CloseType.RECEIVED_INVALID_HEADER,"received invalid header");else if(s===NanoChain.ERR_ORPHAN){this._orphanedBlocks.push(t);this._synced&&this._requestChainProof()}}_processTransaction(e,t){this._localSubscription.matchesTransaction(t)||this._peer.channel.close(CloseType.RECEIVED_TRANSACTION_NOT_MATCHING_OUR_SUBSCRIPTION,"received transaction not matching our subscription");return this._mempool.pushTransaction(t)}async _onGetChainProof(e){const t=await this._blockchain.getChainProof();t&&this._peer.channel.chainProof(t)}getAccounts(e,t){return this._synchronizer.push(()=>this._getAccounts(e,t))}_getAccounts(e,t){Assert.that(null===this._accountsRequest);Log.d(NanoConsensusAgent,`Requesting AccountsProof for ${t} from ${this._peer.peerAddress}`);return new Promise((s,r)=>{this._accountsRequest={addresses:t,blockHash:e,resolve:s,reject:r};this._peer.channel.getAccountsProof(e,t);this._peer.channel.expectMessage(Message.Type.ACCOUNTS_PROOF,()=>{this._peer.channel.close(CloseType.GET_ACCOUNTS_PROOF_TIMEOUT,"getAccountsProof timeout");r(new Error("timeout"))},NanoConsensusAgent.ACCOUNTSPROOF_REQUEST_TIMEOUT)})}async _onAccountsProof(e){Log.d(NanoConsensusAgent,`[ACCOUNTS-PROOF] Received from ${this._peer.peerAddress}: blockHash=${e.blockHash}, proof=${e.proof} (${e.serializedSize} bytes)`);if(!this._accountsRequest){Log.w(NanoConsensusAgent,`Unsolicited accounts proof received from ${this._peer.peerAddress}`);return}const t=this._accountsRequest.addresses,s=this._accountsRequest.blockHash,r=this._accountsRequest.resolve,i=this._accountsRequest.reject;this._accountsRequest=null;if(!e.hasProof()){i(new Error("Accounts request was rejected"));return}if(!s.equals(e.blockHash)){Log.w(NanoConsensusAgent,`Received AccountsProof for invalid reference block from ${this._peer.peerAddress}`);i(new Error("Invalid reference block"));return}const n=e.proof;if(!n.verify()){Log.w(NanoConsensusAgent,`Invalid AccountsProof received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INVALID_ACCOUNTS_PROOF,"Invalid AccountsProof");i(new Error("Invalid AccountsProof"));return}const o=n.root();if(!(await this._blockchain.getBlock(s)).accountsHash.equals(o)){Log.w(NanoConsensusAgent,`Invalid AccountsProof (root hash) received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.ACCOUNTS_PROOF_ROOT_HASH_MISMATCH,"AccountsProof root hash mismatch");i(new Error("AccountsProof root hash mismatch"));return}const a=[];for(const h of t)try{const e=n.getAccount(h);a.push(e)}catch(c){Log.w(NanoConsensusAgent,`Incomplete AccountsProof received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INCOMPLETE_ACCOUNTS_PROOF,"Incomplete AccountsProof");i(new Error("Incomplete AccountsProof"));return}r(a)}getTransactionsProof(e,t){return this._synchronizer.push(()=>this._getTransactionsProof(e,t))}async _getTransactionsProof(e,t){Assert.that(null===this._transactionsRequest);Log.d(NanoConsensusAgent,`Requesting TransactionsProof for ${t} from ${this._peer.peerAddress}`);const s=await this._blockchain.getBlock(e);if(!s){Log.d(NanoConsensusAgent,`Requested block with hash ${e} not found`);return[]}return new Promise((r,i)=>{this._transactionsRequest={addresses:t,blockHash:e,header:s.header,resolve:r,reject:i};this._peer.channel.getTransactionsProof(e,t);this._peer.channel.expectMessage(Message.Type.TRANSACTIONS_PROOF,()=>{this._peer.channel.close(CloseType.GET_TRANSACTIONS_PROOF_TIMEOUT,"getTransactionsProof timeout");i(new Error("timeout"))},NanoConsensusAgent.TRANSACTIONSPROOF_REQUEST_TIMEOUT)})}async _onTransactionsProof(e){Log.d(NanoConsensusAgent,`[TRANSACTIONS-PROOF] Received from ${this._peer.peerAddress}: blockHash=${e.blockHash}, transactions=${e.transactions}, proof=${e.proof} (${e.serializedSize} bytes)`);if(!this._transactionsRequest){Log.w(NanoConsensusAgent,`Unsolicited transactions proof received from ${this._peer.peerAddress}`);return}const t=this._transactionsRequest.blockHash,s=this._transactionsRequest.header,r=this._transactionsRequest.resolve,i=this._transactionsRequest.reject;this._transactionsRequest=null;if(!e.hasProof()){Log.w(NanoConsensusAgent,`TransactionsProof request was rejected by ${this._peer.peerAddress}`);i(new Error("TransactionsProof request was rejected"));return}if(!t.equals(e.blockHash)){Log.w(NanoConsensusAgent,`Received TransactionsProof for invalid reference block from ${this._peer.peerAddress}`);i(new Error("Invalid reference block"));return}const n=e.proof;if(s.bodyHash.equals(n.root()))r(n.transactions);else{Log.w(NanoConsensusAgent,`Invalid TransactionsProof received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INVALID_TRANSACTION_PROOF,"Invalid TransactionsProof");i(new Error("Invalid TransactionsProof"))}}getTransactionReceipts(e){this._peer.channel.getTransactionReceipts(e);this._requestedTransactionReceipts=!0;this._peer.channel.expectMessage(Message.Type.TRANSACTION_RECEIPTS,()=>{this._peer.channel.close(CloseType.GET_TRANSACTION_RECEIPTS_TIMEOUT,"getTransactionReceipts timeout")},NanoConsensusAgent.TRANSACTIONS_REQUEST_TIMEOUT)}async _onTransactionReceipts(e){Log.d(NanoConsensusAgent,`[TRANSACTION-RECEIPTS] Received from ${this._peer.peerAddress}: ${e.transactionReceipts.length}`);if(this._requestedTransactionReceipts){this._requestedTransactionReceipts=!1;this.fire("transaction-receipts",e.transactionReceipts)}else Log.w(NanoConsensusAgent,`Unsolicited transaction receipts received from ${this._peer.peerAddress}`)}getFullBlock(e){return this._synchronizer.push(()=>this._getFullBlock(e))}_getFullBlock(e){Assert.that(null===this._blockRequest);Log.d(NanoConsensusAgent,`Requesting full block ${e} from ${this._peer.peerAddress}`);return new Promise((t,s)=>{this._blockRequest={hash:e,resolve:t,reject:s};const r=new InvVector(InvVector.Type.BLOCK,e);this._peer.channel.getData([r]);this._peer.channel.expectMessage([Message.Type.BLOCK,Message.Type.NOT_FOUND],()=>{s(new Error("timeout"))},BaseConsensusAgent.REQUEST_TIMEOUT)})}async _onBlock(e){if(!this._blockRequest){Log.w(NanoConsensusAgent,`Unsolicited block message received from ${this._peer.peerAddress}, discarding`);return}const t=this._blockRequest.hash,s=this._blockRequest.resolve,r=this._blockRequest.reject;this._blockRequest=null;if(e.block.hash().equals(t))if(await e.block.verify(this._time))s(e.block);else{Log.w(NanoConsensusAgent,`Invalid block received from ${this._peer.peerAddress}`);this._peer.channel.close(CloseType.INVALID_BLOCK,"Invalid block");r(new Error("Invalid block"))}else{Log.w(NanoConsensusAgent,`Unexpected block received from ${this._peer.peerAddress}, discarding`);r(new Error("Unexpected block"))}}_onNotFound(e){if(this._blockRequest&&1===e.vectors.length&&e.vectors[0].hash.equals(this._blockRequest.hash)){const e=this._blockRequest.reject;this._blockRequest=null;e(new Error("Block not found"))}super._onNotFound(e)}_onClose(){this._synchronizer.clear();super._onClose()}}NanoConsensusAgent.CHAINPROOF_REQUEST_TIMEOUT=45e3;NanoConsensusAgent.CHAINPROOF_CHUNK_TIMEOUT=1e4;NanoConsensusAgent.ACCOUNTSPROOF_REQUEST_TIMEOUT=5e3;NanoConsensusAgent.TRANSACTIONSPROOF_REQUEST_TIMEOUT=1e4;NanoConsensusAgent.TRANSACTIONS_REQUEST_TIMEOUT=15e3;NanoConsensusAgent.SUBSCRIPTION_CHANGE_THROTTLE=2e3;Class.register(NanoConsensusAgent);class NanoConsensus extends Observable{constructor(e,t,s){super();this._blockchain=e;this._mempool=t;this._network=s;this._agents=new HashMap;this._timers=new Timers;this._established=!1;this._syncPeer=null;this._addresses=[];s.on("peer-joined",e=>this._onPeerJoined(e));s.on("peer-left",e=>this._onPeerLeft(e));e.on("head-changed",e=>this._onHeadChanged(e))}_onPeerJoined(e){const t=new NanoConsensusAgent(this._blockchain,this._mempool,this._network.time,e);this._agents.put(e.id,t);t.on("close",()=>this._onPeerLeft(t.peer));t.on("sync",()=>this._onPeerSynced(t.peer));this.bubble(t,"sync-chain-proof","verify-chain-proof");t.subscribeAccounts(this._addresses);this._timers.resetTimeout("sync",this._syncBlockchain.bind(this),NanoConsensus.SYNC_THROTTLE)}_onPeerLeft(e){if(e.equals(this._syncPeer)){Log.w(NanoConsensus,`Peer ${e.peerAddress} left during sync`);this._syncPeer=null;this.fire("sync-failed",e.peerAddress)}this._agents.remove(e.id);this._syncBlockchain()}_syncBlockchain(){if(this._syncPeer)return;const e=this._agents.values().filter(e=>!e.synced),t=ArrayUtils.randomElement(e);if(t){this._syncPeer=t.peer;this._established||this.fire("syncing",t.peer.peerAddress,e.length-1);Log.v(NanoConsensus,`Syncing blockchain with peer ${t.peer.peerAddress}`);t.syncBlockchain()["catch"](Log.w.tag(NanoConsensusAgent))}else if(this._agents.length>0){if(!this._established){Log.i(NanoConsensus,`Synced with all connected peers (${this._agents.length}), consensus established.`);Log.d(NanoConsensus,`Blockchain: height=${this._blockchain.height}, headHash=${this._blockchain.headHash}`);this._established=!0;this.fire("established")}}else{this._established=!1;this.fire("lost")}}_onPeerSynced(e){if(e.equals(this._syncPeer)){Log.v(NanoConsensus,`Finished sync with peer ${e.peerAddress}`);this._syncPeer=null;this.fire("sync-finished",e.peerAddress)}this._syncBlockchain()}async _onHeadChanged(e){if(!this._established)return;for(const s of this._agents.values())s.relayBlock(e);const t=await this.getTransactionsProof(this._addresses,e.hash());this._mempool.changeHead(e,t)}async getAccount(e,t=null){return(await this.getAccounts([e],t))[0]}async getAccounts(e,t=null){t=t||this._blockchain.headHash;const s=this._agents.values().filter(e=>e.synced&&e.knowsBlock(t)&&!Services.isNanoNode(e.peer.peerAddress.services));for(const i of s)try{return await i.getAccounts(t,e)}catch(r){Log.w(NanoConsensus,`Failed to retrieve accounts ${e} from ${i.peer.peerAddress}: ${r}`)}throw new Error(`Failed to retrieve accounts ${e}`)}subscribeAccounts(e){this._addresses=e;for(const t of this._agents.values())t.subscribeAccounts(this._addresses)}async getTransactionsProof(e,t=null){t=t||this._blockchain.headHash;const s=this._agents.values().filter(e=>e.synced&&e.knowsBlock(t)&&!Services.isNanoNode(e.peer.peerAddress.services));for(const i of s)try{return await i.getTransactionsProof(t,e)}catch(r){Log.w(NanoConsensus,`Failed to retrieve transactions for ${e} from ${i.peer.peerAddress}: ${r}`)}throw new Error(`Failed to retrieve transactions for ${e}`)}async relayTransaction(e){if(!this._agents.values().some(e=>!Services.isNanoNode(e.peer.peerAddress.services)))throw new Error("Failed to relay transaction - only nano nodes connected");if(!await this._mempool.pushTransaction(e))throw new Error("Failed to relay transaction - mempool rejected transaction");let t=!1;for(const s of this._agents.values())t=s.relayTransaction(e)||t;if(!t)throw new Error("Failed to relay transaction - no agent relayed transaction")}async getFullBlock(e){const t=this._agents.values().filter(e=>e.synced&&!Services.isNanoNode(e.peer.peerAddress.services));for(const r of t)try{return await r.getFullBlock(e)}catch(s){Log.w(NanoConsensus,`Failed to retrieve full block ${e} from ${r.peer.peerAddress}: ${s}`)}throw new Error(`Failed to retrieve block ${e}`)}get established(){return this._established}get blockchain(){return this._blockchain}get mempool(){return this._mempool}get network(){return this._network}}NanoConsensus.SYNC_THROTTLE=1e3;Class.register(NanoConsensus);class NanoMempool extends Observable{constructor(e){super();this._blockchain=e;this._transactionsByHash=new HashMap;this._transactionSetByAddress=new HashMap}async pushTransaction(e){const t=e.hash();if(this._transactionsByHash.contains(t)){Log.v(Mempool,()=>`Ignoring known transaction ${t.toBase64()}`);return!1}if(this._blockchain.height>=e.validityStartHeight+Policy.TRANSACTION_VALIDITY_WINDOW){Log.v(Mempool,()=>`Ignoring expired transaction ${t.toBase64()}`);return!1}if(!e.verify())return!1;this._transactionsByHash.put(t,e);const s=this._transactionSetByAddress.get(e.sender)||new MempoolTransactionSet;s.add(e);this._transactionSetByAddress.put(e.sender,s);this.fire("transaction-added",e);return!0}getTransaction(e){return this._transactionsByHash.get(e)}getTransactions(e=5e3){return this._transactionsByHash.values().sort((e,t)=>e.compare(t)).slice(0,e)}getPendingTransactions(e){const t=this._transactionSetByAddress.get(e);return t?t.transactions:[]}changeHead(e,t){this._evictTransactions(e.height,t)}_evictTransactions(e,t){for(const s of this._transactionsByHash.values()){const t=s.hash();if(e>=s.validityStartHeight+Policy.TRANSACTION_VALIDITY_WINDOW){this._transactionsByHash.remove(t);const e=this._transactionSetByAddress.get(s.sender);e.remove(s);0===e.length&&this._transactionSetByAddress.remove(s.sender);this.fire("transaction-expired",s)}}for(const s of t){const e=s.hash();if(this._transactionsByHash.contains(e)){this._transactionsByHash.remove(e);const t=this._transactionSetByAddress.get(s.sender);t.remove(s);0===t.length&&this._transactionSetByAddress.remove(s.sender);this.fire("transaction-mined",s)}}}}Class.register(NanoMempool);class ConsensusDB extends JDB.JungleDB{static async getFull(){ConsensusDB._instance||(ConsensusDB._instance=await new ConsensusDB("full-consensus"));return ConsensusDB._instance}static async getLight(){ConsensusDB._instance||(ConsensusDB._instance=await new ConsensusDB("light-consensus"));return ConsensusDB._instance}constructor(e){super(e,ConsensusDB.VERSION);return this._init()}async _init(){AccountsTreeStore.initPersistent(this);ChainDataStore.initPersistent(this);TransactionStore.initPersistent(this);await this.connect();return this}}ConsensusDB._instance=null;ConsensusDB.VERSION=3;Class.register(ConsensusDB);class Consensus{static async full(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.FULL,Services.FULL);await e.initPersistent();const t=new Time,s=await ConsensusDB.getFull(),r=await Accounts.getPersistent(s),i=await TransactionStore.getPersistent(s),n=await FullChain.getPersistent(s,r,t,i),o=new Mempool(n,r),a=new Network(n,e,t);return new FullConsensus(n,o,a)}static async light(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.LIGHT,Services.LIGHT|Services.FULL);await e.initPersistent();const t=new Time,s=await ConsensusDB.getLight(),r=await Accounts.getPersistent(s),i=await LightChain.getPersistent(s,r,t),n=new Mempool(i,r),o=new Network(i,e,t);return new LightConsensus(i,n,o)}static async nano(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.NANO,Services.NANO|Services.LIGHT|Services.FULL);await e.initPersistent();const t=new Time,s=await new NanoChain(t),r=new NanoMempool(s),i=new Network(s,e,t);return new NanoConsensus(s,r,i)}static async volatileFull(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.FULL,Services.FULL);await e.initVolatile();const t=new Time,s=await Accounts.createVolatile(),r=await TransactionStore.createVolatile(),i=await FullChain.createVolatile(s,t,r),n=new Mempool(i,s),o=new Network(i,e,t);return new FullConsensus(i,n,o)}static async volatileLight(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.LIGHT,Services.LIGHT|Services.FULL);await e.initVolatile();const t=new Time,s=await Accounts.createVolatile(),r=await LightChain.createVolatile(s,t),i=new Mempool(r,s),n=new Network(r,e,t);return new LightConsensus(r,i,n)}static async volatileNano(e=NetworkConfig.getDefault()){await Crypto.prepareSyncCryptoWorker();e.services=new Services(Services.NANO,Services.NANO|Services.LIGHT|Services.FULL);await e.initVolatile();const t=new Time,s=await new NanoChain(t),r=new NanoMempool(s),i=new Network(s,e,t);return new NanoConsensus(s,r,i)}}Class.register(Consensus);Block.GENESIS=new Block(new BlockHeader(new Hash(null),new Hash(null),Hash.fromBase64("giOIYTBojKQPmBLq5msCgObOL3KnQ9CKrIGb5HWz7E8="),Hash.fromBase64("xexmOOk+2oLBIhwkCD+caw2FsifB0U6tXlles8Tycts="),BlockUtils.difficultyToCompact(1),1,0,104295,BlockHeader.Version.V1),new BlockInterlink([],new Hash(null)),new BlockBody(Address.fromBase64("AAAAAAAAAAAAAAAAAAAAAAAAAAA="),[]));Block.GENESIS.HASH=Hash.fromBase64("ykmTb222PK189z6x6dpT3Ul607cGjzFzECR4WXO+m+Y=");Accounts.GENESIS="AAIP7R94Gl77Xrk4xvszHLBXdCzC9AAAAHKYqT3gAAh2jadJcsL852C50iDDRIdlFjsNAAAAcpipPeAA";class Protocol{}Protocol.DUMB=0;Protocol.WS=1;Protocol.RTC=2;Class.register(Protocol);class Message{constructor(e){if(!NumberUtils.isUint64(e))throw new Error("Malformed type");this._type=e}static peekType(e){const t=e.readPos;e.readPos=4;const s=e.readVarUint();e.readPos=t;return s}static peekLength(e){const t=e.readPos;e.readPos=4;e.readVarUint();const s=e.readUint32();e.readPos=t;return s}static unserialize(e){Assert.that(0===e.readPos,"Message.unserialize() requires buf.readPos == 0");const t=e.readUint32(),s=e.readVarUint();e.readUint32();const r=e.readUint32();if(t!==Message.MAGIC)throw"Malformed magic";Message._writeChecksum(s,e,0);if(r!==CRC32.compute(e))throw new Error("Invalid checksum");return new Message(s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);Assert.that(0===e.writePos,"Message.serialize() requires buf.writePos == 0");e.writeUint32(Message.MAGIC);e.writeVarUint(this._type);e.writeUint32(this.serializedSize);e.writeUint32(0);return e}get serializedSize(){return 4+SerialBuffer.varUintSize(this._type)+4+4}_setChecksum(e){const t=CRC32.compute(e);Message._writeChecksum(this._type,e,t)}static _writeChecksum(e,t,s){const r=t.writePos;t.writePos=4+SerialBuffer.varUintSize(e)+4;t.writeUint32(s);t.writePos=r}get type(){return this._type}}Message.MAGIC=1107566658;Message.Type={VERSION:0,INV:1,GET_DATA:2,GET_HEADER:3,NOT_FOUND:4,GET_BLOCKS:5,BLOCK:6,HEADER:7,TX:8,MEMPOOL:9,REJECT:10,SUBSCRIBE:11,ADDR:20,GET_ADDR:21,PING:22,PONG:23,SIGNAL:30,GET_CHAIN_PROOF:40,CHAIN_PROOF:41,GET_ACCOUNTS_PROOF:42,ACCOUNTS_PROOF:43,GET_ACCOUNTS_TREE_CHUNK:44,ACCOUNTS_TREE_CHUNK:45,GET_TRANSACTIONS_PROOF:47,TRANSACTIONS_PROOF:48,GET_TRANSACTION_RECEIPTS:49,TRANSACTION_RECEIPTS:50,VERACK:90};Class.register(Message);class AddrMessage extends Message{constructor(e){super(Message.Type.ADDR);if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof PeerAddress)))throw"Malformed addresses";this._addresses=e}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(PeerAddress.unserialize(e));return new AddrMessage(s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint16(this._addresses.length);for(const t of this._addresses)t.serialize(e);super._setChecksum(e);return e}get serializedSize(){let e=super.serializedSize+2;for(const t of this._addresses)e+=t.serializedSize;return e}get addresses(){return this._addresses}}Class.register(AddrMessage);class BlockMessage extends Message{constructor(e){super(Message.Type.BLOCK);this._block=e}static unserialize(e){Message.unserialize(e);const t=Block.unserialize(e);return new BlockMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._block.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._block.serializedSize}get block(){return this._block}}Class.register(BlockMessage);class GetAddrMessage extends Message{constructor(e,t){super(Message.Type.GET_ADDR);if(!NumberUtils.isUint8(e))throw"Malformed protocolMask";if(!NumberUtils.isUint32(t))throw"Malformed serviceMask";this._protocolMask=e;this._serviceMask=t}static unserialize(e){Message.unserialize(e);const t=e.readUint8(),s=e.readUint32();return new GetAddrMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint8(this._protocolMask);e.writeUint32(this._serviceMask);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+1+4}get protocolMask(){return this._protocolMask}get serviceMask(){return this._serviceMask}}Class.register(GetAddrMessage);class GetBlocksMessage extends Message{constructor(e,t=BaseInventoryMessage.VECTORS_MAX_COUNT,s=GetBlocksMessage.Direction.FORWARD){super(Message.Type.GET_BLOCKS);if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!Hash.isHash(e)))throw"Malformed locators";if(!NumberUtils.isUint16(t))throw"Malformed maxInvSize";if(!NumberUtils.isUint8(s))throw"Malformed direction";this._locators=e;this._maxInvSize=t;this._direction=s}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let n=0;n<t;n++)s.push(Hash.unserialize(e));const r=e.readUint16(),i=e.readUint8();return new GetBlocksMessage(s,r,i)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint16(this._locators.length);for(const t of this._locators)t.serialize(e);e.writeUint16(this._maxInvSize);e.writeUint8(this._direction);super._setChecksum(e);return e}get serializedSize(){let e=super.serializedSize+2+1+2;for(const t of this._locators)e+=t.serializedSize;return e}get locators(){return this._locators}get direction(){return this._direction}get maxInvSize(){return this._maxInvSize}}GetBlocksMessage.Direction={FORWARD:1,BACKWARD:2};Class.register(GetBlocksMessage);class HeaderMessage extends Message{constructor(e){super(Message.Type.HEADER);this._header=e}static unserialize(e){Message.unserialize(e);const t=BlockHeader.unserialize(e);return new HeaderMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._header.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._header.serializedSize}get header(){return this._header}}Class.register(HeaderMessage);class InvVector{static fromBlock(e){const t=e.hash();return new InvVector(InvVector.Type.BLOCK,t)}static fromHeader(e){const t=e.hash();return new InvVector(InvVector.Type.BLOCK,t)}static fromTransaction(e){const t=e.hash();return new InvVector(InvVector.Type.TRANSACTION,t)}constructor(e,t){if(!Hash.isHash(t))throw"Malformed hash";this._type=e;this._hash=t}static unserialize(e){const t=InvVector.Type.unserialize(e),s=Hash.unserialize(e);return new InvVector(t,s)}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeUint32(this._type);this._hash.serialize(e);return e}equals(e){return e instanceof InvVector&&this._type===e.type&&this._hash.equals(e.hash)}hashCode(){return`${this._type}|${this._hash}`}toString(){return`InvVector{type=${this._type}, hash=${this._hash}}`}get serializedSize(){return 4+this._hash.serializedSize}get type(){return this._type}get hash(){return this._hash}}InvVector.Type={ERROR:0,TRANSACTION:1,BLOCK:2,unserialize:function(e){return e.readUint32()}};Class.register(InvVector);class BaseInventoryMessage extends Message{constructor(e,t){super(e);if(!t||!NumberUtils.isUint16(t.length)||t.some(e=>!(e instanceof InvVector))||t.length>BaseInventoryMessage.VECTORS_MAX_COUNT)throw"Malformed vectors";this._vectors=t}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint16(this._vectors.length);for(const t of this._vectors)t.serialize(e);super._setChecksum(e);return e}get serializedSize(){let e=super.serializedSize+2;for(const t of this._vectors)e+=t.serializedSize;return e}get vectors(){return this._vectors}}BaseInventoryMessage.VECTORS_MAX_COUNT=1e3;Class.register(BaseInventoryMessage);class InvMessage extends BaseInventoryMessage{constructor(e){super(Message.Type.INV,e)}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(InvVector.unserialize(e));return new InvMessage(s)}}Class.register(InvMessage);class GetDataMessage extends BaseInventoryMessage{constructor(e){super(Message.Type.GET_DATA,e)}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(InvVector.unserialize(e));return new GetDataMessage(s)}}Class.register(GetDataMessage);class GetHeaderMessage extends BaseInventoryMessage{constructor(e){super(Message.Type.GET_HEADER,e)}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(InvVector.unserialize(e));return new GetHeaderMessage(s)}}Class.register(GetHeaderMessage);class NotFoundMessage extends BaseInventoryMessage{constructor(e){super(Message.Type.NOT_FOUND,e)}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(InvVector.unserialize(e));return new NotFoundMessage(s)}}Class.register(NotFoundMessage);class MempoolMessage extends Message{constructor(){super(Message.Type.MEMPOOL)}static unserialize(e){Message.unserialize(e);return new MempoolMessage}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize}}Class.register(MempoolMessage);class PingMessage extends Message{constructor(e){super(Message.Type.PING);if(!NumberUtils.isUint32(e))throw"Malformed nonce";this._nonce=e}static unserialize(e){Message.unserialize(e);const t=e.readUint32();return new PingMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint32(this._nonce);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+4}get nonce(){return this._nonce}}Class.register(PingMessage);class PongMessage extends Message{constructor(e){super(Message.Type.PONG);if(!NumberUtils.isUint32(e))throw"Malformed nonce";this._nonce=e}static unserialize(e){Message.unserialize(e);const t=e.readUint32();return new PongMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint32(this._nonce);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+4}get nonce(){return this._nonce}}Class.register(PongMessage);class RejectMessage extends Message{constructor(e,t,s,r=new Uint8Array(0)){super(Message.Type.REJECT);if(!NumberUtils.isUint64(e))throw new Error("Malformed type");if(!NumberUtils.isUint8(t))throw new Error("Malformed code");if(StringUtils.isMultibyte(s)||s.length>255)throw new Error("Malformed reason");if(!(r instanceof Uint8Array&&NumberUtils.isUint16(r.byteLength)))throw new Error("Malformed extraData");this._messageType=e;this._code=t;this._reason=s;this._extraData=r}static unserialize(e){Message.unserialize(e);const t=e.readVarUint(),s=e.readUint8(),r=e.readVarLengthString(),i=e.readUint16(),n=e.read(i);return new RejectMessage(t,s,r,n)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeVarUint(this._messageType);e.writeUint8(this._code);e.writeVarLengthString(this._reason);e.writeUint16(this._extraData.byteLength);e.write(this._extraData);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+SerialBuffer.varUintSize(this._messageType)+1+SerialBuffer.varLengthStringSize(this._reason)+2+this._extraData.byteLength}get messageType(){return this._messageType}get code(){return this._code}get reason(){return this._reason}get extraData(){return this._extraData}}RejectMessage.Code={REJECT_MALFORMED:1,REJECT_INVALID:16,REJECT_OBSOLETE:17,REJECT_DOUBLE:18,REJECT_DUST:65,REJECT_INSUFFICIENT_FEE:66};Class.register(RejectMessage);class SignalMessage extends Message{constructor(e,t,s,r,i=0,n=new Uint8Array(0),o,a){super(Message.Type.SIGNAL);if(!(e instanceof PeerId))throw"Malformed senderId";if(!(t instanceof PeerId))throw"Malformed recipientId";if(!NumberUtils.isUint32(s))throw"Malformed nonce";if(!NumberUtils.isUint8(r))throw"Malformed ttl";if(!NumberUtils.isUint8(i))throw"Malformed flags";if(!(n instanceof Uint8Array&&NumberUtils.isUint16(n.byteLength)))throw"Malformed payload";const c=n.byteLength>0;if(c&&!(a instanceof Signature))throw"Malformed signature";if(c&&!(o instanceof PublicKey))throw"Malformed public key";this._senderId=e;this._recipientId=t;this._nonce=s;this._ttl=r;this._flags=i;this._payload=n;this._senderPubKey=c?o:undefined;this._signature=c?a:undefined}static unserialize(e){Message.unserialize(e);const t=PeerId.unserialize(e),s=PeerId.unserialize(e),r=e.readUint32(),i=e.readUint8(),n=e.readUint8(),o=e.readUint16(),a=e.read(o),c=o>0?PublicKey.unserialize(e):undefined,h=o>0?Signature.unserialize(e):undefined;return new SignalMessage(t,s,r,i,n,a,c,h)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._senderId.serialize(e);this._recipientId.serialize(e);e.writeUint32(this._nonce);e.writeUint8(this._ttl);e.writeUint8(this._flags);e.writeUint16(this._payload.byteLength);e.write(this._payload);if(this._payload.byteLength>0){this._senderPubKey.serialize(e);this._signature.serialize(e)}super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._senderId.serializedSize+this._recipientId.serializedSize+4+1+1+2+this._payload.byteLength+(this._payload.byteLength>0?this._senderPubKey.serializedSize:0)+(this._payload.byteLength>0?this._signature.serializedSize:0)}verifySignature(){return!!this._signature&&(this._signature.verify(this._senderPubKey,this._payload)&&this._senderId.equals(this._senderPubKey.toPeerId()))}get senderId(){return this._senderId}get recipientId(){return this._recipientId}get nonce(){return this._nonce}get ttl(){return this._ttl}get flags(){return this._flags}get payload(){return this._payload}get signature(){return this._signature}get senderPubKey(){return this._senderPubKey}hasPayload(){return this._payload.byteLength>0}isUnroutable(){return 0!=(this._flags&SignalMessage.Flag.UNROUTABLE)}isTtlExceeded(){return 0!=(this._flags&SignalMessage.Flag.TTL_EXCEEDED)}}SignalMessage.Flag={UNROUTABLE:1,TTL_EXCEEDED:2};Class.register(SignalMessage);class SubscribeMessage extends Message{constructor(e){super(Message.Type.SUBSCRIBE);this._subscription=e}static unserialize(e){Message.unserialize(e);const t=Subscription.unserialize(e);return new SubscribeMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._subscription.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._subscription.serializedSize}get subscription(){return this._subscription}}Class.register(SubscribeMessage);class TxMessage extends Message{constructor(e,t){super(Message.Type.TX);this._transaction=e;this._accountsProof=t}static unserialize(e){Message.unserialize(e);const t=Transaction.unserialize(e);if(1===e.readUint8()){const s=AccountsProof.unserialize(e);return new TxMessage(t,s)}return new TxMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._transaction.serialize(e);e.writeUint8(this._accountsProof?1:0);this._accountsProof&&this._accountsProof.serialize(e);super._setChecksum(e);return e}get serializedSize(){let e=super.serializedSize+this._transaction.serializedSize+1;this._accountsProof&&(e+=this._accountsProof.serializedSize);return e}get transaction(){return this._transaction}get hasAccountsProof(){return!!this._accountsProof}get accountsProof(){return this._accountsProof}}Class.register(TxMessage);class VersionMessage extends Message{constructor(e,t,s,r,i){super(Message.Type.VERSION);if(!NumberUtils.isUint32(e))throw new Error("Malformed version");if(!(t instanceof PeerAddress))throw new Error("Malformed peerAddress");if(!Hash.isHash(s))throw new Error("Malformed genesisHash");if(!Hash.isHash(r))throw new Error("Malformed headHash");if(!(i instanceof Uint8Array)||32!==i.byteLength)throw new Error("Malformed challenge nonce");this._version=e;this._peerAddress=t;this._genesisHash=s;this._headHash=r;this._challengeNonce=i}static unserialize(e){Message.unserialize(e);const t=e.readUint32(),s=PeerAddress.unserialize(e),r=Hash.unserialize(e),i=Hash.unserialize(e),n=e.read(VersionMessage.CHALLENGE_SIZE);return new VersionMessage(t,s,r,i,n)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint32(this._version);this._peerAddress.serialize(e);this._genesisHash.serialize(e);this._headHash.serialize(e);e.write(this._challengeNonce);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+4+this._peerAddress.serializedSize+this._genesisHash.serializedSize+this._headHash.serializedSize+VersionMessage.CHALLENGE_SIZE}get version(){return this._version}get peerAddress(){return this._peerAddress}get genesisHash(){return this._genesisHash}get headHash(){return this._headHash}get challengeNonce(){return this._challengeNonce}}VersionMessage.CHALLENGE_SIZE=32;Class.register(VersionMessage);class VerAckMessage extends Message{constructor(e,t){super(Message.Type.VERACK);this._publicKey=e;this._signature=t}static unserialize(e){Message.unserialize(e);const t=PublicKey.unserialize(e),s=Signature.unserialize(e);return new VerAckMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this.publicKey.serialize(e);this.signature.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._publicKey.serializedSize+this._signature.serializedSize}get publicKey(){return this._publicKey}get signature(){return this._signature}}Class.register(VerAckMessage);class AccountsProofMessage extends Message{constructor(e,t=null){super(Message.Type.ACCOUNTS_PROOF);if(!(e instanceof Hash))throw new Error("Malformed blockHash");if(t&&!(t instanceof AccountsProof))throw new Error("Malformed proof");this._blockHash=e;this._accountsProof=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e);let s=null;0!==e.readUint8()&&(s=AccountsProof.unserialize(e));return new AccountsProofMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeUint8(this.hasProof()?1:0);this.hasProof()&&this._accountsProof.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+1+this._blockHash.serializedSize+(this.hasProof()?this._accountsProof.serializedSize:0)}hasProof(){return!!this._accountsProof}get blockHash(){return this._blockHash}get proof(){return this._accountsProof}}Class.register(AccountsProofMessage);class GetAccountsProofMessage extends Message{constructor(e,t){super(Message.Type.GET_ACCOUNTS_PROOF);if(!(e&&e instanceof Hash))throw new Error("Malformed block hash");if(!t||!NumberUtils.isUint16(t.length)||t.length<1||t.some(e=>!(e instanceof Address)))throw new Error("Malformed addresses");this._blockHash=e;this._addresses=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e),s=e.readUint16(),r=[];for(let i=0;i<s;i++)r.push(Address.unserialize(e));return new GetAccountsProofMessage(t,r)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeUint16(this._addresses.length);for(const t of this._addresses)t.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._blockHash.serializedSize+2+this._addresses.reduce((e,t)=>e+t.serializedSize,0)}get addresses(){return this._addresses}get blockHash(){return this._blockHash}}Class.register(GetAccountsProofMessage);class ChainProofMessage extends Message{constructor(e){super(Message.Type.CHAIN_PROOF);if(!(e instanceof ChainProof))throw"Malformed chainProof";this._proof=e}static unserialize(e){Message.unserialize(e);const t=ChainProof.unserialize(e);return new ChainProofMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._proof.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._proof.serializedSize}get proof(){return this._proof}}Class.register(ChainProofMessage);class GetChainProofMessage extends Message{constructor(){super(Message.Type.GET_CHAIN_PROOF)}static unserialize(e){Message.unserialize(e);return new GetChainProofMessage}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize}}Class.register(GetChainProofMessage);class AccountsTreeChunkMessage extends Message{constructor(e,t=null){super(Message.Type.ACCOUNTS_TREE_CHUNK);if(!(e instanceof Hash))throw"Malformed blockHash";if(t&&!(t instanceof AccountsTreeChunk))throw"Malformed chunk";this._blockHash=e;this._accountsTreeChunk=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e);let s=null;0!==e.readUint8()&&(s=AccountsTreeChunk.unserialize(e));return new AccountsTreeChunkMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeUint8(this.hasChunk()?1:0);this.hasChunk()&&this._accountsTreeChunk.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+1+this._blockHash.serializedSize+(this.hasChunk()?this._accountsTreeChunk.serializedSize:0)}hasChunk(){return!!this._accountsTreeChunk}get blockHash(){return this._blockHash}get chunk(){return this._accountsTreeChunk}}Class.register(AccountsTreeChunkMessage);class GetAccountsTreeChunkMessage extends Message{constructor(e,t){super(Message.Type.GET_ACCOUNTS_TREE_CHUNK);if(!(e&&e instanceof Hash))throw"Malformed block hash";if(StringUtils.isMultibyte(t)||!NumberUtils.isUint8(t.length))throw"Malformed start prefix";this._blockHash=e;this._startPrefix=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e),s=e.readVarLengthString();return new GetAccountsTreeChunkMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeVarLengthString(this._startPrefix);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._blockHash.serializedSize+SerialBuffer.varLengthStringSize(this._startPrefix)}get blockHash(){return this._blockHash}get startPrefix(){return this._startPrefix}}Class.register(GetAccountsTreeChunkMessage);class TransactionsProofMessage extends Message{constructor(e,t=null){super(Message.Type.TRANSACTIONS_PROOF);if(!(e instanceof Hash))throw new Error("Malformed blockHash");if(t&&!(t instanceof TransactionsProof))throw new Error("Malformed proof");this._blockHash=e;this._proof=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e);let s=null;0!==e.readUint8()&&(s=TransactionsProof.unserialize(e));return new TransactionsProofMessage(t,s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeUint8(this.hasProof()?1:0);this.hasProof()&&this._proof.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+1+this._blockHash.serializedSize+(this.hasProof()?this._proof.serializedSize:0)}hasProof(){return!!this._proof}get blockHash(){return this._blockHash}get proof(){return this._proof}}Class.register(TransactionsProofMessage);class GetTransactionsProofMessage extends Message{constructor(e,t){super(Message.Type.GET_TRANSACTIONS_PROOF);if(!(e&&e instanceof Hash))throw new Error("Malformed block hash");if(!t||!NumberUtils.isUint16(t.length)||t.some(e=>!(e instanceof Address)))throw new Error("Malformed addresses");this._blockHash=e;this._addresses=t}static unserialize(e){Message.unserialize(e);const t=Hash.unserialize(e),s=e.readUint16(),r=[];for(let i=0;i<s;i++)r.push(Address.unserialize(e));return new GetTransactionsProofMessage(t,r)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._blockHash.serialize(e);e.writeUint16(this._addresses.length);for(const t of this._addresses)t.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._blockHash.serializedSize+2+this._addresses.reduce((e,t)=>e+t.serializedSize,0)}get addresses(){return this._addresses}get blockHash(){return this._blockHash}}Class.register(GetTransactionsProofMessage);class GetTransactionReceiptsMessage extends Message{constructor(e){super(Message.Type.GET_TRANSACTION_RECEIPTS);if(!(e instanceof Address))throw new Error("Malformed address");this._address=e}static unserialize(e){Message.unserialize(e);const t=Address.unserialize(e);return new GetTransactionReceiptsMessage(t)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);this._address.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+this._address.serializedSize}get address(){return this._address}}Class.register(GetTransactionReceiptsMessage);class TransactionReceiptsMessage extends Message{constructor(e){super(Message.Type.TRANSACTION_RECEIPTS);if(!e||!NumberUtils.isUint16(e.length)||e.some(e=>!(e instanceof TransactionReceipt))||e.length>TransactionReceiptsMessage.RECEIPTS_MAX_COUNT)throw new Error("Malformed transactionReceipts");this._transactionReceipts=e}static unserialize(e){Message.unserialize(e);const t=e.readUint16(),s=[];for(let r=0;r<t;++r)s.push(TransactionReceipt.unserialize(e));return new TransactionReceiptsMessage(s)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeUint16(this._transactionReceipts.length);for(const t of this._transactionReceipts)t.serialize(e);super._setChecksum(e);return e}get serializedSize(){return super.serializedSize+2+this._transactionReceipts.reduce((e,t)=>e+t.serializedSize,0)}get transactionReceipts(){return this._transactionReceipts}}Class.register(TransactionReceiptsMessage);TransactionReceiptsMessage.RECEIPTS_MAX_COUNT=500;class MessageFactory{static peekType(e){return Message.peekType(e)}static parse(e){const t=Message.peekType(e),s=MessageFactory.CLASSES[t];if(!s||!s.unserialize)throw new Error(`Invalid message type: ${t}`);return s.unserialize(e)}}MessageFactory.CLASSES={};MessageFactory.CLASSES[Message.Type.VERSION]=VersionMessage;MessageFactory.CLASSES[Message.Type.INV]=InvMessage;MessageFactory.CLASSES[Message.Type.GET_DATA]=GetDataMessage;MessageFactory.CLASSES[Message.Type.GET_HEADER]=GetHeaderMessage;MessageFactory.CLASSES[Message.Type.NOT_FOUND]=NotFoundMessage;MessageFactory.CLASSES[Message.Type.BLOCK]=BlockMessage;MessageFactory.CLASSES[Message.Type.HEADER]=HeaderMessage;MessageFactory.CLASSES[Message.Type.TX]=TxMessage;MessageFactory.CLASSES[Message.Type.GET_BLOCKS]=GetBlocksMessage;MessageFactory.CLASSES[Message.Type.MEMPOOL]=MempoolMessage;MessageFactory.CLASSES[Message.Type.REJECT]=RejectMessage;MessageFactory.CLASSES[Message.Type.SUBSCRIBE]=SubscribeMessage;MessageFactory.CLASSES[Message.Type.ADDR]=AddrMessage;MessageFactory.CLASSES[Message.Type.GET_ADDR]=GetAddrMessage;MessageFactory.CLASSES[Message.Type.PING]=PingMessage;MessageFactory.CLASSES[Message.Type.PONG]=PongMessage;MessageFactory.CLASSES[Message.Type.SIGNAL]=SignalMessage;MessageFactory.CLASSES[Message.Type.GET_CHAIN_PROOF]=GetChainProofMessage;MessageFactory.CLASSES[Message.Type.CHAIN_PROOF]=ChainProofMessage;MessageFactory.CLASSES[Message.Type.GET_ACCOUNTS_PROOF]=GetAccountsProofMessage;MessageFactory.CLASSES[Message.Type.ACCOUNTS_PROOF]=AccountsProofMessage;MessageFactory.CLASSES[Message.Type.GET_ACCOUNTS_TREE_CHUNK]=GetAccountsTreeChunkMessage;MessageFactory.CLASSES[Message.Type.ACCOUNTS_TREE_CHUNK]=AccountsTreeChunkMessage;MessageFactory.CLASSES[Message.Type.GET_TRANSACTIONS_PROOF]=GetTransactionsProofMessage;MessageFactory.CLASSES[Message.Type.TRANSACTIONS_PROOF]=TransactionsProofMessage;MessageFactory.CLASSES[Message.Type.GET_TRANSACTION_RECEIPTS]=GetTransactionReceiptsMessage;MessageFactory.CLASSES[Message.Type.TRANSACTION_RECEIPTS]=TransactionReceiptsMessage;MessageFactory.CLASSES[Message.Type.VERACK]=VerAckMessage;Class.register(MessageFactory);class WebRtcConnector extends Observable{constructor(e){super();this._networkConfig=e;this._connectors=new HashMap;this._timers=new Timers}connect(e,t){if(e.protocol!==Protocol.RTC)throw"Malformed peerAddress";const s=e.peerId;if(this._connectors.contains(s))return!1;const r=new OutboundPeerConnector(this._networkConfig,e,t);r.on("connection",e=>this._onConnection(e,s));this._connectors.put(s,r);this._timers.setTimeout(`connect_${s}`,()=>{this._connectors.remove(s);this._timers.clearTimeout(`connect_${s}`);this.fire("error",e,"timeout")},WebRtcConnector.CONNECT_TIMEOUT);return!0}isValidSignal(e){return this._connectors.contains(e.senderId)&&this._connectors.get(e.senderId).nonce===e.nonce}onSignal(e,t){if(t.isUnroutable()||t.isTtlExceeded()){if(this.isValidSignal(t)&&this._connectors.get(t.senderId)instanceof OutboundPeerConnector){const e=this._connectors.get(t.senderId).peerAddress;this._connectors.remove(t.senderId);this._timers.clearTimeout(`connect_${t.senderId}`);const s=t.isUnroutable()?"unroutable":"ttl exceeded";this.fire("error",e,s)}return}let s;try{s=JSON.parse(BufferUtils.toAscii(t.payload))}catch(r){Log.e(WebRtcConnector,`Failed to parse signal payload from ${t.senderId}`);return}if(s)if("offer"===s.type){let r=this._connectors.get(t.senderId);if(r){if(t.recipientId.compare(t.senderId)>0){Log.d(WebRtcConnector,`Simultaneous connection, discarding offer from ${t.senderId} (<${t.recipientId})`);return}if(r instanceof InboundPeerConnector){Log.w(WebRtcConnector,`Duplicate offer received from ${t.senderId}`);r.onSignal(s);return}Log.d(WebRtcConnector,`Simultaneous connection, accepting offer from ${t.senderId} (>${t.recipientId})`);this._timers.clearTimeout(`connect_${t.senderId}`);this.fire("error",r.peerAddress,"simultaneous inbound connection")}(r=new InboundPeerConnector(this._networkConfig,e,t.senderId,s)).on("connection",e=>this._onConnection(e,t.senderId));this._connectors.put(t.senderId,r);this._timers.setTimeout(`connect_${t.senderId}`,()=>{this._timers.clearTimeout(`connect_${t.senderId}`);this._connectors.remove(t.senderId)},WebRtcConnector.CONNECT_TIMEOUT)}else this._connectors.contains(t.senderId)&&this._connectors.get(t.senderId).onSignal(s);else Log.d(WebRtcConnector,`Discarding signal from ${t.senderId} - empty payload`)}_onConnection(e,t){this._timers.clearTimeout(`connect_${t}`);e.on("close",()=>this._onClose(t));this.fire("connection",e)}_onClose(e){this._connectors.remove(e);this._timers.clearTimeout(`connect_${e}`)}}WebRtcConnector.CONNECT_TIMEOUT=5e3;Class.register(WebRtcConnector);class PeerConnector extends Observable{constructor(e,t,s,r){super();this._networkConfig=e;this._signalChannel=t;this._peerId=s;this._peerAddress=r;this._nonce=NumberUtils.randomUint32();this._rtcConnection=WebRtcFactory.newPeerConnection(this._networkConfig.rtcConfig);this._rtcConnection.onicecandidate=(e=>this._onIceCandidate(e));this._lastIceCandidate=null;this._iceCandidateQueue=[]}onSignal(e){e.sdp?this._rtcConnection.setRemoteDescription(WebRtcFactory.newSessionDescription(e)).then(()=>{"offer"===e.type&&this._rtcConnection.createAnswer().then(e=>this._onDescription(e))["catch"](Log.e.tag(PeerConnector));this._handleCandidateQueue()["catch"](Log.w.tag(PeerConnector))})["catch"](Log.e.tag(PeerConnector)):e.candidate&&this._addIceCandidate(e)["catch"](Log.w.tag(PeerConnector))}_addIceCandidate(e){this._lastIceCandidate=WebRtcFactory.newIceCandidate(e);if(!this._rtcConnection.remoteDescription||!this._rtcConnection.remoteDescription.type){this._iceCandidateQueue.push(e);return Promise.resolve()}return this._rtcConnection.addIceCandidate(this._lastIceCandidate)["catch"](Log.e.tag(PeerConnector))}async _handleCandidateQueue(){for(const e of this._iceCandidateQueue)await this._addIceCandidate(e);this._iceCandidateQueue=[]}_signal(e){const t=BufferUtils.fromAscii(JSON.stringify(e)),s=this._networkConfig.keyPair,r=this._networkConfig.peerId;this._signalChannel.signal(r,this._peerId,this._nonce,Network.SIGNAL_TTL_INITIAL,0,t,s.publicKey,Signature.create(s.privateKey,s.publicKey,t))}_onIceCandidate(e){null!==e.candidate&&this._signal(e.candidate)}_onDescription(e){this._rtcConnection.setLocalDescription(e).then(()=>this._signal(this._rtcConnection.localDescription))["catch"](Log.e.tag(PeerConnector))}_onDataChannel(e){const t=new WebRtcDataChannel(e.channel||e.target);let s=null;if(this._lastIceCandidate)try{s=WebRtcUtils.candidateToNetAddress(this._lastIceCandidate)}catch(i){Log.w(PeerConnector,`Failed to parse IP from ICE candidate: ${this._lastIceCandidate}`)}else Log.w(PeerConnector,"No ICE candidate seen for inbound connection");const r=new NetworkConnection(t,Protocol.RTC,s,this._peerAddress);this.fire("connection",r)}get nonce(){return this._nonce}get peerAddress(){return this._peerAddress}}Class.register(PeerConnector);class OutboundPeerConnector extends PeerConnector{constructor(e,t,s){super(e,s,t.peerId,t);this._peerAddress=t;const r=this._rtcConnection.createDataChannel("data-channel");r.binaryType="arraybuffer";r.onopen=(e=>this._onDataChannel(e));this._rtcConnection.createOffer().then(e=>this._onDescription(e))["catch"](Log.e.tag(OutboundPeerConnector))}}Class.register(OutboundPeerConnector);class InboundPeerConnector extends PeerConnector{constructor(e,t,s,r){super(e,t,s,null);this._rtcConnection.ondatachannel=(e=>{e.channel.onopen=(e=>this._onDataChannel(e))});this.onSignal(r)}}Class.register(InboundPeerConnector);class WebRtcDataChannel extends DataChannel{constructor(e){super();Assert.that(e.ordered,"WebRtc data channel not ordered");this._channel=e;this._channel.onmessage=(e=>this._onMessage(e.data||e));this._channel.onclose=(()=>this._onClose());this._channel.onerror=(e=>this.fire("error",e,this))}_onMessage(e){if(e instanceof Blob){const t=new FileReader;t.onloadend=(()=>super._onMessage(t.result));t.readAsArrayBuffer(e)}else super._onMessage(e)}sendChunk(e){this._channel.send(e)}close(){this._channel.close()}get readyState(){return DataChannel.ReadyState.fromString(this._channel.readyState)}}Class.register(WebRtcDataChannel);class WebRtcUtils{static candidateToNetAddress(e){const t=e.candidate.split(" ");return t.length<6?null:NetAddress.fromIP(t[4])}}Class.register(WebRtcUtils);class WebSocketConnector extends Observable{constructor(e){super();if(e.peerAddress.protocol===Protocol.WS){this._wss=WebSocketFactory.newWebSocketServer(e);this._wss.on("connection",e=>this._onConnection(e));Log.d(WebSocketConnector,`WebSocketConnector listening on port ${e.peerAddress.port}`)}this._timers=new Timers}connect(e){if(e.protocol!==Protocol.WS)throw"Malformed peerAddress";const t=`connect_${e}`;if(this._timers.timeoutExists(t)){Log.w(WebSocketConnector,`Already connecting to ${e}`);return!1}const s=WebSocketFactory.newWebSocket(`wss://${e.host}:${e.port}`,{handshakeTimeout:WebSocketConnector.CONNECT_TIMEOUT});s.binaryType="arraybuffer";s.onopen=(()=>{this._timers.clearTimeout(t);s.onerror=(()=>{});const r=s._socket&&s._socket.remoteAddress?NetAddress.fromIP(s._socket.remoteAddress):null,i=new NetworkConnection(new WebSocketDataChannel(s),Protocol.WS,r,e);this.fire("connection",i)});s.onerror=(s=>{this._timers.clearTimeout(t);this.fire("error",e,s)});this._timers.setTimeout(t,()=>{this._timers.clearTimeout(t);s.onerror=(()=>{});s.onopen=(()=>{Log.w(WebSocketConnector,`Connection to ${e} succeeded after timeout - closing it`);s.close()});this.fire("error",e,"timeout")},WebSocketConnector.CONNECT_TIMEOUT);return!0}_onConnection(e){const t=NetAddress.fromIP(e._socket.remoteAddress),s=new NetworkConnection(new WebSocketDataChannel(e),Protocol.WS,t,null);this.fire("connection",s)}}WebSocketConnector.CONNECT_TIMEOUT=5e3;Class.register(WebSocketConnector);class WebSocketDataChannel extends DataChannel{constructor(e){super();this._ws=e;this._ws.onmessage=(e=>this._onMessage(e.data||e));this._ws.onclose=(()=>this._onClose());this._ws.onerror=(e=>this.fire("error",e))}close(){this._ws.close()}sendChunk(e){this._ws.send(e)}get readyState(){return this._ws.readyState}}Class.register(WebSocketDataChannel);class NetAddress{static fromIP(e){const t=NetUtils.sanitizeIP(e);return new NetAddress(t)}constructor(e){this._ip=e}static unserialize(e){const t=e.readVarLengthString();return t?NetAddress.fromIP(t):NetAddress.UNSPECIFIED}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).writeVarLengthString(this._ip);return e}get serializedSize(){return SerialBuffer.varLengthStringSize(this._ip)}equals(e){return e instanceof NetAddress&&this._ip===e.ip}hashCode(){return this.toString()}toString(){return`${this._ip}`}get ip(){return this._ip}isPseudo(){return!this._ip||NetAddress.UNKNOWN.equals(this)}isPrivate(){return this.isPseudo()||NetUtils.isPrivateIP(this._ip)}}NetAddress.UNSPECIFIED=new NetAddress("");NetAddress.UNKNOWN=new NetAddress("<unknown>");Class.register(NetAddress);class PeerId extends Primitive{static copy(e){if(!e)return e;const t=new Uint8Array(e._obj);return new PeerId(t)}constructor(e){super(e,Uint8Array,PeerId.SERIALIZED_SIZE)}static unserialize(e){return new PeerId(e.read(PeerId.SERIALIZED_SIZE))}serialize(e){(e=e||new SerialBuffer(this.serializedSize)).write(this._obj);return e}subarray(e,t){return this._obj.subarray(e,t)}get serializedSize(){return PeerId.SERIALIZED_SIZE}equals(e){return e instanceof PeerId&&super.equals(e)}toString(){return this.toHex()}static fromBase64(e){return new PeerId(BufferUtils.fromBase64(e))}static fromHex(e){return new PeerId(BufferUtils.fromHex(e))}}PeerId.SERIALIZED_SIZE=16;Class.register(PeerId);class PeerAddress{constructor(e,t,s,r,i,n,o){if(!NumberUtils.isUint8(n))throw new Error("Malformed distance");if(null!==i&&!(i instanceof PublicKey))throw new Error("Malformed publicKey");this._protocol=e;this._services=t;this._timestamp=s;this._netAddress=r||NetAddress.UNSPECIFIED;this._publicKey=i;this._distance=n;this._signature=o}static unserialize(e){const t=e.readUint8();switch(t){case Protocol.WS:return WsPeerAddress.unserialize(e);case Protocol.RTC:return RtcPeerAddress.unserialize(e);case Protocol.DUMB:return DumbPeerAddress.unserialize(e);default:throw`Malformed PeerAddress protocol ${t}`}}serialize(e){if(!this._publicKey)throw new Error("PeerAddress without publicKey may not be serialized.");if(!this._signature)throw new Error("PeerAddress without signature may not be serialized.");(e=e||new SerialBuffer(this.serializedSize)).writeUint8(this._protocol);e.writeUint32(this._services);e.writeUint64(this._timestamp);this._netAddress.isPrivate()?NetAddress.UNSPECIFIED.serialize(e):this._netAddress.serialize(e);this._publicKey.serialize(e);e.writeUint8(this._distance);this._signature.serialize(e);return e}serializeContent(e){(e=e||new SerialBuffer(this.serializedContentSize)).writeUint8(this._protocol);e.writeUint32(this._services);e.writeUint64(this._timestamp);return e}get serializedSize(){return 13+this._netAddress.serializedSize+this._publicKey.serializedSize+1+this._signature.serializedSize}get serializedContentSize(){return 13}equals(e){return e instanceof PeerAddress&&this.protocol===e.protocol&&(!this.publicKey||!e.publicKey||this.publicKey.equals(e.publicKey))&&(!this.peerId||!e.peerId||this.peerId.equals(e.peerId))}verifySignature(){this._signatureVerified===undefined&&(this._signatureVerified=this.signature.verify(this.publicKey,this.serializeContent()));return this._signatureVerified}get protocol(){return this._protocol}get services(){return this._services}get timestamp(){return this._timestamp}get netAddress(){return this._netAddress.isPseudo()?null:this._netAddress}set netAddress(e){this._netAddress=e||NetAddress.UNSPECIFIED}get publicKey(){return this._publicKey}get peerId(){return this._publicKey?this._publicKey.toPeerId():null}get distance(){return this._distance}get signature(){return this._signature}set signature(e){if(0===this._distance){this._signature=e;this._signatureVerified=undefined}}set distance(e){this._distance=e}isSeed(){return 0===this._timestamp}exceedsAge(){if(this.isSeed())return!1;const e=Date.now()-this.timestamp;switch(this.protocol){case Protocol.WS:return e>PeerAddressBook.MAX_AGE_WEBSOCKET;case Protocol.RTC:return e>PeerAddressBook.MAX_AGE_WEBRTC;case Protocol.DUMB:return e>PeerAddressBook.MAX_AGE_DUMB}return!1}}Class.register(PeerAddress);class WsPeerAddress extends PeerAddress{static seed(e,t,s){const r=s?new PublicKey(BufferUtils.fromHex(s)):null;return new WsPeerAddress(Services.FULL,0,NetAddress.UNSPECIFIED,r,0,e,t)}constructor(e,t,s,r,i,n,o,a){super(Protocol.WS,e,t,s,r,i,a);if(!n)throw new Error("Malformed host");if(!NumberUtils.isUint16(o))throw new Error("Malformed port");this._host=n;this._port=o}static unserialize(e){const t=e.readUint32(),s=e.readUint64(),r=NetAddress.unserialize(e),i=PublicKey.unserialize(e),n=e.readUint8(),o=Signature.unserialize(e),a=e.readVarLengthString(),c=e.readUint16();return new WsPeerAddress(t,s,r,i,n,a,c,o)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);e.writeVarLengthString(this._host);e.writeUint16(this._port);return e}serializeContent(e){e=e||new SerialBuffer(this.serializedContentSize);super.serializeContent(e);e.writeVarLengthString(this._host);e.writeUint16(this._port);return e}globallyReachable(){return NetUtils.hostGloballyReachable(this.host)}get serializedSize(){return super.serializedSize+SerialBuffer.varLengthStringSize(this._host)+2}get serializedContentSize(){return super.serializedContentSize+SerialBuffer.varLengthStringSize(this._host)+2}equals(e){return super.equals(e)&&e instanceof WsPeerAddress&&(!!this.peerId&&!!e.peerId||this._host===e.host&&this._port===e.port)}hashCode(){return this.peerId?`wss:///${this.peerId}`:`wss://${this._host}:${this._port}/`}toString(){return`wss://${this._host}:${this._port}/${this.peerId?this.peerId:""}`}withoutId(){return new WsPeerAddress(this.services,this.timestamp,this.netAddress,null,this.distance,this.host,this.port)}get host(){return this._host}get port(){return this._port}}Class.register(WsPeerAddress);class RtcPeerAddress extends PeerAddress{constructor(e,t,s,r,i,n){super(Protocol.RTC,e,t,s,r,i,n)}static unserialize(e){const t=e.readUint32(),s=e.readUint64(),r=NetAddress.unserialize(e),i=PublicKey.unserialize(e),n=e.readUint8(),o=Signature.unserialize(e);return new RtcPeerAddress(t,s,r,i,n,o)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);return e}get serializedSize(){return super.serializedSize}equals(e){return super.equals(e)&&e instanceof RtcPeerAddress}hashCode(){return this.toString()}toString(){return`rtc:///${this.peerId}`}}Class.register(RtcPeerAddress);class DumbPeerAddress extends PeerAddress{constructor(e,t,s,r,i,n){super(Protocol.DUMB,e,t,s,r,i,n)}static unserialize(e){const t=e.readUint32(),s=e.readUint64(),r=NetAddress.unserialize(e),i=PublicKey.unserialize(e),n=e.readUint8(),o=Signature.unserialize(e);return new DumbPeerAddress(t,s,r,i,n,o)}serialize(e){e=e||new SerialBuffer(this.serializedSize);super.serialize(e);return e}get serializedSize(){return super.serializedSize}equals(e){return super.equals(e)&&e instanceof DumbPeerAddress}hashCode(){return this.toString()}toString(){return`dumb:///${this.peerId}`}}Class.register(DumbPeerAddress);class PeerAddressState{constructor(e){this.peerAddress=e;this.state=PeerAddressState.NEW;this.lastConnected=-1;this.bannedUntil=-1;this.banBackoff=PeerAddressBook.INITIAL_FAILED_BACKOFF;this._signalRouter=new SignalRouter(e);this._failedAttempts=0;this._closeTypes=new Map}get signalRouter(){return this._signalRouter}get maxFailedAttempts(){switch(this.peerAddress.protocol){case Protocol.RTC:return PeerAddressBook.MAX_FAILED_ATTEMPTS_RTC;case Protocol.WS:return PeerAddressBook.MAX_FAILED_ATTEMPTS_WS;default:return 0}}get failedAttempts(){return this._signalRouter.bestRoute?this._signalRouter.bestRoute.failedAttempts:this._failedAttempts}set failedAttempts(e){if(this._signalRouter.bestRoute){this._signalRouter.bestRoute.failedAttempts=e;this._signalRouter.updateBestRoute()}else this._failedAttempts=e}close(e){if(e){this._closeTypes.has(e)?this._closeTypes.set(e,this._closeTypes.get(e)+1):this._closeTypes.set(e,1);this.state!==PeerAddressState.BANNED&&(CloseType.isBanningType(e)?this.state=PeerAddressState.BANNED:CloseType.isFailingType(e)?this.state=PeerAddressState.FAILED:this.state=PeerAddressState.TRIED)}}equals(e){return e instanceof PeerAddressState&&this.peerAddress.equals(e.peerAddress)}hashCode(){return this.peerAddress.hashCode()}toString(){return`PeerAddressState{peerAddress=${this.peerAddress}, state=${this.state}, `+`lastConnected=${this.lastConnected}, failedAttempts=${this.failedAttempts}, `+`bannedUntil=${this.bannedUntil}}`}}PeerAddressState.NEW=1;PeerAddressState.ESTABLISHED=2;PeerAddressState.TRIED=3;PeerAddressState.FAILED=4;PeerAddressState.BANNED=5;Class.register(PeerAddressState);class SignalRouter{constructor(e){this.peerAddress=e;this._bestRoute=null;this._routes=new HashSet}get bestRoute(){return this._bestRoute}addRoute(e,t,s){const r=this._routes.get(e),i=new SignalRoute(e,t,s);r&&(i.failedAttempts=r.failedAttempts);this._routes.add(i);if(!this._bestRoute||i.score>this._bestRoute.score||i.score===this._bestRoute.score&&s>this._bestRoute.timestamp){this._bestRoute=i;this.peerAddress.distance=this._bestRoute.distance}}deleteBestRoute(){this._bestRoute&&this.deleteRoute(this._bestRoute.signalChannel)}deleteRoute(e){this._routes.remove(e);this._bestRoute&&this._bestRoute.signalChannel.equals(e)&&this.updateBestRoute()}deleteAllRoutes(){this._bestRoute=null;this._routes=new HashSet}hasRoute(){return this._routes.length>0}updateBestRoute(){let e=null;for(const t of this._routes.values())(null===e||t.score>e.score||t.score===e.score&&t.timestamp>e.timestamp)&&(e=t);this._bestRoute=e;this._bestRoute?this.peerAddress.distance=this._bestRoute.distance:this.peerAddress.distance=PeerAddressBook.MAX_DISTANCE+1}equals(e){return e instanceof PeerAddressState&&this.peerAddress.equals(e.peerAddress)}hashCode(){return this.peerAddress.hashCode()}toString(){return`PeerAddressState{peerAddress=${this.peerAddress}, state=${this.state}, `+`lastConnected=${this.lastConnected}, failedAttempts=${this.failedAttempts}, `+`bannedUntil=${this.bannedUntil}}`}}Class.register(SignalRouter);class SignalRoute{constructor(e,t,s){this.failedAttempts=0;this.timestamp=s;this._signalChannel=e;this._distance=t}get signalChannel(){return this._signalChannel}get distance(){return this._distance}get score(){return(PeerAddressBook.MAX_DISTANCE-this._distance)/2*(1-this.failedAttempts/PeerAddressBook.MAX_FAILED_ATTEMPTS_RTC)}equals(e){return e instanceof SignalRoute&&this._signalChannel.equals(e._signalChannel)}hashCode(){return this._signalChannel.hashCode()}toString(){return`SignalRoute{signalChannel=${this._signalChannel}, distance=${this._distance}, timestamp=${this.timestamp}, failedAttempts=${this.failedAttempts}}`}}Class.register(SignalRoute);class PeerAddressBook extends Observable{constructor(e){super();this._store=new HashSet;this._peerIds=new HashMap;this._networkConfig=e;this.add(null,PeerAddressBook.SEED_PEERS);setInterval(()=>this._housekeeping(),PeerAddressBook.HOUSEKEEPING_INTERVAL)}values(){return this._store.values()}_get(e){if(e instanceof WsPeerAddress){const t=this._store.get(e.withoutId());if(t)return t}return this._store.get(e)}getState(e){return this._get(e)}get(e){const t=this._get(e);return t?t.peerAddress:null}getByPeerId(e){const t=this._peerIds.get(e);return t?t.peerAddress:null}getChannelByPeerId(e){const t=this._peerIds.get(e);return t&&t.signalRouter.bestRoute?t.signalRouter.bestRoute.signalChannel:null}query(e,t,s=1e3){const r=Date.now(),i=[];for(const n of this._store.values()){if(n.state===PeerAddressState.BANNED||n.state===PeerAddressState.FAILED)continue;const o=n.peerAddress;if(!o.isSeed()&&(0!=(o.protocol&e)&&0!=(o.services&t))){n.state===PeerAddressState.ESTABLISHED&&n.signalRouter.bestRoute&&(n.signalRouter.bestRoute.timestamp=r);if(!o.exceedsAge()){i.push(o);if(i.length>=s)break}}}return i}add(e,t){const s=Array.isArray(t)?t:[t],r=[];for(const i of s)this._add(e,i)&&r.push(i);r.length&&this.fire("added",r,this)}_add(e,t){if(this._store.length>=PeerAddressBook.MAX_SIZE)return!1;if(this._networkConfig.peerAddress.equals(t))return!1;if(e&&t.exceedsAge()){Log.d(PeerAddressBook,`Ignoring address ${t} - too old (${new Date(t.timestamp)})`);return!1}if(t.timestamp>Date.now()+PeerAddressBook.MAX_TIMESTAMP_DRIFT){Log.d(PeerAddressBook,`Ignoring addresses ${t} - timestamp in the future`);return!1}if(t.protocol===Protocol.RTC){t.distance++;if(t.distance>PeerAddressBook.MAX_DISTANCE){Log.d(PeerAddressBook,`Ignoring address ${t} - max distance exceeded`);const s=this._get(t);s&&s.signalRouter.deleteRoute(e);return!1}}let s=this._get(t);if(s){const e=s.peerAddress;if(s.state===PeerAddressState.BANNED)return!1;if(e.isSeed())return!1;e.netAddress&&!t.netAddress&&(t.netAddress=e.netAddress);if(t.protocol===Protocol.WS&&e.timestamp>=t.timestamp)return!1}else{s=new PeerAddressState(t);this._store.add(s);t.protocol===Protocol.RTC&&this._peerIds.put(t.peerId,s)}t.protocol===Protocol.RTC&&s.signalRouter.addRoute(e,t.distance,t.timestamp);s.peerAddress=t;return!0}established(e,t){let s=this._get(t);if(!s){s=new PeerAddressState(t);t.protocol===Protocol.RTC&&this._peerIds.put(t.peerId,s);this._store.add(s)}s.state=PeerAddressState.ESTABLISHED;s.lastConnected=Date.now();s.failedAttempts=0;s.bannedUntil=-1;s.banBackoff=PeerAddressBook.INITIAL_FAILED_BACKOFF;s.peerAddress.isSeed()||(s.peerAddress=t);t.protocol===Protocol.RTC&&s.signalRouter.addRoute(e,t.distance,t.timestamp)}close(e,t,s=null){const r=this._get(t);if(r){r.close(s);e&&this._removeBySignalChannel(e);if(CloseType.isBanningType(s))this._ban(t);else if(CloseType.isFailingType(s)){r.failedAttempts++;if(r.failedAttempts>=r.maxFailedAttempts)if(r.banBackoff>=PeerAddressBook.MAX_FAILED_BACKOFF)this._remove(t);else{r.bannedUntil=Date.now()+r.banBackoff;r.banBackoff=Math.min(PeerAddressBook.MAX_FAILED_BACKOFF,2*r.banBackoff)}}t.protocol===Protocol.DUMB&&this._remove(t)}}unroutable(e,t){if(!t)return;const s=this._get(t);if(s)if(s.signalRouter.bestRoute&&s.signalRouter.bestRoute.signalChannel.equals(e)){s.signalRouter.deleteBestRoute();s.signalRouter.hasRoute()||this._remove(s.peerAddress)}else Log.w(PeerAddressBook,`Got unroutable for ${t} on a channel other than the best route.`)}_ban(e,t=PeerAddressBook.DEFAULT_BAN_TIME){let s=this._get(e);if(!s){s=new PeerAddressState(e);this._store.add(s)}s.state=PeerAddressState.BANNED;s.bannedUntil=Date.now()+t;s.signalRouter.deleteAllRoutes()}isBanned(e){const t=this._get(e);return t&&t.state===PeerAddressState.BANNED&&!t.peerAddress.isSeed()}_remove(e){const t=this._get(e);if(t)if(t.peerAddress.isSeed())this._ban(e,t.banBackoff);else{e.protocol===Protocol.RTC&&this._peerIds.remove(e.peerId);t.state!==PeerAddressState.BANNED&&this._store.remove(e)}}_removeBySignalChannel(e){for(const t of this._store.values())if(t.peerAddress.protocol===Protocol.RTC){t.signalRouter.deleteRoute(e);t.signalRouter.hasRoute()||this._remove(t.peerAddress)}}_housekeeping(){const e=Date.now(),t=[];for(const s of this._store.values()){const r=s.peerAddress;switch(s.state){case PeerAddressState.NEW:case PeerAddressState.TRIED:case PeerAddressState.FAILED:if(r.exceedsAge()){Log.d(PeerAddressBook,`Deleting old peer address ${r}`);this._remove(r)}if(s.state===PeerAddressState.FAILED&&s.failedAttempts>=s.maxFailedAttempts&&s.bannedUntil>0&&s.bannedUntil<=e){s.bannedUntil=-1;s.failedAttempts=0;t.push(r)}break;case PeerAddressState.BANNED:if(s.bannedUntil<=e)if(r.isSeed()){s.state=PeerAddressState.NEW;s.failedAttempts=0;s.bannedUntil=-1;t.push(r)}else this._store.remove(r);break;case PeerAddressState.ESTABLISHED:s.signalRouter.bestRoute&&(s.signalRouter.bestRoute.timestamp=e)}}t.length&&this.fire("added",t,this)}get knownAddressesCount(){return this._store.length}}PeerAddressBook.MAX_AGE_WEBSOCKET=18e5;PeerAddressBook.MAX_AGE_WEBRTC=6e5;PeerAddressBook.MAX_AGE_DUMB=6e4;PeerAddressBook.MAX_DISTANCE=4;PeerAddressBook.MAX_FAILED_ATTEMPTS_WS=3;PeerAddressBook.MAX_FAILED_ATTEMPTS_RTC=2;PeerAddressBook.MAX_TIMESTAMP_DRIFT=6e5;PeerAddressBook.HOUSEKEEPING_INTERVAL=6e4;PeerAddressBook.DEFAULT_BAN_TIME=6e5;PeerAddressBook.INITIAL_FAILED_BACKOFF=3e4;PeerAddressBook.MAX_FAILED_BACKOFF=6e5;PeerAddressBook.MAX_SIZE=PlatformUtils.isBrowser()?1e4:2e5;PeerAddressBook.SEED_PEERS=[WsPeerAddress.seed("dev.nimiq-network.com",8080,"e65e39616662f2c16d62dc08915e5a1d104619db8c2b9cf9b389f96c8dce9837")];Class.register(PeerAddressBook);class CloseType{static isBanningType(e){return e>=100&&e<200}static isFailingType(e){return e>=200}}CloseType.GET_BLOCKS_TIMEOUT=1;CloseType.GET_CHAIN_PROOF_TIMEOUT=2;CloseType.GET_ACCOUNTS_TREE_CHUNK_TIMEOUT=3;CloseType.GET_HEADER_TIMEOUT=4;CloseType.INVALID_ACCOUNTS_TREE_CHUNK=5;CloseType.ACCOUNTS_TREE_CHUNCK_ROOT_HASH_MISMATCH=6;CloseType.INVALID_CHAIN_PROOF=7;CloseType.RECEIVED_WRONG_HEADER=8;CloseType.DID_NOT_GET_REQUESTED_HEADER=9;CloseType.ABORTED_SYNC=10;CloseType.GET_ACCOUNTS_PROOF_TIMEOUT=11;CloseType.GET_TRANSACTIONS_PROOF_TIMEOUT=12;CloseType.GET_TRANSACTION_RECEIPTS_TIMEOUT=13;CloseType.INVALID_ACCOUNTS_PROOF=14;CloseType.ACCOUNTS_PROOF_ROOT_HASH_MISMATCH=15;CloseType.INCOMPLETE_ACCOUNTS_PROOF=16;CloseType.INVALID_BLOCK=17;CloseType.INVALID_CHAIN_PROOF=18;CloseType.INVALID_TRANSACTION_PROOF=19;CloseType.SENDING_PING_MESSAGE_FAILED=22;CloseType.SENDING_OF_VERSION_MESSAGE_FAILED=29;CloseType.DUPLICATE_CONNECTION=30;CloseType.PEER_IS_BANNED=31;CloseType.CONNECTION_LIMIT_PER_IP=32;CloseType.MANUAL_NETWORK_DISCONNECT=33;CloseType.MANUAL_WEBSOCKET_DISCONNECT=34;CloseType.MAX_PEER_COUNT_REACHED=35;CloseType.PEER_CONNECTION_RECYCLED=36;CloseType.PEER_CONNECTION_RECYCLED_INBOUND_EXCHANGE=37;CloseType.RECEIVED_INVALID_BLOCK=100;CloseType.BLOCKCHAIN_SYNC_FAILED=101;CloseType.RECEIVED_INVALID_HEADER=102;CloseType.RECEIVED_TRANSACTION_NOT_MATCHING_OUR_SUBSCRIPTION=103;CloseType.ADDR_MESSAGE_TOO_LARGE=104;CloseType.INVALID_ADDR=105;CloseType.ADDR_NOT_GLOBALLY_REACHABLE=106;CloseType.INVALID_SIGNAL_TTL=107;CloseType.INVALID_SIGNATURE=108;CloseType.INCOMPATIBLE_VERSION=109;CloseType.INVALID_PUBLIC_KEY_IN_VERACK_MESSAGE=110;CloseType.INVALID_SIGNATURE_IN_VERACK_MESSAGE=111;CloseType.DIFFERENT_GENESIS_BLOCK=112;CloseType.INVALID_PEER_ADDRESS_IN_VERSION_MESSAGE=113;CloseType.UNEXPECTED_PEER_ADDRESS_IN_VERSION_MESSAGE=114;CloseType.CLOSED_BY_REMOTE=200;CloseType.PING_TIMEOUT=201;CloseType.CONNECTION_FAILED=202;CloseType.NETWORK_ERROR=203;CloseType.VERSION_TIMEOUT=204;CloseType.VERACK_TIMEOUT=205;Class.register(CloseType);class NetworkConnection extends Observable{constructor(e,t,s,r){super();this._channel=e;this._protocol=t;this._netAddress=s;this._peerAddress=r;this._bytesSent=0;this._bytesReceived=0;this._inbound=!r;this._closed=!1;this._lastError=null;this._id=NetworkConnection._instanceCount++;this._channel.on("message",e=>this._onMessage(e));this._channel.on("close",()=>this._onClose(CloseType.CLOSED_BY_REMOTE,"Closed by remote"));this._channel.on("error",e=>this._onError(e))}_onMessage(e){if(!this._closed){this._bytesReceived+=e.byteLength||e.length;this.fire("message",e,this)}}_onError(e){this._lastError=e;this.fire("error",e,this)}_onClose(e,t){if(!this._closed){this._closed=!0;if(e===CloseType.CLOSED_BY_REMOTE&&this._lastError){e=CloseType.NETWORK_ERROR;t=this._lastError}this.fire("close",e,t,this)}}_close(e,t){this._onClose(e,t);this._channel.close()}_isChannelOpen(){return this._channel.readyState===DataChannel.ReadyState.OPEN}_isChannelClosing(){return this._channel.readyState===DataChannel.ReadyState.CLOSING}_isChannelClosed(){return this._channel.readyState===DataChannel.ReadyState.CLOSED}send(e){const t=this._peerAddress||this._netAddress;if(this._closed)return!1;if(this._isChannelClosing()||this._isChannelClosed()){Log.w(NetworkConnection,`Not sending data to ${t} - channel closing/closed (${this._channel.readyState})`);this._onClose();return!1}if(!this._isChannelOpen()){Log.w(NetworkConnection,`Not sending data to ${t} - channel not open (${this._channel.readyState})`);return!1}try{this._channel.send(e);this._bytesSent+=e.byteLength||e.length;return!0}catch(s){Log.e(NetworkConnection,`Failed to send data to ${t}: ${s.message||s}`);return!1}}expectMessage(e,t,s,r){this._channel.expectMessage(e,t,s,r)}isExpectingMessage(e){return this._channel.isExpectingMessage(e)}close(e,t){const s=this._inbound?"inbound":"outbound";Log.d(NetworkConnection,`Closing ${s} connection #${this._id} ${this._peerAddress||this._netAddress}`+(t?` - ${t}`:"")+` (${e})`);this._close(e,t)}equals(e){return e instanceof NetworkConnection&&this._id===e.id}hashCode(){return this._id.toString()}toString(){return`NetworkConnection{id=${this._id}, protocol=${this._protocol}, peerAddress=${this._peerAddress}, netAddress=${this._netAddress}}`}get id(){return this._id}get protocol(){return this._protocol}get peerAddress(){return this._peerAddress}set peerAddress(e){this._peerAddress=e}get netAddress(){return this._netAddress}set netAddress(e){this._netAddress=e}get bytesSent(){return this._bytesSent}get bytesReceived(){return this._bytesReceived}get inbound(){return this._inbound}get outbound(){return!this._inbound}get closed(){return this._closed}}NetworkConnection._instanceCount=0;Class.register(NetworkConnection);class PeerChannel extends Observable{constructor(e){super();this._conn=e;this._conn.on("message",e=>this._onMessage(e));this.bubble(this._conn,"close","error")}_onMessage(e){let t=null,s=null;try{const i=new SerialBuffer(e);s=MessageFactory.peekType(i);t=MessageFactory.parse(i)}catch(r){Log.w(PeerChannel,`Failed to parse message from ${this.peerAddress||this.netAddress}`,r.message||r);if(!s||s===Message.Type.REJECT){this.close(CloseType.FAILED_TO_PARSE_MESSAGE_TYPE,"Failed to parse message type");return}this.reject(s,RejectMessage.Code.REJECT_MALFORMED,r.message||r);return}if(t)try{this.fire(PeerChannel.Event[t.type],t,this);this.fire("message-log",t,this)}catch(r){Log.w(PeerChannel,`Error while processing ${t.type} message from ${this.peerAddress||this.netAddress}: ${r}`)}}expectMessage(e,t,s,r){this._conn.expectMessage(e,t,s,r)}isExpectingMessage(e){return this._conn.isExpectingMessage(e)}_send(e){return this._conn.send(e.serialize())}close(e,t){this._conn.close(e,t)}version(e,t,s){return this._send(new VersionMessage(Version.CODE,e,Block.GENESIS.HASH,t,s))}verack(e,t){return this._send(new VerAckMessage(e,t))}inv(e){return this._send(new InvMessage(e))}notFound(e){return this._send(new NotFoundMessage(e))}getData(e){return this._send(new GetDataMessage(e))}getHeader(e){return this._send(new GetHeaderMessage(e))}block(e){return this._send(new BlockMessage(e))}header(e){return this._send(new HeaderMessage(e))}tx(e,t){return this._send(new TxMessage(e,t))}getBlocks(e,t=BaseInventoryMessage.VECTORS_MAX_COUNT,s=!0){return this._send(new GetBlocksMessage(e,t,s?GetBlocksMessage.Direction.FORWARD:GetBlocksMessage.Direction.BACKWARD))}mempool(){return this._send(new MempoolMessage)}reject(e,t,s,r){return this._send(new RejectMessage(e,t,s,r))}subscribe(e){return this._send(new SubscribeMessage(e))}addr(e){return this._send(new AddrMessage(e))}getAddr(e,t){return this._send(new GetAddrMessage(e,t))}ping(e){return this._send(new PingMessage(e))}pong(e){return this._send(new PongMessage(e))}signal(e,t,s,r,i,n,o,a){return this._send(new SignalMessage(e,t,s,r,i,n,o,a))}getAccountsProof(e,t){return this._send(new GetAccountsProofMessage(e,t))}accountsProof(e,t){return this._send(new AccountsProofMessage(e,t))}getChainProof(){return this._send(new GetChainProofMessage)}chainProof(e){return this._send(new ChainProofMessage(e))}getAccountsTreeChunk(e,t){return this._send(new GetAccountsTreeChunkMessage(e,t))}accountsTreeChunk(e,t){return this._send(new AccountsTreeChunkMessage(e,t))}getTransactionsProof(e,t){return this._send(new GetTransactionsProofMessage(e,t))}transactionsProof(e,t){return this._send(new TransactionsProofMessage(e,t))}getTransactionReceipts(e){return this._send(new GetTransactionReceiptsMessage(e))}transactionReceipts(e){return this._send(new TransactionReceiptsMessage(e))}equals(e){return e instanceof PeerChannel&&this._conn.equals(e.connection)}hashCode(){return this._conn.hashCode()}toString(){return`PeerChannel{conn=${this._conn}}`}get connection(){return this._conn}get id(){return this._conn.id}get protocol(){return this._conn.protocol}get peerAddress(){return this._conn.peerAddress}set peerAddress(e){this._conn.peerAddress=e}get netAddress(){return this._conn.netAddress}set netAddress(e){this._conn.netAddress=e}get closed(){return this._conn.closed}}Class.register(PeerChannel);PeerChannel.Event={};PeerChannel.Event[Message.Type.VERSION]="version";PeerChannel.Event[Message.Type.INV]="inv";PeerChannel.Event[Message.Type.GET_DATA]="get-data";PeerChannel.Event[Message.Type.GET_HEADER]="get-header";PeerChannel.Event[Message.Type.NOT_FOUND]="not-found";PeerChannel.Event[Message.Type.GET_BLOCKS]="get-blocks";PeerChannel.Event[Message.Type.BLOCK]="block";PeerChannel.Event[Message.Type.HEADER]="header";PeerChannel.Event[Message.Type.TX]="tx";PeerChannel.Event[Message.Type.MEMPOOL]="mempool";PeerChannel.Event[Message.Type.REJECT]="reject";PeerChannel.Event[Message.Type.SUBSCRIBE]="subscribe";PeerChannel.Event[Message.Type.ADDR]="addr";PeerChannel.Event[Message.Type.GET_ADDR]="get-addr";PeerChannel.Event[Message.Type.PING]="ping";PeerChannel.Event[Message.Type.PONG]="pong";PeerChannel.Event[Message.Type.SIGNAL]="signal";PeerChannel.Event[Message.Type.GET_CHAIN_PROOF]="get-chain-proof";PeerChannel.Event[Message.Type.CHAIN_PROOF]="chain-proof";PeerChannel.Event[Message.Type.GET_ACCOUNTS_PROOF]="get-accounts-proof";PeerChannel.Event[Message.Type.ACCOUNTS_PROOF]="accounts-proof";PeerChannel.Event[Message.Type.GET_ACCOUNTS_TREE_CHUNK]="get-accounts-tree-chunk";PeerChannel.Event[Message.Type.ACCOUNTS_TREE_CHUNK]="accounts-tree-chunk";PeerChannel.Event[Message.Type.GET_TRANSACTIONS_PROOF]="get-transactions-proof";PeerChannel.Event[Message.Type.TRANSACTIONS_PROOF]="transactions-proof";PeerChannel.Event[Message.Type.GET_TRANSACTION_RECEIPTS]="get-transaction-receipts";PeerChannel.Event[Message.Type.TRANSACTION_RECEIPTS]="transaction-receipts";PeerChannel.Event[Message.Type.VERACK]="verack";class NetworkAgent extends Observable{constructor(e,t,s,r){super();this._blockchain=e;this._addresses=t;this._networkConfig=s;this._channel=r;this._peer=null;this._knownAddresses=new HashSet;this._timers=new Timers;this._versionReceived=!1;this._verackReceived=!1;this._versionSent=!1;this._verackSent=!1;this._versionAttempts=0;this._peerAddressVerified=!1;this._peerChallengeNonce=null;this._pingTimes=new Map;this._challengeNonce=new Uint8Array(VersionMessage.CHALLENGE_SIZE);Crypto.lib.getRandomValues(this._challengeNonce);r.on("version",e=>this._onVersion(e));r.on("verack",e=>this._onVerAck(e));r.on("addr",e=>this._onAddr(e));r.on("get-addr",e=>this._onGetAddr(e));r.on("ping",e=>this._onPing(e));r.on("pong",e=>this._onPong(e));r.on("close",()=>this._onClose())}relayAddresses(e){if(!this._versionReceived||!this._versionSent)return;const t=e.filter(e=>{if(e.protocol===Protocol.RTC&&e.distance>=PeerAddressBook.MAX_DISTANCE)return!1;if(e.protocol===Protocol.DUMB)return!1;const t=this._knownAddresses.get(e);return!e.isSeed()&&(!t||t.timestamp<Date.now()-NetworkAgent.RELAY_THROTTLE)});if(t.length){this._channel.addr(t);for(const e of t)this._knownAddresses.add(e)}}handshake(){if(!this._versionSent)if(this._channel.version(this._networkConfig.peerAddress,this._blockchain.headHash,this._challengeNonce)){this._versionSent=!0;this._versionReceived?this._peerAddressVerified&&this._sendVerAck():this._timers.setTimeout("version",()=>{this._timers.clearTimeout("version");this._channel.close(CloseType.VERSION_TIMEOUT,"version timeout")},NetworkAgent.HANDSHAKE_TIMEOUT);this._timers.setTimeout("verack",()=>{this._timers.clearTimeout("verack");this._channel.close(CloseType.VERACK_TIMEOUT,"verack timeout")},NetworkAgent.HANDSHAKE_TIMEOUT)}else{this._versionAttempts++;if(this._versionAttempts>=NetworkAgent.VERSION_ATTEMPTS_MAX){this._channel.close(CloseType.SENDING_OF_VERSION_MESSAGE_FAILED,"sending of version message failed");return}setTimeout(this.handshake.bind(this),NetworkAgent.VERSION_RETRY_DELAY)}}_onVersion(e){Log.d(NetworkAgent,()=>`[VERSION] ${e.peerAddress} ${e.headHash.toBase64()}`);const t=Date.now();if(!this._canAcceptMessage(e))return;if(this._versionReceived){Log.d(NetworkAgent,()=>`Ignoring duplicate version message from ${this._channel.peerAddress}`);return}this._timers.clearTimeout("version");if(!Version.isCompatible(e.version)){this._channel.reject(Message.Type.VERSION,RejectMessage.Code.REJECT_OBSOLETE,`incompatible version (ours=${Version.CODE}, theirs=${e.version})`);this._channel.close(CloseType.INCOMPATIBLE_VERSION,`incompatible version (ours=${Version.CODE}, theirs=${e.version})`);return}if(!Block.GENESIS.HASH.equals(e.genesisHash)){this._channel.close(CloseType.DIFFERENT_GENESIS_BLOCK,`different genesis block (${e.genesisHash})`);return}if(!e.peerAddress.verifySignature()){this._channel.close(CloseType.INVALID_PEER_ADDRESS_IN_VERSION_MESSAGE,"invalid peerAddress in version message");return}const s=e.peerAddress;if(this._channel.peerAddress){if(!this._channel.peerAddress.equals(s)){this._channel.close(CloseType.UNEXPECTED_PEER_ADDRESS_IN_VERSION_MESSAGE,"unexpected peerAddress in version message");return}this._peerAddressVerified=!0}if(!s.netAddress||s.netAddress.isPseudo()){const e=this._addresses.get(s);e&&e.netAddress&&(s.netAddress=e.netAddress)}this._channel.peerAddress=s;this._peer=new Peer(this._channel,e.version,e.headHash,s.timestamp-t);this._peerChallengeNonce=e.challengeNonce;this._versionReceived=!0;this.fire("version",this._peer,this);if(!this._channel.closed)if(this._versionSent){this._peerAddressVerified&&this._sendVerAck();this._verackReceived&&this._finishHandshake()}else this.handshake()}_sendVerAck(){Assert.that(this._peerAddressVerified);const e=BufferUtils.concatTypedArrays(this._channel.peerAddress.peerId.serialize(),this._peerChallengeNonce),t=Signature.create(this._networkConfig.keyPair.privateKey,this._networkConfig.keyPair.publicKey,e);this._channel.verack(this._networkConfig.keyPair.publicKey,t);this._verackSent=!0}_onVerAck(e){Log.d(NetworkAgent,()=>`[VERACK] from ${this._channel.peerAddress}`);if(!this._canAcceptMessage(e))return;if(this._verackReceived){Log.d(NetworkAgent,()=>`Ignoring duplicate verack message from ${this._channel.peerAddress}`);return}this._timers.clearTimeout("verack");if(!e.publicKey.toPeerId().equals(this._channel.peerAddress.peerId)){this._channel.close(CloseType.INVALID_PUBLIC_KEY_IN_VERACK_MESSAGE,"Invalid public key in verack message");return}const t=BufferUtils.concatTypedArrays(this._networkConfig.peerAddress.peerId.serialize(),this._challengeNonce);if(e.signature.verify(e.publicKey,t)){if(!this._peerAddressVerified){this._peerAddressVerified=!0;this._sendVerAck()}this._knownAddresses.add(this._channel.peerAddress);this._verackReceived=!0;this._verackSent&&this._finishHandshake()}else this._channel.close(CloseType.INVALID_SIGNATURE_IN_VERACK_MESSAGE,"Invalid signature in verack message")}_finishHandshake(){this._timers.setInterval("connectivity",()=>this._checkConnectivity(),NetworkAgent.CONNECTIVITY_CHECK_INTERVAL);this._timers.setInterval("announce-addr",()=>this._channel.addr([this._networkConfig.peerAddress]),NetworkAgent.ANNOUNCE_ADDR_INTERVAL);this.fire("handshake",this._peer,this);this._requestAddresses()}_requestAddresses(){this._channel.getAddr(this._networkConfig.protocolMask,this._networkConfig.services.accepted)}_onAddr(e){if(this._canAcceptMessage(e))if(e.addresses.length>1e3){Log.w(NetworkAgent,"Rejecting addr message - too many addresses");this._channel.close(CloseType.ADDR_MESSAGE_TOO_LARGE,"addr message too large")}else{for(const t of e.addresses){if(!t.verifySignature()){this._channel.close(CloseType.INVALID_ADDR,"invalid addr");return}if(t.protocol===Protocol.WS&&!t.globallyReachable()){this._channel.close(CloseType.ADDR_NOT_GLOBALLY_REACHABLE,"addr not globally reachable");return}this._knownAddresses.add(t)}this._addresses.add(this._channel,e.addresses);this.fire("addr",e.addresses,this)}}_onGetAddr(e){if(!this._canAcceptMessage(e))return;const t=this._addresses.query(e.protocolMask,e.serviceMask).filter(e=>{if(e.protocol===Protocol.RTC&&e.distance>=PeerAddressBook.MAX_DISTANCE)return!1;const t=this._knownAddresses.get(e);return!t||t.timestamp<Date.now()-NetworkAgent.RELAY_THROTTLE});t.length&&this._channel.addr(t)}_checkConnectivity(){const e=NumberUtils.randomUint32();if(this._channel.ping(e)){this._pingTimes.set(e,Date.now());this._timers.setTimeout(`ping_${e}`,()=>{this._timers.clearTimeout(`ping_${e}`);this._channel.close(CloseType.PING_TIMEOUT,"ping timeout");this._pingTimes["delete"](e)},NetworkAgent.PING_TIMEOUT)}else this._channel.close(CloseType.SENDING_PING_MESSAGE_FAILED,"sending ping message failed")}_onPing(e){this._canAcceptMessage(e)&&this._channel.pong(e.nonce)}_onPong(e){this._timers.clearTimeout(`ping_${e.nonce}`);const t=this._pingTimes.get(e.nonce);if(t){const s=Date.now()-t;s>0&&this.fire("ping-pong",s);this._pingTimes["delete"](e.nonce)}}_onClose(){this._timers.clearAll()}_canAcceptMessage(e){if(!this._versionReceived&&e.type!==Message.Type.VERSION){Log.w(NetworkAgent,`Discarding '${PeerChannel.Event[e.type]||e.type}' message from ${this._channel}`+" - no version message received previously");return!1}if(this._versionReceived&&!this._verackReceived&&e.type!==Message.Type.VERACK){Log.w(NetworkAgent,`Discarding '${PeerChannel.Event[e.type]||e.type}' message from ${this._channel}`+" - no verack message received previously");return!1}return!0}get channel(){return this._channel}get peer(){return this._peer}}NetworkAgent.HANDSHAKE_TIMEOUT=4e3;NetworkAgent.PING_TIMEOUT=1e4;NetworkAgent.CONNECTIVITY_CHECK_INTERVAL=6e4;NetworkAgent.ANNOUNCE_ADDR_INTERVAL=3e5;NetworkAgent.RELAY_THROTTLE=12e4;NetworkAgent.VERSION_ATTEMPTS_MAX=10;NetworkAgent.VERSION_RETRY_DELAY=500;Class.register(NetworkAgent);class PeerConnectionStatistics{constructor(){this._latencies=[];this._messages=new HashMap}reset(){this._latencies=[];this._messages=new HashMap}addLatency(e){this._latencies.push(e)}addMessage(e){this._messages.put(e.type,this._messages.contains(e.type)?this._messages.get(e.type)+1:1)}getMessageCount(e){return this._messages.contains(e)?this._messages.get(e):0}get latencyMedian(){const e=this._latencies.length;if(0===e)return 0;this._latencies.sort((e,t)=>e-t);let t;return t=e%2==0?Math.round((this._latencies[e/2-1]+this._latencies[e/2])/2):this._latencies[(e-1)/2]}}Class.register(PeerConnectionStatistics);class PeerConnection{static getOutbound(e){const t=new PeerConnection;t._peerAddress=e;t._state=PeerConnectionState.CONNECTING;return t}static getInbound(e){const t=new PeerConnection;t._networkConnection=e;return t}constructor(){this._id=PeerConnection._instanceCount++;this._peerAddress=null;this._networkConnection=null;this._peerChannel=null;this._networkAgent=null;this._peer=null;this._state=PeerConnectionState.NEW;this._closingType=null;this._score=null;this._establishedSince=null;this._statistics=new PeerConnectionStatistics}get state(){return this._state}get peerAddress(){return this._peerAddress}set peerAddress(e){this._peerAddress=e}get networkConnection(){return this._networkConnection}set networkConnection(e){this._networkConnection=e;this._state=PeerConnectionState.CONNECTED}get peerChannel(){return this._peerChannel}set peerChannel(e){this._peerChannel=e}get networkAgent(){return this._networkAgent}set networkAgent(e){this._networkAgent=e;this._state=PeerConnectionState.NEGOTIATING}get peer(){return this._peer}set peer(e){this._peer=e;this._state=PeerConnectionState.ESTABLISHED;this._establishedSince=Date.now();this._networkAgent.on("ping-pong",e=>this._statistics.addLatency(e));this._peerChannel.on("message-log",e=>this._statistics.addMessage(e))}get score(){return this._score}set score(e){this._score=e}get establishedSince(){return this._establishedSince}get ageEstablished(){return Date.now()-this.establishedSince}get statistics(){return this._statistics}}PeerConnection._instanceCount=0;Class.register(PeerConnection);class PeerConnectionState{}PeerConnectionState.NEW=1;PeerConnectionState.CONNECTING=2;PeerConnectionState.CONNECTED=3;PeerConnectionState.NEGOTIATING=4;PeerConnectionState.ESTABLISHED=5;Class.register(PeerConnectionState);class SignalProcessor{constructor(e,t,s){this._addresses=e;this._networkConfig=t;this._rtcConnector=s;this._forwards=new SignalStore}onSignal(e,t){if(t.ttl>Network.SIGNAL_TTL_INITIAL){e.close(CloseType.INVALID_SIGNAL_TTL,"invalid signal ttl");return}if(t.hasPayload()&&!t.verifySignature()){e.close(CloseType.INVALID_SIGNATURE,"invalid signature");return}const s=this._networkConfig.peerAddress.peerId;if(t.senderId.equals(s)){Log.w(SignalProcessor,`Received signal from myself to ${t.recipientId} from ${e.peerAddress} (myId: ${s})`);return}if(t.isUnroutable()&&this._forwards.signalForwarded(t.recipientId,t.senderId,t.nonce)){const s=this._addresses.getByPeerId(t.senderId);this._addresses.unroutable(e,s)}if(t.recipientId.equals(s)){if(this._rtcConnector.isValidSignal(t)&&(t.isUnroutable()||t.isTtlExceeded())){const s=this._addresses.getByPeerId(t.senderId);this._addresses.unroutable(e,s)}this._rtcConnector.onSignal(e,t);return}if(t.ttl<=0){Log.d(SignalProcessor,`Discarding signal from ${t.senderId} to ${t.recipientId} - TTL reached`);0===t.flags&&e.signal(t.recipientId,t.senderId,t.nonce,Network.SIGNAL_TTL_INITIAL,SignalMessage.Flag.TTL_EXCEEDED);return}const r=this._addresses.getChannelByPeerId(t.recipientId);if(r)if(r.peerAddress.equals(e.peerAddress)){Log.w(SignalProcessor,`Discarding signal from ${t.senderId} to ${t.recipientId} - shortest route via sending peer`);0===t.flags&&e.signal(t.recipientId,t.senderId,t.nonce,Network.SIGNAL_TTL_INITIAL,SignalMessage.Flag.UNROUTABLE)}else{r.signal(t.senderId,t.recipientId,t.nonce,t.ttl-1,t.flags,t.payload,t.senderPubKey,t.signature);0===t.flags&&this._forwards.add(t.senderId,t.recipientId,t.nonce)}else{Log.d(SignalProcessor,`Failed to forward signal from ${t.senderId} to ${t.recipientId} - no route found`);0===t.flags&&e.signal(t.recipientId,t.senderId,t.nonce,Network.SIGNAL_TTL_INITIAL,SignalMessage.Flag.UNROUTABLE)}}}Class.register(SignalProcessor);class SignalStore{constructor(e=1e3){this._maxSize=e;this._queue=new Queue;this._store=new HashMap}get length(){return this._queue.length}add(e,t,s){if(this.contains(e,t,s)){const r=new ForwardedSignal(e,t,s);this._store.put(r,Date.now());this._queue.remove(r);this._queue.enqueue(r);return}if(this.length>=this._maxSize){const e=this._queue.dequeue();this._store.remove(e)}const r=new ForwardedSignal(e,t,s);this._queue.enqueue(r);this._store.put(r,Date.now())}contains(e,t,s){const r=new ForwardedSignal(e,t,s);return this._store.contains(r)}signalForwarded(e,t,s){const r=new ForwardedSignal(e,t,s),i=this._store.get(r);if(!i)return!1;const n=i+ForwardedSignal.SIGNAL_MAX_AGE>Date.now();if(!n){const e=this._queue.dequeueUntil(r);for(const t of e)this._store.remove(t)}return n}}SignalStore.SIGNAL_MAX_AGE=10;Class.register(SignalStore);class ForwardedSignal{constructor(e,t,s){this._senderId=e;this._recipientId=t;this._nonce=s}equals(e){return e instanceof ForwardedSignal&&this._senderId.equals(e._senderId)&&this._recipientId.equals(e._recipientId)&&this._nonce===e._nonce}hashCode(){return this.toString()}toString(){return`ForwardedSignal{senderId=${this._senderId}, recipientId=${this._recipientId}, nonce=${this._nonce}}`}}Class.register(ForwardedSignal);class ConnectionPool extends Observable{constructor(e,t,s,r){super();this._addresses=e;this._networkConfig=t;this._blockchain=s;this._time=r;this._connectionsByPeerAddress=new HashMap;this._connectionsByNetAddress=new HashMap;this._bytesSent=0;this._bytesReceived=0;this._wsConnector=new WebSocketConnector(this._networkConfig);this._wsConnector.on("connection",e=>this._onConnection(e));this._wsConnector.on("error",(e,t)=>this._onConnectError(e,t));this._rtcConnector=new WebRtcConnector(this._networkConfig);this._rtcConnector.on("connection",e=>this._onConnection(e));this._rtcConnector.on("error",(e,t)=>this._onConnectError(e,t));this._peerCountWs=0;this._peerCountRtc=0;this._peerCountDumb=0;this._peerCountFull=0;this._peerCountLight=0;this._peerCountNano=0;this._connectingCount=0;this._inboundCount=0;this._signalProcessor=new SignalProcessor(e,t,this._rtcConnector);this._allowInboundExchange=!1}values(){return Array.from(this._connectionsByPeerAddress.values())}getConnectionByPeerAddress(e){return this._connectionsByPeerAddress.get(e)}getConnectionsByNetAddress(e){return this._connectionsByNetAddress.get(e)||[]}isEstablished(e){const t=this.getConnectionByPeerAddress(e);return t&&t.state===PeerConnectionState.ESTABLISHED}_add(e){e.peerAddress&&this._connectionsByPeerAddress.put(e.peerAddress,e)}_remove(e){e.peerAddress&&this._connectionsByPeerAddress.remove(e.peerAddress);e.networkConnection&&e.networkConnection.netAddress&&this._removeNetAddress(e,e.networkConnection.netAddress)}_addNetAddress(e,t){this._connectionsByNetAddress.contains(t)?this._connectionsByNetAddress.get(t).push(e):this._connectionsByNetAddress.put(t,[e])}_removeNetAddress(e,t){if(this._connectionsByNetAddress.contains(t)){const s=this._connectionsByNetAddress.get(t),r=s.indexOf(e);r>=0&&s.splice(r,1);0===s.length&&this._connectionsByNetAddress.remove(t)}}_hasPriority(e){return 0===this.peerCountFull&&Services.isFullNode(e.services)}_checkOutboundConnectionRequest(e){if(null===e)return!1;if(e.protocol!==Protocol.WS&&e.protocol!==Protocol.RTC){Log.e(Network,"Cannot connect to {$this.peerAddress} - unsupported protocol");return!1}if(this._addresses.isBanned(e)){Log.e(Network,`Connecting to banned address ${e}`);return!1}if(this.getConnectionByPeerAddress(e)){Log.e(Network,`Duplicate connection to ${e}`);return!1}if(e.netAddress&&!e.netAddress.isPseudo()&&this.getConnectionsByNetAddress(e.netAddress).length>Network.PEER_COUNT_PER_IP_MAX){Log.e(ConnectionPool,`connection limit per ip (${Network.PEER_COUNT_PER_IP_MAX}) reached`);return!1}if(this.peerCount>=Network.PEER_COUNT_MAX&&!this._hasPriority(e)){Log.e(ConnectionPool,`max peer count reached (${Network.PEER_COUNT_MAX})`);return!1}return!0}_checkConnection(e){if(e.netAddress&&!e.netAddress.isPseudo()&&this.getConnectionsByNetAddress(e.netAddress).length>=Network.PEER_COUNT_PER_IP_MAX){e.close(CloseType.CONNECTION_LIMIT_PER_IP,`connection limit per ip (${Network.PEER_COUNT_PER_IP_MAX}) reached`);return!1}if(!(!(this.peerCount>=Network.PEER_COUNT_MAX)||e.outbound&&this._hasPriority(e.peerAddress)||e.inbound&&this._allowInboundExchange)){e.close(CloseType.MAX_PEER_COUNT_REACHED,`max peer count reached (${Network.PEER_COUNT_MAX})`);return!1}return!0}_checkHandshake(e,t){if(this.isEstablished(t.peerAddress)){e.peerChannel.close(CloseType.DUPLICATE_CONNECTION,`Duplicate connection to ${t.peerAddress} (post-handshake)`);return!1}if(this._addresses.isBanned(t.peerAddress)){e.peerChannel.close(CloseType.PEER_IS_BANNED,`Connection with banned address ${t.peerAddress} (post-handshake)`);return!1}if(t.netAddress&&!t.netAddress.isPseudo()&&this.getConnectionsByNetAddress(t.netAddress).length>Network.PEER_COUNT_PER_IP_MAX){e.peerChannel.close(CloseType.CONNECTION_LIMIT_PER_IP,`connection limit per ip (${Network.PEER_COUNT_PER_IP_MAX}) reached (post-handshake)`);return!1}return!0}connectOutbound(e){if(!this._checkOutboundConnectionRequest(e))return!1;const t=PeerConnection.getOutbound(e);this._add(t);let s=!1;if(e.protocol===Protocol.WS)s=this._wsConnector.connect(e);else{const t=this._addresses.getChannelByPeerId(e.peerId);s=this._rtcConnector.connect(e,t)}if(!s){this._remove(t);Log.d(Network,`Outbound attempt not connecting: ${e}`);return!1}this._connectingCount++;return!0}_onConnection(e){let t;if(e.outbound){this._connectingCount--;t=this.getConnectionByPeerAddress(e.peerAddress);Assert.that(t,`Connecting to outbound peer address not stored ${e.peerAddress}`);Assert.that(t.state===PeerConnectionState.CONNECTING,`PeerConnection state not CONNECTING ${e.peerAddress}`)}else{t=PeerConnection.getInbound(e);this._inboundCount++}t.networkConnection=e;e.on("close",(e,s)=>this._onClose(t,e,s));if(!this._checkConnection(e))return;e.netAddress&&!e.netAddress.isPseudo()&&this._addNetAddress(t,e.netAddress);const s=e.inbound?"inbound":"outbound";Log.d(ConnectionPool,`Connection established (${s}) #${e.id} ${e.netAddress||e.peerAddress||"<pending>"}`);this.fire("connection",e);const r=new PeerChannel(e);r.on("signal",e=>this._signalProcessor.onSignal(r,e));t.peerChannel=r;const i=new NetworkAgent(this._blockchain,this._addresses,this._networkConfig,r);i.on("version",e=>this._checkHandshake(t,e));i.on("handshake",e=>this._onHandshake(t,e));t.networkAgent=i;i.handshake()}_onHandshake(e,t){this.peerCount>=Network.PEER_COUNT_MAX&&this.fire("recycling-request");if(e.networkConnection.inbound){e.peerAddress=t.peerAddress;this._add(e);this._inboundCount--}e.peer=t;t.netAddress&&!t.netAddress.isPseudo()&&this.getConnectionsByNetAddress(t.netAddress).indexOf(e)<0&&this._addNetAddress(e,t.netAddress);this._updateConnectedPeerCount(t.peerAddress,1);this._addresses.established(t.channel,t.peerAddress);this.fire("peer-joined",t);this.fire("peers-changed");Log.d(ConnectionPool,()=>`[PEER-JOINED] ${t.peerAddress} ${t.netAddress} (version=${t.version}, services=${t.peerAddress.services}, headHash=${t.headHash.toBase64()})`)}_onClose(e,t,s){this._bytesSent+=e.networkConnection.bytesSent;this._bytesReceived+=e.networkConnection.bytesReceived;e.peerAddress&&this._addresses.close(e.peerChannel,e.peerAddress,t);this._remove(e);if(e.state===PeerConnectionState.ESTABLISHED){this._updateConnectedPeerCount(e.peerAddress,-1);this.fire("peer-left",e.peer);this.fire("peers-changed");const r=((e.networkConnection.bytesSent+e.networkConnection.bytesReceived)/1e3).toFixed(2);Log.d(ConnectionPool,`[PEER-LEFT] ${e.peerAddress} ${e.peer.netAddress} `+`(version=${e.peer.version}, transferred=${r} kB, closingType=${t} ${s})`)}else if(e.networkConnection.inbound){this._inboundCount--;Log.w(ConnectionPool,`Inbound connection closed pre-handshake: ${s} (${t})`)}else{Log.w(ConnectionPool,`Connection to ${e.peerAddress} closed pre-handshake: ${s} (${t})`);this.fire("connect-error",e.peerAddress,`${s} (${t})`)}this.fire("close",e,t,s)}_onConnectError(e,t){Log.w(ConnectionPool,`Connection to ${e} failed`+("string"==typeof t?` - ${t}`:""));const s=this.getConnectionByPeerAddress(e);Assert.that(s&&s.state===PeerConnectionState.CONNECTING);this._remove(s);this._connectingCount--;this._addresses.close(null,e,CloseType.CONNECTION_FAILED);this.fire("connect-error",e,t)}_updateConnectedPeerCount(e,t){switch(e.protocol){case Protocol.WS:this._peerCountWs+=t;break;case Protocol.RTC:this._peerCountRtc+=t;break;case Protocol.DUMB:this._peerCountDumb+=t;break;default:Log.w(PeerAddressBook,`Unknown protocol ${e.protocol}`)}Services.isFullNode(e.services)?this._peerCountFull+=t:Services.isLightNode(e.services)?this._peerCountLight+=t:this._peerCountNano+=t}disconnect(e){for(const t of this.values())t.peerChannel&&t.peerChannel.close(CloseType.MANUAL_NETWORK_DISCONNECT,e||"manual network disconnect")}disconnectWebSocket(){for(const e of this.values())e.peerChannel&&e.peerAddress&&e.peerAddress.protocol===Protocol.WS&&e.channel.close(CloseType.MANUAL_WEBSOCKET_DISCONNECT,"manual websocket disconnect")}get peerCountWs(){return this._peerCountWs}get peerCountRtc(){return this._peerCountRtc}get peerCountDumb(){return this._peerCountDumb}get peerCount(){return this._peerCountWs+this._peerCountRtc+this._peerCountDumb}get peerCountFull(){return this._peerCountFull}get peerCountLight(){return this._peerCountLight}get peerCountNano(){return this._peerCountNano}get connectingCount(){return this._connectingCount}get count(){return this._connectionsByPeerAddress.length+this._inboundCount}get bytesSent(){return this._bytesSent+this.values().reduce((e,t)=>e+(t.networkConnection?t.networkConnection.bytesSent:0),0)}get bytesReceived(){return this._bytesReceived+this.values().reduce((e,t)=>e+(t.networkConnection?t.networkConnection.bytesReceived:0),0)}set allowInboundExchange(e){this._allowInboundExchange=e}}Class.register(ConnectionPool);class PeerScorer extends Observable{constructor(e,t,s){super();this._networkConfig=e;this._addresses=t;this._connections=s;this._connectionScores=null}pickAddress(){const e=this._addresses.values(),t=e.length,s=Math.floor(Math.random()*t),r=Math.min(t,1e3),i=new HashMap;for(let o=0;o<t;o++){const n=e[(s+o)%t],a=this._scoreAddress(n);if(a>=0){i.put(a,n);if(i.length>=r)break}}if(0===i.length)return null;const n=i.keys().sort((e,t)=>t-e);return i.get(n[0]).peerAddress}_scoreAddress(e){const t=e.peerAddress;if(!this._networkConfig.canConnect(t.protocol))return-1;if(t.exceedsAge())return-1;if(this._connections.getConnectionByPeerAddress(t))return-1;if(t.exceedsAge())return-1;const s=(this._scoreProtocol(t)+this._scoreServices(t))*(t.timestamp/1e3+1);switch(e.state){case PeerAddressState.BANNED:return-1;case PeerAddressState.NEW:case PeerAddressState.TRIED:return s;case PeerAddressState.FAILED:return(1-(e.failedAttempts+1)/e.maxFailedAttempts)*s;default:return-1}}_scoreProtocol(e){let t=1;this._connections.peerCountWs<2?t*=e.protocol===Protocol.WS?3:1:t*=e.protocol===Protocol.RTC?3:1;e.protocol===Protocol.RTC&&(t*=1+(PeerAddressBook.MAX_DISTANCE-e.distance)/2);return t}_scoreServices(e){return this._connections.peerCount>2&&0===this._connections.peerCountFull&&Services.isFullNode(e.services)?10:0}scoreConnections(){const e=[];for(const t of this._connections.values())if(t.state===PeerConnectionState.ESTABLISHED){if(t.ageEstablished>PeerScorer._getMinAge(t.peerAddress)){t.score=this._scoreConnection(t);e.push(t)}t.statistics.reset()}this._connectionScores=e.sort((e,t)=>t.score-e.score)}recycleConnections(e,t,s){if(this._connectionScores)for(;e>0&&this._connectionScores.length>0;){const r=this._connectionScores.pop();if(r.state===PeerConnectionState.ESTABLISHED){r.peerChannel.close(t,`${s}`);e--}}}_scoreConnection(e){const t=this._scoreConnectionAge(e),s=e.networkConnection.inbound?0:1;let r=0;this._connections.peerCountWs/this._connections.peerCount<PeerScorer.BEST_PROTOCOL_WS_DISTRIBUTION&&e.peerAddress.protocol===Protocol.WS&&(r=1);const i=e.statistics.latencyMedian;let n=0;i>0&&i<NetworkAgent.PING_TIMEOUT&&(n=1-i/NetworkAgent.PING_TIMEOUT);return.4*t+.2*s+.2*r+.2*n}_scoreConnectionAge(e){const t=(e,t,s)=>Math.max(Math.min(1-(e-t)/s,1),0),s=e.ageEstablished,r=e.peerAddress.services;return Services.isFullNode(r)?s/(2*PeerScorer.BEST_AGE_FULL)+.5:Services.isLightNode(r)?t(s,PeerScorer.BEST_AGE_LIGHT,PeerScorer.MAX_AGE_LIGHT):t(s,PeerScorer.BEST_AGE_NANO,PeerScorer.MAX_AGE_NANO)}static _getMinAge(e){return Services.isFullNode(e.services)?PeerScorer.MIN_AGE_FULL:Services.isLightNode(e.services)?PeerScorer.MIN_AGE_LIGHT:PeerScorer.MIN_AGE_NANO}get connectionScores(){return this._connectionScores}get lowestConnectionScore(){return this._connectionScores&&this._connectionScores.length>0?this._connectionScores[this._connectionScores.length-1].score:null}}PeerScorer.MIN_AGE_FULL=3e5;PeerScorer.BEST_AGE_FULL=864e5;PeerScorer.MIN_AGE_LIGHT=12e4;PeerScorer.BEST_AGE_LIGHT=9e5;PeerScorer.MAX_AGE_LIGHT=216e5;PeerScorer.MIN_AGE_NANO=6e4;PeerScorer.BEST_AGE_NANO=3e5;PeerScorer.MAX_AGE_NANO=18e5;PeerScorer.BEST_PROTOCOL_WS_DISTRIBUTION=.15;Class.register(PeerScorer);class NetworkConfig{static getDefault(){return PlatformUtils.supportsWebRTC()?new RtcNetworkConfig:new DumbNetworkConfig}constructor(e){this._protocolMask=e;this._keyPair=null;this._peerId=null;this._services=null}async initPersistent(){const e=await PeerKeyStore.getPersistent();await this._init(e)}async initVolatile(){const e=PeerKeyStore.createVolatile();await this._init(e)}async _init(e){if(this._keyPair)return;let t=await e.get("keys");if(!t){t=KeyPair.generate();await e.put("keys",t)}this._keyPair=t;this._peerId=t.publicKey.toPeerId()}get protocolMask(){return this._protocolMask}get keyPair(){return this._keyPair}get publicKey(){return this._keyPair.publicKey}get peerId(){return this._peerId}get services(){return this._services}set services(e){this._services=e}get peerAddress(){throw new Error("Not implemented")}canConnect(e){return 0!=(e&this._protocolMask)}}Class.register(NetworkConfig);class WsNetworkConfig extends NetworkConfig{constructor(e,t,s,r){super(Protocol.WS);this._host=e;this._port=t;this._key=s;this._cert=r;this._sslConfig={key:this._key,cert:this._cert}}get sslConfig(){return this._sslConfig}get peerAddress(){if(!this._services||!this._keyPair)throw"PeerAddress is not configured.";const e=new WsPeerAddress(this._services.provided,Date.now(),NetAddress.UNSPECIFIED,this.publicKey,0,this._host,this._port);if(!e.globallyReachable())throw"PeerAddress not globally reachable.";e.signature=Signature.create(this._keyPair.privateKey,this.publicKey,e.serializeContent());return e}}Class.register(WsNetworkConfig);class RtcNetworkConfig extends NetworkConfig{constructor(){super(Protocol.WS|Protocol.RTC);this._rtcConfig={iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"stun:stun.nimiq-network.com:19302"}]}}get rtcConfig(){return this._rtcConfig}get peerAddress(){if(!this._services||!this._keyPair)throw"PeerAddress is not configured.";const e=new RtcPeerAddress(this._services.provided,Date.now(),NetAddress.UNSPECIFIED,this.publicKey,0);e.signature=Signature.create(this._keyPair.privateKey,this.publicKey,e.serializeContent());return e}}Class.register(RtcNetworkConfig);class DumbNetworkConfig extends NetworkConfig{constructor(){super(Protocol.WS)}get peerAddress(){if(!this._services||!this._keyPair)throw"PeerAddress is not configured.";const e=new DumbPeerAddress(this._services.provided,Date.now(),NetAddress.UNSPECIFIED,this.publicKey,0);e.signature=Signature.create(this._keyPair.privateKey,this.publicKey,e.serializeContent());return e}}Class.register(DumbNetworkConfig);class Network extends Observable{constructor(e,t,s){super();this._blockchain=e;this._networkConfig=t;this._time=s;this._autoConnect=!1;this._backoff=Network.CONNECT_BACKOFF_INITIAL;this._backedOff=!1;this._addresses=new PeerAddressBook(this._networkConfig);this._addresses.on("added",e=>{this._relayAddresses(e);this._checkPeerCount()});this._connections=new ConnectionPool(this._addresses,t,e,s);this._connections.on("peer-joined",e=>this._onPeerJoined(e));this._connections.on("peer-left",e=>this._onPeerLeft(e));this._connections.on("peers-changed",()=>this._onPeersChanged());this._connections.on("recycling-request",()=>this._onRecyclingRequest());this._connections.on("connect-error",()=>this._checkPeerCount());this._scorer=new PeerScorer(this._networkConfig,this._addresses,this._connections);this._houseKeepingIntervalId=null}connect(){this._autoConnect=!0;this._houseKeepingIntervalId=setInterval(()=>this._housekeeping(),Network.HOUSEKEEPING_INTERVAL);this._checkPeerCount()}disconnect(e){this._autoConnect=!1;clearInterval(this._houseKeepingIntervalId);this._connections.disconnect(e)}disconnectWebSocket(){this._autoConnect=!1;this._connections.disconnectWebSocket()}_onPeerJoined(e){this._updateTimeOffset();this._relayAddresses([e.peerAddress]);this.fire("peer-joined",e)}_onPeerLeft(e){this._updateTimeOffset();this.fire("peer-left",e)}_onPeersChanged(){this._checkPeerCount();this.fire("peers-changed")}_onRecyclingRequest(){this._scorer.recycleConnections(1,CloseType.PEER_CONNECTION_RECYCLED_INBOUND_EXCHANGE,"Peer connection recycled inbound exchange");this._connections.allowInboundExchange=null!==this._scorer.lowestConnectionScore&&this._scorer.lowestConnectionScore<Network.SCORE_INBOUND_EXCHANGE}_relayAddresses(e){if(e.length>10)return;const t=this._connections.values();for(let s=0;s<Network.PEER_COUNT_RELAY;++s){const s=ArrayUtils.randomElement(t);s&&s.state===PeerConnectionState.ESTABLISHED&&s.networkAgent&&s.networkAgent.relayAddresses(e)}}_checkPeerCount(){if(this._autoConnect&&(this._connections.count<Network.PEER_COUNT_DESIRED||0===this._connections.peerCountFull)&&this._connections.connectingCount<Network.CONNECTING_COUNT_MAX){const e=this._scorer.pickAddress();if(!e){if(!this._backedOff){this._backedOff=!0;const e=this._backoff;this._backoff=Math.min(Network.CONNECT_BACKOFF_MAX,2*e);setTimeout(()=>{this._backedOff=!1;this._checkPeerCount()},e);0===this._connections.count&&this.fire("disconnected")}return}if(!this._connections.connectOutbound(e)){this._addresses.close(null,e,CloseType.CONNECTION_FAILED);setTimeout(()=>this._checkPeerCount(),0)}}this._backoff=Network.CONNECT_BACKOFF_INITIAL}_updateTimeOffset(){const e=[0];this._connections.values().forEach(t=>{t.state===PeerConnectionState.ESTABLISHED&&e.push(t.networkAgent.peer.timeOffset)});const t=e.length;e.sort((e,t)=>e-t);let s;s=t%2==0?Math.round((e[t/2-1]+e[t/2])/2):e[(t-1)/2];this._time.offset=Math.max(Math.min(s,Network.TIME_OFFSET_MAX),-Network.TIME_OFFSET_MAX)}_housekeeping(){this._scorer.scoreConnections();if(this.peerCount>Network.PEER_COUNT_RECYCLING_ACTIVE){const e=.19*(this.peerCount-Network.PEER_COUNT_RECYCLING_ACTIVE)/(Network.PEER_COUNT_MAX-Network.PEER_COUNT_RECYCLING_ACTIVE)+.01,t=Math.ceil(this.peerCount*e);this._scorer.recycleConnections(t,CloseType.PEER_CONNECTION_RECYCLED,"Peer connection recycled")}this._connections.allowInboundExchange=null!==this._scorer.lowestConnectionScore&&this._scorer.lowestConnectionScore<Network.SCORE_INBOUND_EXCHANGE}get time(){return this._time}get peerCount(){return this._connections.peerCount}get peerCountWebSocket(){return this._connections.peerCountWs}get peerCountWebRtc(){return this._connections.peerCountRtc}get peerCountDumb(){return this._connections.peerCountDumb}get peerCountConnecting(){return this._connections.connectingCount}get knownAddressesCount(){return this._addresses.knownAddressesCount}get bytesSent(){return this._connections.bytesSent}get bytesReceived(){return this._connections.bytesReceived}}Network.PEER_COUNT_MAX=PlatformUtils.isBrowser()?15:5e4;Network.PEER_COUNT_PER_IP_MAX=PlatformUtils.isBrowser()?2:25;Network.PEER_COUNT_RECYCLING_ACTIVE=PlatformUtils.isBrowser()?5:1e3;Network.PEER_COUNT_DESIRED=6;Network.PEER_COUNT_RELAY=4;Network.CONNECTING_COUNT_MAX=2;Network.SIGNAL_TTL_INITIAL=3;Network.ADDRESS_UPDATE_DELAY=1e3;Network.CONNECT_BACKOFF_INITIAL=1e3;Network.CONNECT_BACKOFF_MAX=3e5;Network.TIME_OFFSET_MAX=9e5;Network.HOUSEKEEPING_INTERVAL=3e5;Network.SCORE_INBOUND_EXCHANGE=.5;Class.register(Network);class NetUtils{static isPrivateIP(e){if(NetUtils.isLocalIP(e))return!0;if(NetUtils.isIPv4Address(e)){for(const t of NetUtils.IPv4_PRIVATE_NETWORK)if(NetUtils.isIPv4inSubnet(e,t))return!0;return!1}if(NetUtils.isIPv6Address(e)){const t=e.toLowerCase().split(":");return NetUtils.isIPv4Address(t[t.length-1])?NetUtils.isPrivateIP(t[t.length-1]):64512==(-512&parseInt(t[0],16))||65152==(-64&parseInt(t[0],16))}throw`Malformed IP address ${e}`}static isLocalIP(e){const t=NetUtils._normalizeIP(e);return NetUtils.isIPv4Address(e)?"127.0.0.1"===t:"::1"===t}static isIPv4inSubnet(e,t){let[s,r]=t.split("/");r=-1<<32-parseInt(r);return(NetUtils._IPv4toLong(e)&r)===NetUtils._IPv4toLong(s)}static isIPv4Address(e){const t=e.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);return!!t&&parseInt(t[1])<=255&&parseInt(t[2])<=255&&parseInt(t[3])<=255&&parseInt(t[4])<=255}static isIPv6Address(e){const t=e.toLowerCase().split(":");if(t.length>8||t.length<3)return!1;const s=NetUtils.isIPv4Address(t[t.length-1]);let r=!1;for(let i=0;i<t.length;++i){if(!(/^[a-f0-9]{0,4}$/.test(t[i])||i===t.length-1&&s&&t.length<8))return!1;if(0===t[i].length&&i>0&&i<t.length-1){if(r)return!1;r=!0}}if(s)for(let i=0;i<t.length-2;++i)if(!/^0{0,4}$/.test(t[i]))return!1;return 0===t[0].length?0===t[1].length:0===t[t.length-1].length?0===t[t.length-2].length:s&&t.length<7?r:!(t.length<8)||r}static sanitizeIP(e){const t=NetUtils._normalizeIP(e);if(NetUtils.IP_BLACKLIST.indexOf(t)>=0)throw`Malformed IP address ${e}`;return t}static hostGloballyReachable(e){return!NetUtils.isIPv4Address(e)&&!NetUtils.isIPv6Address(e)&&!!e.match(/.+\..+$/)}static _normalizeIP(e){if(NetUtils.isIPv4Address(e)){const t=e.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);return`${parseInt(t[1])}.${parseInt(t[2])}.${parseInt(t[3])}.${parseInt(t[4])}`}if(NetUtils.isIPv6Address(e)){const t=(e=e.toLowerCase()).split(":");if(NetUtils.isIPv4Address(t[t.length-1]))return NetUtils._normalizeIP(t[t.length-1]);const s=t.indexOf("");if(s>=0){t[s]="0";s>0&&""===t[s-1]&&(t[s-1]="0");s<t.length-1&&""===t[s+1]&&(t[s+1]="0");const e=8-t.length;for(let r=0;r<e;++r)t.splice(s,0,"0")}let r=-1,i=0,n=-1,o=1;for(let e=0;e<t.length;++e){t[e]=t[e].replace(/^0+([a-f0-9])/,"$1");if("0"===t[e])n<0?n=e:o++;else if(n>=0&&o>i){r=n;i=o;n=-1;o=1}}if(n>=0&&o>i){r=n;i=o}if(r>=0&&i>1){if(i===t.length)return"::";0===r||r+i===t.length?t.splice(r,i,":"):t.splice(r,i,"")}return t.join(":")}throw`Malformed IP address ${e}`}static _IPv4toLong(e){const t=e.match(/^(\d+)\.(\d+)\.(\d+)\.(\d+)$/);return(parseInt(t[1])<<24)+(parseInt(t[2])<<16)+(parseInt(t[3])<<8)+parseInt(t[4])}}NetUtils.IP_BLACKLIST=["0.0.0.0","255.255.255.255","::"];NetUtils.IPv4_PRIVATE_NETWORK=["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","100.64.0.0/10","169.254.0.0/16"];Class.register(NetUtils);class PeerKeyStore{static async getPersistent(){if(!PeerKeyStore._instance){const e=new JDB.JungleDB("peer-key",PeerKeyStore.VERSION);e.createObjectStore(PeerKeyStore.KEY_DATABASE,new PeerKeyStoreCodec);await e.connect();PeerKeyStore._instance=new PeerKeyStore(e.getObjectStore(PeerKeyStore.KEY_DATABASE))}return PeerKeyStore._instance}static createVolatile(){const e=JDB.JungleDB.createVolatileObjectStore();return new PeerKeyStore(e)}constructor(e){this._store=e}get(e){return this._store.get(e)}put(e,t){return this._store.put(e,t)}}PeerKeyStore._instance=null;PeerKeyStore.VERSION=2;PeerKeyStore.KEY_DATABASE="keys";Class.register(PeerKeyStore);class PeerKeyStoreCodec{encode(e){return e.serialize()}decode(e,t){return KeyPair.unserialize(new SerialBuffer(e))}get valueEncoding(){return"binary"}}class Peer{constructor(e,t,s,r){this._channel=e;this._version=t;this._headHash=s;this._timeOffset=r;this._setNetAddress()}_setNetAddress(){if(this.channel.netAddress){this.peerAddress.netAddress&&!this.peerAddress.netAddress.equals(this.channel.netAddress)&&Log.w(Peer,`Got different netAddress ${this.channel.netAddress} for ${this.peerAddress} `+`- advertised was ${this.peerAddress.netAddress}`);this.channel.netAddress.isPrivate()||(this.peerAddress.netAddress=this.channel.netAddress)}else this.channel.peerAddress.netAddress?this.channel.netAddress=this.channel.peerAddress.netAddress:this.channel.netAddress=NetAddress.UNKNOWN}get channel(){return this._channel}get version(){return this._version}get headHash(){return this._headHash}get timeOffset(){return this._timeOffset}get id(){return this._channel.id}get peerAddress(){return this._channel.peerAddress}get netAddress(){return this._channel.netAddress}equals(e){return e instanceof Peer&&this._channel.equals(e.channel)}hashCode(){return this._channel.hashCode()}toString(){return`Peer{version=${this._version}, headHash=${this._headHash}, `+`peerAddress=${this.peerAddress}, netAddress=${this.netAddress}}`}}Class.register(Peer);class Miner extends Observable{constructor(e,t,s,r,i,n=new Uint8Array(0)){super();this._blockchain=e;this._accounts=t;this._mempool=s;this._time=r;this._address=i;this._extraData=n;this._hashCount=0;this._lastHashrate=0;this._hashrateWorker=null;this._hashrate=0;this._lastHashCounts=[];this._totalHashCount=0;this._lastElapsed=[];this._totalElapsed=0;this._workerPool=new MinerWorkerPool;if("object"==typeof navigator&&navigator.hardwareConcurrency)this.threads=Math.ceil(navigator.hardwareConcurrency/2);else if(PlatformUtils.isNodeJs()){const e=require("os").cpus().length;this.threads=Math.ceil(e/2);1===e&&(this.throttleAfter=2)}else this.threads=1;this._workerPool.on("share",e=>this._onWorkerShare(e));this._workerPool.on("no-share",e=>this._onWorkerShare(e));this._mempoolChanged=!1;this._restarting=!1;this._lastRestart=0;this._submittingBlock=!1;this._mempool.on("transactions-ready",()=>this._startWork());this._mempool.on("transaction-added",()=>this._mempoolChanged=!0)}startWork(){if(!this.working){this._hashCount=0;this._lastElapsed=[];this._lastHashCounts=[];this._totalHashCount=0;this._totalElapsed=0;this._lastHashrate=Date.now();this._hashrateWorker=setInterval(()=>this._updateHashrate(),1e3);this._retry=0;this.fire("start",this);this._startWork()["catch"](Log.w.tag(Miner))}}async _startWork(){if(this.working&&!this._restarting)try{this._lastRestart=Date.now();this._restarting=!0;this._mempoolChanged=!1;this._retry=0;const t=await this.getNextBlock();Log.i(Miner,`Starting work on ${t.header}, transactionCount=${t.transactionCount}, hashrate=${this._hashrate} H/s`);this._workerPool.startMiningOnBlock(t)["catch"](Log.w.tag(Miner))}catch(e){Log.w(Miner,"Failed to start work, retrying in 100ms");this.stopWork();setTimeout(()=>this.startWork(),100)}finally{this._restarting=!1}}async _onWorkerShare(e){this._hashCount+=this._workerPool.noncesPerRun;if(e.block&&e.block.prevHash.equals(this._blockchain.headHash)){Log.d(Miner,()=>`Received share: ${e.nonce} / ${e.hash.toHex()}`);if(BlockUtils.isProofOfWork(e.hash,e.block.target)&&!this._submittingBlock){e.block.header.nonce=e.nonce;this._submittingBlock=!0;if(await e.block.header.verifyProofOfWork()){this.fire("block-mined",e.block,this);if(await this._blockchain.pushBlock(e.block)<0){this._submittingBlock=!1;this._startWork()["catch"](Log.w.tag(Miner));return}this._submittingBlock=!1}else Log.d(Miner,`Ignoring invalid share: ${await e.block.header.pow()}`)}}this._mempoolChanged&&this._lastRestart+Miner.MIN_TIME_ON_BLOCK<Date.now()&&this._startWork()["catch"](Log.w.tag(Miner))}async getNextBlock(){this._retry++;try{const t=await this._blockchain.getNextTarget(),s=await this._getNextInterlink(t),r=await this._getNextBody(s.serializedSize),i=await this._getNextHeader(t,s,r);return await this._blockchain.getNextTarget()!==t?this.getNextBlock():new Block(i,s,r)}catch(e){if(this._retry<=3)return this.getNextBlock();throw e}}async _getNextHeader(e,t,s){const r=this._blockchain.headHash,i=t.hash(),n=this._blockchain.height+1,o=await this._accounts.transaction();let a;try{await o.commitBlockBody(s,n,this._blockchain.transactionCache);a=await o.hash();await o.abort()}catch(u){await o.abort();throw new Error(`Invalid block body: ${u.message}`)}const c=s.hash(),h=this._getNextTimestamp(),l=BlockUtils.targetToCompact(e);return new BlockHeader(r,i,c,a,l,n,h,0)}_getNextInterlink(e){return this._blockchain.head.getNextInterlink(e)}async _getNextBody(e){const t=Policy.BLOCK_SIZE_MAX-BlockHeader.SERIALIZED_SIZE-e-BlockBody.getMetadataSize(this._extraData),s=await this._mempool.getTransactionsForBlock(t),r=await this._accounts.gatherToBePrunedAccounts(s,this._blockchain.height+1,this._blockchain.transactionCache);return new BlockBody(this._address,s,this._extraData,r)}_getNextTimestamp(){const e=Math.floor(this._time.now()/1e3);return Math.max(e,this._blockchain.head.timestamp+1)}stopWork(){if(this.working){clearInterval(this._hashrateWorker);this._hashrateWorker=null;this._hashrate=0;this._lastElapsed=[];this._lastHashCounts=[];this._totalHashCount=0;this._totalElapsed=0;this._workerPool.stop();this.fire("stop",this);Log.i(Miner,"Stopped work")}}_updateHashrate(){const e=(Date.now()-this._lastHashrate)/1e3,t=this._hashCount;this._hashCount=0;this._lastHashrate=Date.now();this._lastElapsed.push(e);this._lastHashCounts.push(t);this._totalElapsed+=e;this._totalHashCount+=t;if(this._lastElapsed.length>Miner.MOVING_AVERAGE_MAX_SIZE){const e=this._lastElapsed.shift(),t=this._lastHashCounts.shift();this._totalElapsed-=e;this._totalHashCount-=t}this._hashrate=Math.round(this._totalHashCount/this._totalElapsed);this.fire("hashrate-changed",this._hashrate,this)}get address(){return this._address}get working(){return!!this._hashrateWorker}get hashrate(){return this._hashrate}get threads(){return this._workerPool.poolSize}set threads(e){this._workerPool.poolSize=e}get throttleWait(){return this._workerPool.cycleWait}set throttleWait(e){this._workerPool.cycleWait=e}get throttleAfter(){return this._workerPool.runsPerCycle}set throttleAfter(e){this._workerPool.runsPerCycle=e}}Miner.MIN_TIME_ON_BLOCK=1e4;Miner.MOVING_AVERAGE_MAX_SIZE=10;Class.register(Miner);class Wallet{static async generate(){await Crypto.prepareSyncCryptoWorker();return new Wallet(KeyPair.generate())}static loadPlain(e){"string"==typeof e&&(e=BufferUtils.fromHex(e));if(!e||0===e.byteLength)throw new Error("Invalid wallet seed");return new Wallet(KeyPair.unserialize(new SerialBuffer(e)))}static async loadEncrypted(e,t){"string"==typeof e&&(e=BufferUtils.fromHex(e));"string"==typeof t&&(t=BufferUtils.fromAscii(t));return new Wallet(await KeyPair.fromEncrypted(new SerialBuffer(e),t))}constructor(e){this._keyPair=e;this._address=this._keyPair.publicKey.toAddress()}createTransaction(e,t,s,r){const i=new BasicTransaction(this._keyPair.publicKey,e,t,s,r);i.signature=Signature.create(this._keyPair.privateKey,this._keyPair.publicKey,i.serializeContent());return i}exportPlain(){return this._keyPair.serialize()}exportEncrypted(e,t){"string"==typeof e&&(e=BufferUtils.fromAscii(e));"string"==typeof t&&(t=BufferUtils.fromAscii(t));return this._keyPair.exportEncrypted(e,t)}get isLocked(){return this.keyPair.isLocked}lock(e){"string"==typeof e&&(e=BufferUtils.fromAscii(e));return this.keyPair.lock(e)}relock(){this.keyPair.relock()}unlock(e){"string"==typeof e&&(e=BufferUtils.fromAscii(e));return this.keyPair.unlock(e)}equals(e){return e instanceof Wallet&&this.keyPair.equals(e.keyPair)&&this.address.equals(e.address)}get address(){return this._address}get publicKey(){return this._keyPair.publicKey}get keyPair(){return this._keyPair}}Class.register(Wallet);class MultiSigWallet extends Wallet{static fromPublicKeys(e,t,s){if(0===s.length)throw new Error("publicKeys may not be empty");if(t<=0)throw new Error("minSignatures must be greater than 0");if(!s.some(t=>t.equals(e.publicKey)))throw new Error("Own publicKey must be part of publicKeys");(s=s.slice()).sort((e,t)=>e.compare(t));const r=[...ArrayUtils.k_combinations(s,t)].map(e=>PublicKey.sum(e));return new MultiSigWallet(e,t,r)}static _loadMultiSig(e,t){const s=t.readUint8(),r=t.readUint8(),i=[];for(let n=0;n<r;++n)i.push(PublicKey.unserialize(t));return new MultiSigWallet(e,s,i)}static loadPlain(e){"string"==typeof e&&(e=BufferUtils.fromHex(e));if(!e||0===e.byteLength)throw new Error("Invalid wallet seed");const t=new SerialBuffer(e),s=KeyPair.unserialize(t);return MultiSigWallet._loadMultiSig(s,t)}static async loadEncrypted(e,t){"string"==typeof e&&(e=BufferUtils.fromHex(e));"string"==typeof t&&(t=BufferUtils.fromAscii(t));const s=new SerialBuffer(e),r=await KeyPair.fromEncrypted(s,t);return MultiSigWallet._loadMultiSig(r,s)}constructor(e,t,s){super(e);this._minSignatures=t;this._publicKeys=s;this._publicKeys.sort((e,t)=>e.compare(t));const r=MerkleTree.computeRoot(this._publicKeys);this._address=Address.fromHash(r)}exportPlain(){const e=new SerialBuffer(this.exportedSize);this._keyPair.serialize(e);e.writeUint8(this._minSignatures);e.writeUint8(this._publicKeys.length);for(const t of this._publicKeys)t.serialize(e);return e}async exportEncrypted(e,t){"string"==typeof e&&(e=BufferUtils.fromAscii(e));"string"==typeof t&&(t=BufferUtils.fromAscii(t));const s=new SerialBuffer(this.encryptedExportedSize);s.write(await this._keyPair.exportEncrypted(e,t));s.writeUint8(this._minSignatures);s.writeUint8(this._publicKeys.length);for(const r of this._publicKeys)r.serialize(s);return s}get encryptedExportedSize(){return this._keyPair.encryptedSize+1+1+this._publicKeys.reduce((e,t)=>e+t.serializedSize,0)}get exportedSize(){return this._keyPair.serializedSize+1+1+this._publicKeys.reduce((e,t)=>e+t.serializedSize,0)}createTransaction(e,t,s,r){return new ExtendedTransaction(this._address,Account.Type.BASIC,e,Account.Type.BASIC,t,s,r,Transaction.Flag.NONE,new Uint8Array(0))}createCommitment(){return CommitmentPair.generate()}signTransaction(e,t,s,r){(t=t.slice()).sort((e,t)=>e.compare(t));return PartialSignature.create(this._keyPair.privateKey,this._keyPair.publicKey,t,r,s,e.serializeContent())}completeTransaction(e,t,s,r){if(r.length!==this._minSignatures)throw"Not enough signatures to complete this transaction";const i=Signature.fromPartialSignatures(s,r),n=SignatureProof.multiSig(t,this._publicKeys,i);e.proof=n.serialize();return e}get minSignatures(){return this._minSignatures}get publicKeys(){return this._publicKeys}}Class.register(MultiSigWallet);class WalletStore{constructor(e="wallet"){this._jdb=new JDB.JungleDB(e,WalletStore.VERSION);this._walletStore=null;this._multiSigStore=null;return this._init()}async _init(){this._walletStore=this._jdb.createObjectStore(WalletStore.WALLET_DATABASE,new WalletStoreCodec);this._multiSigStore=this._jdb.createObjectStore(WalletStore.MULTISIG_WALLET_DATABASE,new WalletStoreCodec);await this._jdb.connect();return this}async hasDefault(e){return!!await this._walletStore.get("default")}async getDefault(e){const t=await this._walletStore.get("default");if(!t){const e=await Wallet.generate();await this.put(e);await this.setDefault(e.address);return e}const s=new Address(t);return this.get(s,e)}setDefault(e){const t=e.serialize();return this._walletStore.put("default",t)}async get(e,t){const s=e.toBase64(),r=await this._walletStore.get(s);return t?Wallet.loadEncrypted(r,t):Wallet.loadPlain(r)}async put(e,t,s){const r=e.address.toBase64();let i=null;i=t?await e.exportEncrypted(t,s):e.exportPlain();return this._walletStore.put(r,i)}async remove(e){const t=e.toBase64(),s=this._walletStore.transaction();await s.remove(t);let r=await this._walletStore.get("default");if(r){r=new Address(r);e.equals(r)&&await s.remove("default")}return s.commit()}async list(){const e=await this._walletStore.keys();return Array.from(e).filter(e=>"default"!==e).map(e=>Address.fromBase64(e))}async getMultiSig(e,t){const s=e.toBase64(),r=await this._multiSigStore.get(s);return t?MultiSigWallet.loadEncrypted(r,t):MultiSigWallet.loadPlain(r)}async putMultiSig(e,t,s){const r=e.address.toBase64();let i=null;i=t?await e.exportEncrypted(t,s):e.exportPlain();return this._multiSigStore.put(r,i)}removeMultiSig(e){const t=e.toBase64();return this._multiSigStore.remove(t)}async listMultiSig(){const e=await this._multiSigStore.keys();return Array.from(e).map(e=>Address.fromBase64(e))}close(){return this._jdb.close()}}Class.register(WalletStore);WalletStore._instance=null;WalletStore.VERSION=1;WalletStore.WALLET_DATABASE="wallets";WalletStore.MULTISIG_WALLET_DATABASE="multisig-wallets";class WalletStoreCodec{encode(e){return e}decode(e,t){return new Uint8Array(e)}get valueEncoding(){return"binary"}}class IWorker{static async createProxy(e,t,s){return new(IWorker.Proxy(e))(s,t)}static async startWorkerForProxy(e,t,s){if(IWorker._workersSupported){s||(s=`${Nimiq._path}worker.js`);return IWorker.createProxy(e,t,new Worker(window.URL.createObjectURL(new Blob([`Nimiq = {_path: '${Nimiq._path}'}; importScripts('${s.replace(/'/g,"")}');`]))))}await IWorker._workerImplementation[e.name].init(t);return IWorker._workerImplementation[e.name]}static async startWorkerPoolForProxy(e,t,s,r){return new(IWorker.Pool(e))(t=>IWorker.startWorkerForProxy(e,t,r),t,s).start()}static async stubBaseOnMessage(e){try{if("init"===e.data.command)if(IWorker._workerImplementation[e.data.args[0]]){const t=await IWorker._workerImplementation[e.data.args[0]].init(e.data.args[1]);self.postMessage({status:"OK",result:t,id:e.data.id})}else self.postMessage({status:"error",result:"Unknown worker!",id:e.data.id});else self.postMessage({status:"error",result:"Worker not yet initialized!",id:e.data.id})}catch(t){self.postMessage({status:"error",result:t,id:e.data.id})}}static get _workersSupported(){return"undefined"!=typeof Worker}static get areWorkersAsync(){return IWorker._workersSupported}static get _insideWebWorker(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}static get _global(){return"undefined"!=typeof global?global:"undefined"!=typeof window?window:"undefined"!=typeof self?self:null}static prepareForWorkerUse(e,t){IWorker._insideWebWorker&&(self.onmessage=IWorker.stubBaseOnMessage);IWorker._workerImplementation=IWorker._workerImplementation||{};IWorker._workerImplementation[e.name]=t}static fireModuleLoaded(e="Module"){if("function"==typeof IWorker._moduleLoadedCallbacks[e]){IWorker._moduleLoadedCallbacks[e]();IWorker._moduleLoadedCallbacks[e]=null}}static _loadBrowserScript(e,t){const s=document.getElementsByTagName("head")[0],r=document.createElement("script");r.type="text/javascript";r.src=e;const i=()=>window.setTimeout(t,100);r.onreadystatechange=i;r.onload=i;s.appendChild(r)}static Proxy(e){const t=class extends e{constructor(t,s){super();this._name=s;this._messageId=0;this._worker=t;this._worker.onmessage=this._receive.bind(this);this._waiting=new Map;return this._invoke("init",[e.name,s]).then(()=>this)}_receive(e){const t=this._waiting.get(e.data.id);if(t){this._waiting["delete"](e.data.id);"OK"===e.data.status?t.resolve(e.data.result):"error"===e.data.status&&t.error(e.data.result)}else Log.w(WorkerProxy,"Unknown reply",e)}importScript(e){return this._invoke("importScript",[e])}importWasm(e,t="Module"){return this._invoke("importWasm",[e,t])}_invoke(e,t=[]){return new Promise((s,r)=>{const i={command:e,args:t,id:this._messageId++};this._waiting.set(i.id,{resolve:s,error:r});this._worker.postMessage(i)})}destroy(){return this._invoke("destroy")}};for(const s of Object.getOwnPropertyNames(e.prototype))"function"==typeof e.prototype[s]&&"constructor"!==s&&(t.prototype[s]=function(...e){return this._invoke(s,e)});return t}static Stub(e){const t=class extends e{constructor(){super()}_result(e,t,s){self.postMessage({status:t,result:s,id:e.data.id})}_onmessage(e){try{const s=this._invoke(e.data.command,e.data.args);s instanceof Promise?s.then(t=>{this._result(e,"OK",t)}):this._result(e,"OK",s)}catch(t){this._result(e,"error",t.message||t)}}importScript(e,t="Module"){if(t&&IWorker._global[t]&&IWorker._global[t].asm)return!1;"undefined"!=typeof Nimiq&&Nimiq._path&&(e=`${Nimiq._path}${e}`);"string"==typeof __dirname&&-1===e.indexOf("/")&&(e=`${__dirname}/${e}`);const s=IWorker._global[t]||{};return new Promise(async(r,i)=>{if(t)switch(typeof s.preRun){case"undefined":s.preRun=(()=>r(!0));break;case"function":s.preRun=[s,()=>r(!0)];break;case"object":s.preRun.push(()=>r(!0))}if("function"==typeof importScripts){await new Promise(s=>{IWorker._moduleLoadedCallbacks[t]=s;importScripts(e)});IWorker._global[t]=IWorker._global[t](s);t||r(!0)}else if("object"==typeof window){await new Promise(t=>{IWorker._loadBrowserScript(e,t)});IWorker._global[t]=IWorker._global[t](s);t||r(!0)}else if("function"==typeof require){IWorker._global[t]=require(e)(s);t||r(!0)}else i("No way to load scripts.")})}importWasm(e,t="Module"){"undefined"!=typeof Nimiq&&Nimiq._path&&(e=`${Nimiq._path}${e}`);"string"==typeof __dirname&&-1===e.indexOf("/")&&(e=`${__dirname}/${e}`);if(!IWorker._global.WebAssembly){Log.w(IWorker,"No support for WebAssembly available.");return Promise.resolve(!1)}return new Promise(s=>{try{if(PlatformUtils.isNodeJs()){const r=function(e){const t=new Uint8Array(e.length);for(let s=0;s<e.length;++s)t[s]=e[s];return t};require("fs").readFile(e,(i,n)=>{if(i){Log.w(IWorker,`Failed to access WebAssembly module ${e}: ${i}`);s(!1)}else{IWorker._global[t]=IWorker._global[t]||{};IWorker._global[t].wasmBinary=r(n);s(!0)}})}else{const r=new XMLHttpRequest;r.open("GET",e,!0);r.responseType="arraybuffer";r.onload=function(){IWorker._global[t]=IWorker._global[t]||{};IWorker._global[t].wasmBinary=r.response;s(!0)};r.onerror=function(){Log.w(IWorker,`Failed to access WebAssembly module ${e}`);s(!1)};r.send(null)}}catch(r){Log.w(IWorker,`Failed to access WebAssembly module ${e}`);s(!1)}})}init(e){this._name=e;if(IWorker._insideWebWorker){self.name=e;self.onmessage=(e=>this._onmessage(e))}}_invoke(e,t){return this[e].apply(this,t)}destroy(){IWorker._insideWebWorker&&self.close()}};for(const s of Object.getOwnPropertyNames(e.prototype))"function"==typeof e.prototype[s]&&"constructor"!==s&&(t.prototype[s]=function(){throw`Not implemented in IWorker Stub: ${s}`});return t}static Pool(e){const t=class extends e{constructor(e,t="pool",s=1){super();this._proxyInitializer=e;this._name=t;this._poolSize=s;this._workers=[];this._freeWorkers=[];this._waitingCalls=[]}async start(){await this._updateToSize();return this}get poolSize(){return this._poolSize}set poolSize(e){this._poolSize=e;this._updateToSize()["catch"](Log.w.tag(IWorker))}destroy(){this._poolSize=0;return this._updateToSize()}_invoke(e,t){return IWorker._workersSupported?new Promise((s,r)=>{this._waitingCalls.push({name:e,args:t,resolve:s,error:r});const i=this._freeWorkers.shift();i&&this._step(i)["catch"](Log.w.tag(IWorker))}):this._workers[0][e].apply(this._workers[0],t)}async _step(e){let t=this._waitingCalls.shift();for(;t;){try{t.resolve(await e[t.name].apply(e,t.args))}catch(s){t.error(s)}if(-1===this._workers.indexOf(e)){e.destroy();return}t=this._waitingCalls.shift()}this._freeWorkers.push(e)}async _updateToSize(){if("undefined"==typeof Worker&&this._poolSize>1){Log.d(IWorker,"Pool of size larger than 1 requires WebWorker support.");this._poolSize=1}const e=[];for(;this._workers.length+e.length<this._poolSize;)e.push(this._proxyInitializer(`${this._name}#${this._workers.length+e.length}`));const t=await Promise.all(e);for(const s of t){this._workers.push(s);this._step(s)["catch"](Log.w.tag(IWorker))}for(;this._workers.length>this._poolSize;){const e=this._freeWorkers.shift()||this._workers.pop(),t=this._workers.indexOf(e);if(t>=0){this._workers.splice(t,1);e.destroy()}}return this}};for(const s of Object.getOwnPropertyNames(e.prototype))"function"==typeof e.prototype[s]&&"constructor"!==s&&(t.prototype[s]=function(...e){return this._invoke(s,e)});return t}}IWorker._moduleLoadedCallbacks={};IWorker._workerImplementation={};Class.register(IWorker);class CryptoWorker{async computeBlake2b(e){}async computeArgon2d(e){}async computeArgon2dBatch(e){}async computeSha256(e){}async kdf(e,t,s){}async publicKeyDerive(e){}async commitmentCreate(e){}async scalarsAdd(e,t){}async commitmentsAggregate(e){}async publicKeysHash(e){}async publicKeyDelinearize(e,t){}async publicKeysDelinearizeAndAggregate(e,t){}async privateKeyDelinearize(e,t,s){}async delinearizedPartialSignatureCreate(e,t,s,r,i,n){}async signatureCreate(e,t,s){}async signatureVerify(e,t,s){}async blockVerify(e,t,s,r){}}CryptoWorker.ARGON2_HASH_SIZE=32;CryptoWorker.BLAKE2_HASH_SIZE=32;CryptoWorker.SHA256_HASH_SIZE=32;CryptoWorker.PUBLIC_KEY_SIZE=32;CryptoWorker.PRIVATE_KEY_SIZE=32;CryptoWorker.MULTISIG_RANDOMNESS_SIZE=32;CryptoWorker.SIGNATURE_SIZE=64;CryptoWorker.PARTIAL_SIGNATURE_SIZE=32;CryptoWorker.SIGNATURE_HASH_SIZE=64;Class.register(CryptoWorker);class CryptoWorkerImpl extends(IWorker.Stub(CryptoWorker)){constructor(){super();this._superInit=super.init}async init(e){if(IWorker._insideWebWorker){Crypto._workerSync=this;Crypto._workerAsync=this}await this._superInit.call(this,e);await this.importWasm("worker-wasm.wasm")?await this.importScript("worker-wasm.js"):await this.importScript("worker-js.js");const t=Module._get_static_memory_start(),s=Module._get_static_memory_size();if(s<CryptoWorker.PUBLIC_KEY_SIZE+CryptoWorker.PRIVATE_KEY_SIZE+CryptoWorker.SIGNATURE_SIZE)throw Error("Static memory too small");let r=t;this._pubKeyPointer=r;this._pubKeyBuffer=new Uint8Array(Module.HEAP8.buffer,r,CryptoWorker.PUBLIC_KEY_SIZE);r+=CryptoWorker.PUBLIC_KEY_SIZE;this._privKeyPointer=r;this._privKeyBuffer=new Uint8Array(Module.HEAP8.buffer,r,CryptoWorker.PRIVATE_KEY_SIZE);r+=CryptoWorker.PRIVATE_KEY_SIZE;this._signaturePointer=r;this._signatureBuffer=new Uint8Array(Module.HEAP8.buffer,r,CryptoWorker.SIGNATURE_SIZE);r+=CryptoWorker.SIGNATURE_SIZE;this._messagePointer=r;this._messageBuffer=new Uint8Array(Module.HEAP8.buffer,r,t+s-r)}computeBlake2b(e){let t;try{t=Module.stackSave();const r=Module.stackAlloc(CryptoWorker.BLAKE2_HASH_SIZE),i=Module.stackAlloc(e.length);new Uint8Array(Module.HEAPU8.buffer,i,e.length).set(e);const n=Module._nimiq_blake2(r,i,e.length);if(0!==n)throw n;const o=new Uint8Array(CryptoWorker.BLAKE2_HASH_SIZE);o.set(new Uint8Array(Module.HEAPU8.buffer,r,CryptoWorker.BLAKE2_HASH_SIZE));return o}catch(s){Log.w(CryptoWorkerImpl,s);throw s}finally{t!==undefined&&Module.stackRestore(t)}}computeArgon2d(e){let t;try{t=Module.stackSave();const r=Module.stackAlloc(CryptoWorker.ARGON2_HASH_SIZE),i=Module.stackAlloc(e.length);new Uint8Array(Module.HEAPU8.buffer,i,e.length).set(e);const n=Module._nimiq_argon2(r,i,e.length,512);if(0!==n)throw n;const o=new Uint8Array(CryptoWorker.ARGON2_HASH_SIZE);o.set(new Uint8Array(Module.HEAPU8.buffer,r,CryptoWorker.ARGON2_HASH_SIZE));return o}catch(s){Log.w(CryptoWorkerImpl,s);throw s}finally{t!==undefined&&Module.stackRestore(t)}}computeArgon2dBatch(e){const t=[];let s;try{s=Module.stackSave();const i=Module.stackAlloc(CryptoWorker.ARGON2_HASH_SIZE),n=Module.stackSave();for(const s of e){Module.stackRestore(n);const e=Module.stackAlloc(s.length);new Uint8Array(Module.HEAPU8.buffer,e,s.length).set(s);const r=Module._nimiq_argon2(i,e,s.length,512);if(0!==r)throw r;const o=new Uint8Array(CryptoWorker.ARGON2_HASH_SIZE);o.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.ARGON2_HASH_SIZE));t.push(o)}return t}catch(r){Log.w(CryptoWorkerImpl,r);throw r}finally{s!==undefined&&Module.stackRestore(s)}}computeSha256(e){let t;try{t=Module.stackSave();const r=Module.stackAlloc(CryptoWorker.SHA256_HASH_SIZE),i=Module.stackAlloc(e.length);new Uint8Array(Module.HEAPU8.buffer,i,e.length).set(e);Module._nimiq_sha256(r,i,e.length);const n=new Uint8Array(CryptoWorker.SHA256_HASH_SIZE);n.set(new Uint8Array(Module.HEAPU8.buffer,r,CryptoWorker.SHA256_HASH_SIZE));return n}catch(s){Log.w(CryptoWorkerImpl,s);throw s}finally{t!==undefined&&Module.stackRestore(t)}}kdf(e,t,s){let r;try{r=Module.stackSave();const n=Module.stackAlloc(CryptoWorker.ARGON2_HASH_SIZE),o=Module.stackAlloc(e.length);new Uint8Array(Module.HEAPU8.buffer,o,e.length).set(e);const a=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,a,t.length).set(t);const c=Module._nimiq_kdf(n,o,e.length,a,t.length,512,s);if(0!==c)throw c;const h=new Uint8Array(CryptoWorker.ARGON2_HASH_SIZE);h.set(new Uint8Array(Module.HEAPU8.buffer,n,CryptoWorker.ARGON2_HASH_SIZE));return h}catch(i){Log.w(CryptoWorkerImpl,i);throw i}finally{r!==undefined&&Module.stackRestore(r)}}publicKeyDerive(e){const t=new Uint8Array(CryptoWorker.PUBLIC_KEY_SIZE);if(e.byteLength!==CryptoWorker.PRIVATE_KEY_SIZE)throw Error("Wrong buffer size.");this._privKeyBuffer.set(e);Module._ed25519_public_key_derive(this._pubKeyPointer,this._privKeyPointer);this._privKeyBuffer.fill(0);t.set(this._pubKeyBuffer);return t}commitmentCreate(e){let t;try{t=Module.stackSave();const r=Module.stackAlloc(CryptoWorker.PUBLIC_KEY_SIZE),i=Module.stackAlloc(CryptoWorker.PRIVATE_KEY_SIZE),n=Module.stackAlloc(e.length);new Uint8Array(Module.HEAPU8.buffer,n,e.length).set(e);const o=Module._ed25519_create_commitment(i,r,n);if(1!==o)throw new Error(`Secret must not be 0 or 1: ${o}`);const a=new Uint8Array(CryptoWorker.PUBLIC_KEY_SIZE),c=new Uint8Array(CryptoWorker.PRIVATE_KEY_SIZE);a.set(new Uint8Array(Module.HEAPU8.buffer,r,CryptoWorker.PUBLIC_KEY_SIZE));c.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.PRIVATE_KEY_SIZE));return{commitment:a,secret:c}}catch(s){Log.w(CryptoWorkerImpl,s);throw s}finally{t!==undefined&&Module.stackRestore(t)}}scalarsAdd(e,t){if(e.byteLength!==CryptoWorker.PARTIAL_SIGNATURE_SIZE||t.byteLength!==CryptoWorker.PARTIAL_SIGNATURE_SIZE)throw Error("Wrong buffer size.");let s;try{s=Module.stackSave();const i=Module.stackAlloc(CryptoWorker.PARTIAL_SIGNATURE_SIZE),n=Module.stackAlloc(e.length),o=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,n,e.length).set(e);new Uint8Array(Module.HEAPU8.buffer,o,t.length).set(t);Module._ed25519_add_scalars(i,n,o);const a=new Uint8Array(CryptoWorker.PARTIAL_SIGNATURE_SIZE);a.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.PARTIAL_SIGNATURE_SIZE));return a}catch(r){Log.w(CryptoWorkerImpl,r);throw r}finally{s!==undefined&&Module.stackRestore(s)}}commitmentsAggregate(e){if(e.some(e=>e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE))throw Error("Wrong buffer size.");const t=new Uint8Array(e.length*CryptoWorker.PUBLIC_KEY_SIZE);for(let i=0;i<e.length;++i)t.set(e[i],i*CryptoWorker.PUBLIC_KEY_SIZE);let s;try{s=Module.stackSave();const i=Module.stackAlloc(CryptoWorker.PUBLIC_KEY_SIZE),n=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,n,t.length).set(t);Module._ed25519_aggregate_commitments(i,n,e.length);const o=new Uint8Array(CryptoWorker.PUBLIC_KEY_SIZE);o.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.PUBLIC_KEY_SIZE));return o}catch(r){Log.w(CryptoWorkerImpl,r);throw r}finally{s!==undefined&&Module.stackRestore(s)}}publicKeysHash(e){if(e.some(e=>e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE))throw Error("Wrong buffer size.");const t=new Uint8Array(e.length*CryptoWorker.PUBLIC_KEY_SIZE);for(let i=0;i<e.length;++i)t.set(e[i],i*CryptoWorker.PUBLIC_KEY_SIZE);let s;try{s=Module.stackSave();const i=Module.stackAlloc(CryptoWorker.SIGNATURE_HASH_SIZE),n=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,n,t.length).set(t);Module._ed25519_hash_public_keys(i,n,e.length);const o=new Uint8Array(CryptoWorker.SIGNATURE_HASH_SIZE);o.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.SIGNATURE_HASH_SIZE));return o}catch(r){Log.w(CryptoWorkerImpl,r);throw r}finally{s!==undefined&&Module.stackRestore(s)}}publicKeyDelinearize(e,t){if(e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE||t.byteLength!==CryptoWorker.SIGNATURE_HASH_SIZE)throw Error("Wrong buffer size.");let s;try{s=Module.stackSave();const i=Module.stackAlloc(CryptoWorker.PUBLIC_KEY_SIZE),n=Module.stackAlloc(e.length),o=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,n,e.length).set(e);new Uint8Array(Module.HEAPU8.buffer,o,t.length).set(t);Module._ed25519_delinearize_public_key(i,o,n);const a=new Uint8Array(CryptoWorker.PUBLIC_KEY_SIZE);a.set(new Uint8Array(Module.HEAPU8.buffer,i,CryptoWorker.PUBLIC_KEY_SIZE));return a}catch(r){Log.w(CryptoWorkerImpl,r);throw r}finally{s!==undefined&&Module.stackRestore(s)}}publicKeysDelinearizeAndAggregate(e,t){if(e.some(e=>e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE)||t.byteLength!==CryptoWorker.SIGNATURE_HASH_SIZE)throw Error("Wrong buffer size.");const s=new Uint8Array(e.length*CryptoWorker.PUBLIC_KEY_SIZE);for(let n=0;n<e.length;++n)s.set(e[n],n*CryptoWorker.PUBLIC_KEY_SIZE);let r;try{r=Module.stackSave();const n=Module.stackAlloc(CryptoWorker.PUBLIC_KEY_SIZE),o=Module.stackAlloc(s.length),a=Module.stackAlloc(t.length);new Uint8Array(Module.HEAPU8.buffer,o,s.length).set(s);new Uint8Array(Module.HEAPU8.buffer,a,t.length).set(t);Module._ed25519_aggregate_delinearized_public_keys(n,a,o,e.length);const c=new Uint8Array(CryptoWorker.PUBLIC_KEY_SIZE);c.set(new Uint8Array(Module.HEAPU8.buffer,n,CryptoWorker.PUBLIC_KEY_SIZE));return c}catch(i){Log.w(CryptoWorkerImpl,i);throw i}finally{r!==undefined&&Module.stackRestore(r)}}privateKeyDelinearize(e,t,s){if(e.byteLength!==CryptoWorker.PRIVATE_KEY_SIZE||t.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE||s.byteLength!==CryptoWorker.SIGNATURE_HASH_SIZE)throw Error("Wrong buffer size.");let r;try{r=Module.stackSave();const n=Module.stackAlloc(CryptoWorker.PUBLIC_KEY_SIZE),o=Module.stackAlloc(e.length),a=Module.stackAlloc(t.length),c=Module.stackAlloc(s.length);new Uint8Array(Module.HEAPU8.buffer,o,e.length).set(e);new Uint8Array(Module.HEAPU8.buffer,a,t.length).set(t);new Uint8Array(Module.HEAPU8.buffer,c,s.length).set(s);Module._ed25519_derive_delinearized_private_key(n,c,a,o);const h=new Uint8Array(CryptoWorker.PRIVATE_KEY_SIZE);h.set(new Uint8Array(Module.HEAPU8.buffer,n,CryptoWorker.PRIVATE_KEY_SIZE));return h}catch(i){Log.w(CryptoWorkerImpl,i);throw i}finally{r!==undefined&&Module.stackRestore(r)}}delinearizedPartialSignatureCreate(e,t,s,r,i,n){if(e.some(e=>e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE)||t.byteLength!==CryptoWorker.PRIVATE_KEY_SIZE||s.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE||r.byteLength!==CryptoWorker.PRIVATE_KEY_SIZE||i.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE)throw Error("Wrong buffer size.");const o=new Uint8Array(e.length*CryptoWorker.PUBLIC_KEY_SIZE);for(let h=0;h<e.length;++h)o.set(e[h],h*CryptoWorker.PUBLIC_KEY_SIZE);let a;try{a=Module.stackSave();const h=Module.stackAlloc(CryptoWorker.PARTIAL_SIGNATURE_SIZE),l=Module.stackAlloc(o.length),u=Module.stackAlloc(t.length),d=Module.stackAlloc(s.length),_=Module.stackAlloc(r.length),g=Module.stackAlloc(i.length),f=Module.stackAlloc(n.length);new Uint8Array(Module.HEAPU8.buffer,l,o.length).set(o);new Uint8Array(Module.HEAPU8.buffer,u,t.length).set(t);new Uint8Array(Module.HEAPU8.buffer,d,s.length).set(s);new Uint8Array(Module.HEAPU8.buffer,_,r.length).set(r);new Uint8Array(Module.HEAPU8.buffer,g,i.length).set(i);new Uint8Array(Module.HEAPU8.buffer,f,n.length).set(n);Module._ed25519_delinearized_partial_sign(h,f,n.length,g,_,l,e.length,d,u);const p=new Uint8Array(CryptoWorker.PARTIAL_SIGNATURE_SIZE);p.set(new Uint8Array(Module.HEAPU8.buffer,h,CryptoWorker.PARTIAL_SIGNATURE_SIZE));return p}catch(c){Log.w(CryptoWorkerImpl,c);throw c}finally{a!==undefined&&Module.stackRestore(a)}}signatureCreate(e,t,s){const r=new Uint8Array(CryptoWorker.SIGNATURE_SIZE),i=s.byteLength;if(i>this._messageBuffer.byteLength||t.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE||e.byteLength!==CryptoWorker.PRIVATE_KEY_SIZE)throw Error("Wrong buffer size.");this._messageBuffer.set(s);this._pubKeyBuffer.set(t);this._privKeyBuffer.set(e);Module._ed25519_sign(this._signaturePointer,this._messagePointer,i,this._pubKeyPointer,this._privKeyPointer);this._privKeyBuffer.fill(0);r.set(this._signatureBuffer);return r}signatureVerify(e,t,s){const r=t.byteLength;if(s.byteLength!==CryptoWorker.SIGNATURE_SIZE||t.byteLength>this._messageBuffer.byteLength||e.byteLength!==CryptoWorker.PUBLIC_KEY_SIZE)throw Error("Wrong buffer size.");this._signatureBuffer.set(s);this._messageBuffer.set(t);this._pubKeyBuffer.set(e);return!!Module._ed25519_verify(this._signaturePointer,this._messagePointer,r,this._pubKeyPointer)}async blockVerify(e,t,s,r){Block.GENESIS||(Block.GENESIS={HASH:Hash.unserialize(new SerialBuffer(r))});const i=Block.unserialize(new SerialBuffer(e));for(let h=0;h<t.length;h++)i.body.transactions[h]._valid=t[h];const n=await i._verify(s),o=await i.header.pow(),a=i.interlink.hash(),c=i.body.hash();return{valid:n,pow:o.serialize(),interlinkHash:a.serialize(),bodyHash:c.serialize()}}}IWorker.prepareForWorkerUse(CryptoWorker,new CryptoWorkerImpl);class MinerWorker{async multiMine(e,t,s,r){}}Class.register(MinerWorker);class MinerWorkerImpl extends(IWorker.Stub(MinerWorker)){constructor(){super();this._superInit=super.init}async init(e){await this._superInit.call(this,e);await this.importWasm("worker-wasm.wasm")?await this.importScript("worker-wasm.js"):await this.importScript("worker-js.js")}async multiMine(e,t,s,r){const i=new Uint8Array(32);let n,o;try{n=Module._malloc(i.length);o=Module._malloc(e.length);Module.HEAPU8.set(e,o);const c=Module._nimiq_argon2_target(n,o,e.length,t,s,r,512);if(c===r)return!1;i.set(new Uint8Array(Module.HEAPU8.buffer,n,i.length));return{hash:i,nonce:c}}catch(a){Log.w(MinerWorkerImpl,a);throw a}finally{n!==undefined&&Module._free(n);o!==undefined&&Module._free(o)}}}IWorker.prepareForWorkerUse(MinerWorker,new MinerWorkerImpl);class MinerWorkerPool extends(IWorker.Pool(MinerWorker)){constructor(e=1){super(e=>IWorker.startWorkerForProxy(MinerWorker,e),"miner",e);this._miningEnabled=!1;this._activeNonces=[];this._block=null;this._noncesPerRun=256;this._observable=new Observable;this._shareCompact=Policy.BLOCK_TARGET_MAX;this._runsPerCycle=Infinity;this._cycleWait=100;this._superUpdateToSize=super._updateToSize;if(PlatformUtils.isNodeJs()){const e=require(`${__dirname}/nimiq_node`);this.multiMine=function(t,s,r,i){return new Promise((n,o)=>{e.nimiq_argon2_target_async(async e=>{try{if(e===i)n(!1);else{t.writePos-=4;t.writeUint32(e);const s=await Crypto.argon2d(t);n({hash:s,nonce:e})}}catch(s){o(s)}},t,s,r,i,512)})}}}get noncesPerRun(){return this._noncesPerRun}set noncesPerRun(e){this._noncesPerRun=e}get runsPerCycle(){return this._runsPerCycle}set runsPerCycle(e){this._runsPerCycle=e}get cycleWait(){return this._cycleWait}set cycleWait(e){this._cycleWait=e}on(e,t){this._observable.on(e,t)}off(e,t){this._observable.off(e,t)}async startMiningOnBlock(e,t=e.nBits){this._block=e;this._shareCompact=t;if(this._miningEnabled)this._activeNonces=[{minNonce:0,maxNonce:0}];else{await this._updateToSize();this._activeNonces=[];this._miningEnabled=!0;for(let e=0;e<this.poolSize;++e)this._startMiner()}}stop(){this._miningEnabled=!1}async _updateToSize(){PlatformUtils.isNodeJs()||await this._superUpdateToSize.call(this);for(;this._miningEnabled&&this._activeNonces.length<this.poolSize;)this._startMiner()}_startMiner(){const e=0===this._activeNonces.length?0:Math.max.apply(null,this._activeNonces.map(e=>e.maxNonce)),t={minNonce:e,maxNonce:e+this._noncesPerRun};this._activeNonces.push(t);this._singleMiner(t)["catch"](e=>Log.e(MinerWorkerPool,e))}async _singleMiner(e){let t=0;for(;this._miningEnabled&&(IWorker.areWorkersAsync||PlatformUtils.isNodeJs()||0===t)&&t<this._runsPerCycle;){t++;const s=this._block,r=await this.multiMine(s.header.serialize(),this._shareCompact,e.minNonce,e.maxNonce);if(r){const e=new Hash(r.hash);this._observable.fire("share",{block:s,nonce:r.nonce,hash:e})}else this._observable.fire("no-share",{nonce:e.maxNonce});if(this._activeNonces.length>this.poolSize){this._activeNonces.splice(this._activeNonces.indexOf(e),1);return}{const t=Math.max.apply(null,this._activeNonces.map(e=>e.maxNonce)),s={minNonce:t,maxNonce:t+this._noncesPerRun};this._activeNonces.splice(this._activeNonces.indexOf(e),1,s);e=s}}this._miningEnabled&&setTimeout(()=>this._singleMiner(e),this._cycleWait)}}Class.register(MinerWorkerPool);Error.prototype.toString=function(){return this.stack};process.on("uncaughtException",e=>{const t=e.message;t&&(t.startsWith("connect E")||"Cannot read property 'aborted' of null"===t)||console.error(`Uncaught exception: ${e.message||e}`,e)});
//# sourceMappingURL=node.js.map
